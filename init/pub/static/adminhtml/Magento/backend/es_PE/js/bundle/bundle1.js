require.config({"config": {
        "jsbuild":{"Magento_ConfigurableProduct/js/components/dynamic-rows-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/dynamic-rows/dynamic-rows',\n    'jquery'\n], function (_, registry, dynamicRows, $) {\n    'use strict';\n\n    return dynamicRows.extend({\n        defaults: {\n            actionsListOpened: false,\n            canEditField: 'canEdit',\n            newProductField: 'newProduct',\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\n            dataProviderFromGrid: '',\n            dataProviderChangeFromGrid: '',\n            insertDataFromGrid: [],\n            changeDataFromGrid: [],\n            dataProviderFromWizard: '',\n            insertDataFromWizard: [],\n            map: null,\n            isEmpty: true,\n            isShowAddProductButton: false,\n            cacheGridData: [],\n            unionInsertData: [],\n            deleteProperty: false,\n            dataLength: 0,\n            identificationProperty: 'id',\n            'attribute_set_id': '',\n            attributesTmp: [],\n            changedFlag: 'was_changed',\n            listens: {\n                'insertDataFromGrid': 'processingInsertDataFromGrid',\n                'insertDataFromWizard': 'processingInsertDataFromWizard',\n                'unionInsertData': 'processingUnionInsertData',\n                'changeDataFromGrid': 'processingChangeDataFromGrid',\n                'isEmpty': 'changeVisibility'\n            },\n            imports: {\n                'attribute_set_id': '${$.provider}:data.product.attribute_set_id'\n            },\n            'exports': {\n                'attribute_set_id': '${$.provider}:data.new-variations-attribute-set-id'\n            },\n            modules: {\n                modalWithGrid: '${ $.modalWithGrid }',\n                gridWithProducts: '${ $.gridWithProducts}'\n            }\n        },\n\n        /**\n         * Invokes initialize method of parent class,\n         * contains initialization logic\n         */\n        initialize: function () {\n            this._super()\n                .changeVisibility(this.isEmpty());\n\n            return this;\n        },\n\n        /**\n         * Change visibility\n         *\n         * When isEmpty = true, then visbible = false\n         *\n         * @param {Boolean} isEmpty\n         */\n        changeVisibility: function (isEmpty) {\n            this.visible(!isEmpty);\n        },\n\n        /**\n         * Open modal with grid.\n         *\n         * @param {String} rowIndex\n         */\n        openModalWithGrid: function (rowIndex) {\n            var productSource = this.source.get(this.dataScope + '.' + this.index + '.' + rowIndex),\n                product = {\n                    'id': productSource.id,\n                    'attributes': productSource['configurable_attribute']\n                };\n\n            this.modalWithGrid().openModal();\n            this.gridWithProducts().showGridChangeProduct(rowIndex, product);\n        },\n\n        /**\n         * Initialize children\n         *\n         * @returns {Object} Chainable.\n         */\n        initChildren: function () {\n            var tmpArray = [];\n\n            this.recordData.each(function (recordData) {\n                tmpArray.push(recordData);\n            }, this);\n\n            this.unionInsertData(tmpArray);\n\n            return this;\n        },\n\n        /**\n         * Delete record\n         *\n         * @param {Number} index - row index\n         */\n        deleteRecord: function (index) {\n            var tmpArray,\n                lastRecord;\n\n            this.reRender = false;\n            tmpArray = this.getUnionInsertData();\n            tmpArray.splice(index, 1);\n\n            if (!tmpArray.length) {\n                this.attributesTmp = this.source.get('data.attributes');\n                this.source.set('data.attributes', []);\n                this.cacheGridData = [];\n            }\n\n            if (parseInt(this.currentPage(), 10) === this.pages()) {\n                lastRecord =\n                    _.findWhere(this.elems(), {\n                        index: this.startIndex + this.getChildItems().length - 1\n                    }) ||\n                    _.findWhere(this.elems(), {\n                        index: (this.startIndex + this.getChildItems().length - 1).toString()\n                    });\n\n                lastRecord.destroy();\n            }\n\n            this.unionInsertData(tmpArray);\n\n            if (this.pages() < parseInt(this.currentPage(), 10)) {\n                this.currentPage(this.pages());\n            }\n\n            this.reRender = true;\n            this.showSpinner(false);\n        },\n\n        /**\n         * Generate associated products\n         */\n        generateAssociatedProducts: function () {\n            var productsIds = [];\n\n            this.getUnionInsertData().forEach(function (data) {\n                if (data.id !== null) {\n                    productsIds.push(data.id);\n                }\n            });\n\n            this.source.set(this.dataScopeAssociatedProduct, productsIds);\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'insertDataFromGrid', 'unionInsertData', 'isEmpty', 'isShowAddProductButton', 'actionsListOpened'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Get union insert data from source\n         *\n         * @returns {Array}\n         */\n        getUnionInsertData: function () {\n            var source = this.source.get(this.dataScope + '.' + this.index),\n                result = [];\n\n            _.each(source, function (data) {\n                result.push(data);\n            });\n\n            return result;\n        },\n\n        /**\n         * Process union insert data.\n         *\n         * @param {Array} data\n         */\n        processingUnionInsertData: function (data) {\n            var dataCount,\n                elemsCount,\n                tmpData,\n                path,\n                attributeCodes = this.source.get('data.attribute_codes');\n\n            this.isEmpty(data.length === 0);\n            this.isShowAddProductButton(\n                (!attributeCodes || data.length > 0 ? data.length : attributeCodes.length) > 0\n            );\n\n            tmpData = data.slice(this.pageSize * (this.currentPage() - 1),\n                                 this.pageSize * (this.currentPage() - 1) + parseInt(this.pageSize, 10));\n\n            this.source.set(this.dataScope + '.' + this.index, []);\n\n            _.each(tmpData, function (row, index) {\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + index);\n                row.attributes = $('<i></i>').text(row.attributes).html();\n                this.source.set(path, row);\n            }, this);\n\n            this.source.set(this.dataScope + '.' + this.index, data);\n            this.parsePagesData(data);\n\n            // Render\n            dataCount = tmpData.length;\n            elemsCount = this.elems().length;\n\n            if (dataCount > elemsCount) {\n                tmpData.each(function (elemData, index) {\n                    this.addChild(elemData, this.startIndex + index);\n                }, this);\n            } else {\n                for (elemsCount; elemsCount > dataCount; elemsCount--) {\n                    this.elems()[elemsCount - 1].destroy();\n                }\n            }\n\n            this.generateAssociatedProducts();\n        },\n\n        /**\n         * Set initial property to records data\n         *\n         * @returns {Object} Chainable.\n         */\n        setInitialProperty: function () {\n            return this;\n        },\n\n        /**\n         * Parsed data\n         *\n         * @param {Array} data - array with data\n         * about selected records\n         */\n        processingInsertDataFromGrid: function (data) {\n            var changes,\n                tmpArray;\n\n            if (!data.length) {\n                return;\n            }\n\n            tmpArray = this.getUnionInsertData();\n\n            changes = this._checkGridData(data);\n            this.cacheGridData = data;\n\n            changes.each(function (changedObject) {\n                var mappedData = this.mappingValue(changedObject);\n\n                mappedData[this.canEditField] = 0;\n                mappedData[this.newProductField] = 0;\n                mappedData.variationKey = this._getVariationKey(changedObject);\n                mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\n                tmpArray.push(mappedData);\n            }, this);\n\n            // Attributes cannot be changed before regeneration thought wizard\n            if (!this.source.get('data.attributes').length) {\n                this.source.set('data.attributes', this.attributesTmp);\n            }\n            this.unionInsertData(tmpArray);\n        },\n\n        /**\n         * Process changes from grid.\n         *\n         * @param {Object} data\n         */\n        processingChangeDataFromGrid: function (data) {\n            var tmpArray = this.getUnionInsertData(),\n                mappedData = this.mappingValue(data.product);\n\n            mappedData[this.canEditField] = 0;\n            mappedData[this.newProductField] = 0;\n            mappedData.variationKey = this._getVariationKey(data.product);\n            mappedData['configurable_attribute'] = this._getConfigurableAttribute(data.product);\n            tmpArray[data.rowIndex] = mappedData;\n\n            this.unionInsertData(tmpArray);\n        },\n\n        /**\n         * Get variation key.\n         *\n         * @param {Object} data\n         * @returns {String}\n         * @private\n         */\n        _getVariationKey: function (data) {\n            var attrCodes = this.source.get('data.attribute_codes'),\n                key = [];\n\n            attrCodes.each(function (code) {\n                key.push(data[code]);\n            });\n\n            return key.sort().join('-');\n        },\n\n        /**\n         * Get configurable attribute.\n         *\n         * @param {Object} data\n         * @returns {String}\n         * @private\n         */\n        _getConfigurableAttribute: function (data) {\n            var attrCodes = this.source.get('data.attribute_codes'),\n                confAttrs = {};\n\n            attrCodes.each(function (code) {\n                confAttrs[code] = data[code];\n            });\n\n            return JSON.stringify(confAttrs);\n        },\n\n        /**\n         * Process data insertion from wizard\n         *\n         * @param {Object} data\n         */\n        processingInsertDataFromWizard: function (data) {\n            var tmpArray = this.getUnionInsertData(),\n                productIdsToDelete = this.source.get(this.dataScopeAssociatedProduct),\n                index,\n                product = {};\n\n            tmpArray = this.unsetArrayItem(\n                tmpArray,\n                {\n                    id: null\n                }\n            );\n\n            _.each(data, function (row) {\n                if (row.productId) {\n                    index = _.indexOf(productIdsToDelete, row.productId);\n\n                    if (index > -1) {\n                        productIdsToDelete.splice(index, 1);\n                        tmpArray = this.unsetArrayItem(\n                            tmpArray,\n                            {\n                                id: row.productId\n                            }\n                        );\n                    }\n                }\n                product = this.getProductData(row);\n\n                product[this.changedFlag] = true;\n                product[this.canEditField] = row.editable;\n                product[this.newProductField] = row.newProduct;\n                tmpArray.push(product);\n            }, this);\n\n            _.each(productIdsToDelete, function (id) {\n                tmpArray = this.unsetArrayItem(\n                    tmpArray,\n                    {\n                        id: id\n                    }\n                );\n            }, this);\n\n            this.unionInsertData(tmpArray);\n        },\n\n        /**\n         *\n         * @param {Object} row\n         * @returns {Object}\n         */\n        getProductData: function (row) {\n            var product,\n                attributesText = '';\n\n            _.each(row.options, function (attribute) {\n                if (attributesText) {\n                    attributesText += ', ';\n                }\n                attributesText += attribute['attribute_label'] + ': ' + attribute.label;\n            }, this);\n\n            product = {\n                'id': row.productId,\n                'product_link': row.productUrl,\n                'name': $('<i></i>').text(row.name).html(),\n                'sku': row.sku,\n                'status': row.status,\n                'price': row.price,\n                'price_currency': row.priceCurrency,\n                'price_string': row.priceCurrency + row.price,\n                'weight': row.weight,\n                'qty': row.quantity,\n                'variationKey': row.variationKey,\n                'configurable_attribute': row.attribute,\n                'thumbnail_image': row.images.preview,\n                'media_gallery': row['media_gallery'],\n                'swatch_image': row['swatch_image'],\n                'small_image': row['small_image'],\n                image: row.image,\n                'thumbnail': row.thumbnail,\n                'attributes': attributesText\n            };\n\n            return product;\n        },\n\n        /**\n         * Remove array items matching condition.\n         *\n         * @param {Array} data\n         * @param {Object} condition\n         * @returns {Array}\n         */\n        unsetArrayItem: function (data, condition) {\n            var objs = _.where(data, condition);\n\n            _.each(objs, function (obj) {\n                var index = _.indexOf(data, obj);\n\n                if (index > -1) {\n                    data.splice(index, 1);\n                }\n            });\n\n            return data;\n        },\n\n        /**\n         * Check changed records\n         *\n         * @param {Array} data - array with records data\n         * @returns {Array} Changed records\n         */\n        _checkGridData: function (data) {\n            var cacheLength = this.cacheGridData.length,\n                curData = data.length,\n                max = cacheLength > curData ? this.cacheGridData : data,\n                changes = [],\n                obj = {};\n\n            max.each(function (record, index) {\n                obj[this.map.id] = record[this.map.id];\n\n                if (!_.where(this.cacheGridData, obj).length) {\n                    changes.push(data[index]);\n                }\n            }, this);\n\n            return changes;\n        },\n\n        /**\n         * Mapped value\n         */\n        mappingValue: function (data) {\n            var result = {};\n\n            _.each(this.map, function (prop, index) {\n                result[index] = data[prop];\n            });\n\n            return result;\n        },\n\n        /**\n         * Toggle actions list.\n         *\n         * @param {Number} rowIndex\n         * @returns {Object} Chainable.\n         */\n        toggleActionsList: function (rowIndex) {\n            var state = false;\n\n            if (rowIndex !== this.actionsListOpened()) {\n                state = rowIndex;\n            }\n            this.actionsListOpened(state);\n\n            return this;\n        },\n\n        /**\n         * Close action list.\n         *\n         * @param {Number} rowIndex\n         * @returns {Object} Chainable\n         */\n        closeList: function (rowIndex) {\n            if (this.actionsListOpened() === rowIndex) {\n                this.actionsListOpened(false);\n            }\n\n            return this;\n        },\n\n        /**\n         * Toggle product status.\n         *\n         * @param {Number} rowIndex\n         */\n        toggleStatusProduct: function (rowIndex) {\n            var tmpArray = this.getUnionInsertData(),\n                status = parseInt(tmpArray[rowIndex].status, 10);\n\n            if (status === 1) {\n                tmpArray[rowIndex].status = 2;\n            } else {\n                tmpArray[rowIndex].status = 1;\n            }\n\n            tmpArray[rowIndex][this.changedFlag] = true;\n            this.unionInsertData(tmpArray);\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/file-uploader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/file-uploader',\n    'underscore'\n], function (Element, _) {\n    'use strict';\n\n    return Element.extend({\n        processedFile: {},\n        actionsListOpened: false,\n        thumbnailUrl: '',\n        thumbnail: null,\n        smallImage: null,\n        defaults: {\n            fileInputName: ''\n        },\n\n        /**\n         * Initialize observables.\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super().observe(['processedFile', 'actionsListOpened', 'thumbnailUrl', 'thumbnail', 'smallImage']);\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        setInitialValue: function () {\n            var value = this.getInitialValue();\n\n            if (!_.isString(value)) {\n                this._super();\n            }\n\n            return this;\n        },\n\n        /**\n         * Adds provided file to the files list.\n         *\n         * @param {Object} file\n         * @returns {Object} Chainable.\n         */\n        addFile: function (file) {\n            this.processedFile(this.processFile(file));\n\n            this.value(this.processedFile().file);\n\n            return this;\n        },\n\n        /**\n         * Toggle actions list.\n         *\n         * @returns {Object} Chainable.\n         */\n        toggleActionsList: function () {\n            if (this.actionsListOpened()) {\n                this.actionsListOpened(false);\n            } else {\n                this.actionsListOpened(true);\n            }\n\n            return this;\n        },\n\n        /**\n         * Close action list.\n         *\n         * @returns {Object} Chainable\n         */\n        closeList: function () {\n            if (this.actionsListOpened()) {\n                this.actionsListOpened(false);\n            }\n\n            return this;\n        },\n\n        /**\n         * Delete Image\n         *\n         * @returns {Object} Chainable\n         */\n        deleteImage: function () {\n            this.processedFile({});\n            this.value(null);\n            this.thumbnail(null);\n            this.thumbnailUrl(null);\n            this.smallImage(null);\n\n            return this;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/modal-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/modal/modal-component',\n    'uiRegistry',\n    'underscore'\n], function (Modal, registry, _) {\n    'use strict';\n\n    return Modal.extend({\n        defaults: {\n            stepWizard: '',\n            modules: {\n                form: '${ $.formName }'\n            }\n        },\n\n        /**\n         * Open modal\n         */\n        openModal: function () {\n            var stepWizard = {};\n\n            this.form().validate();\n\n            if (this.form().source.get('params.invalid') === false) {\n                stepWizard = registry.get('index = ' + this.stepWizard);\n\n                if (!_.isUndefined(stepWizard)) {\n                    stepWizard.open();\n                }\n\n                this._super();\n            } else {\n                this.form().focusInvalid();\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/price-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/abstract'\n], function (_, registry, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            imports: {\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\n            },\n            modules: {\n                createConfigurableButton: '${$.createConfigurableButton}'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            // resolve initial disable state\n            this.handlePriceValue(this.isConfigurable);\n            // add listener to track \"configurable\" type\n            this.setListeners({\n                isConfigurable: 'handlePriceValue'\n            });\n\n            return this;\n        },\n\n        /**\n         * Calls 'initObservable' of parent\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['content']);\n\n            return this;\n        },\n\n        /**\n         * Disable and clear price if product type changed to configurable\n         *\n         * @param {String} isConfigurable\n         */\n        handlePriceValue: function (isConfigurable) {\n            this.disabled(!!this.isUseDefault() || isConfigurable);\n            this.required(!!this.isUseDefault() || !isConfigurable);\n\n            if (isConfigurable) {\n                this.clear();\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/components/qty-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            imports: {\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            // resolve initial disable state\n            this.handleQtyValue(this.isConfigurable);\n\n            /** important to set this listener in initialize because of a different order of processing.\n             * Do not move to defaults->listens section */\n            this.setListeners({\n                isConfigurable: 'handleQtyValue'\n            });\n\n            return this;\n        },\n\n        /**\n         * Disable and clear Qty if product type changed to configurable\n         *\n         * @param {String} isConfigurable\n         */\n        handleQtyValue: function (isConfigurable) {\n            this.disabled(!!this.isUseDefault() || isConfigurable);\n\n            if (isConfigurable) {\n                this.clear();\n            }\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/options/price-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*\ndefine([\n    'jquery',\n    'Magento_Catalog/catalog/type-events',\n    'notification',\n    'mage/translate'\n], function ($, productType) {\n    'use strict';\n\n    return {\n        isConfigurable: false,\n        messageInited: false,\n        messageSelector: '[data-role=product-custom-options-content]',\n        isPercentPriceTypeExist: function () {\n            var productOptionsContainer = $('#product_options_container_top');\n\n            return !!productOptionsContainer.length;\n        },\n        showWarning: function () {\n            if (!this.messageInited) {\n                $(this.messageSelector).notification();\n                this.messageInited = true;\n            }\n            this.hideWarning();\n            $(this.messageSelector).notification('add', {\n                message: $.mage.__('Custom options with price type \"percent\" is not available for ' +\n                    'configurable product.'),\n                error: false,\n                messageContainer: this.messageSelector\n            });\n        },\n        hideWarning: function () {\n            $(this.messageSelector).notification('clear');\n        },\n        init: function () {\n            $(document).on('changeTypeProduct', this._initType.bind(this));\n\n            $('#product-edit-form-tabs').on('change', '.opt-type > select', function () {\n                var selected = $('.opt-type > select :selected'),\n                    optGroup = selected.parent().attr('label');\n\n                if (optGroup === 'Select') {\n                    $('#product-edit-form-tabs').on(\n                        'click',\n                        '[data-ui-id=\"admin-product-options-options-box-select-option-type-add-select-row-button\"]',\n                        function () {\n                            this.percentPriceTypeHandler();\n                        }.bind(this)\n                    );\n                } else {\n                    this.percentPriceTypeHandler();\n                }\n            }.bind(this));\n\n            this._initType();\n        },\n        _initType: function () {\n            this.isConfigurable = productType.type.current === 'configurable';\n            if (this.isPercentPriceTypeExist()) {\n                this.percentPriceTypeHandler();\n            }\n        },\n        percentPriceTypeHandler: function () {\n            var priceType = $('[data-attr=\"price-type\"]'),\n                optionPercentPriceType = priceType.find('option[value=\"percent\"]');\n\n            if (this.isConfigurable) {\n                this.showWarning();\n                optionPercentPriceType.hide();\n                optionPercentPriceType.parent().val() === 'percent' ? optionPercentPriceType.parent().val('fixed') : '';\n            } else {\n                $(this.messageSelector).notification();\n                optionPercentPriceType.show();\n                this.hideWarning();\n            }\n        }\n    };\n});\n*/\n","Magento_ConfigurableProduct/js/variations/product-grid.js":"// jscs:disable requireDotNotation\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'Magento_Ui/js/core/app',\n    'underscore',\n    'notification',\n    'mage/translate'\n], function (Component, $, bootstrap, _) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            productsGridUrl: null,\n            productAttributes: [],\n            productsModal: null,\n            button: '',\n            gridSelector: '[data-grid-id=associated-products-container]',\n            modules: {\n                productsFilter: '${ $.productsFilter }',\n                productsProvider: '${ $.productsProvider }',\n                productsMassAction: '${ $.productsMassAction }',\n                productsColumns: '${ $.productsColumns }',\n                variationsComponent: '${ $.configurableVariations }'\n            },\n            listens: {\n                '${ $.productsProvider }:data': '_showMessageAssociatedGrid _handleManualGridOpening',\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect',\n                '${ $.configurableVariations }:productMatrix': '_showButtonAddManual _switchProductType'\n            }\n        },\n\n        /**\n         * Initialize\n         *\n         * @param {Array} options\n         */\n        initialize: function (options) {\n            this._super(options);\n            this.productsModal = $(this.gridSelector).modal({\n                title: $.mage.__('Select Associated Product'),\n                type: 'slide',\n                buttons: [\n                    {\n                        text: $.mage.__('Cancel'),\n\n                        /** Close modal */\n                        click: function () {\n                            this.closeModal();\n                        }\n                    }, {\n                        text: $.mage.__('Done'),\n                        click: this.close.bind(this, null)\n                    }\n                ]\n            });\n\n            this.productsProvider(function () {\n                this.productsModal.notification();\n            }.bind(this));\n            this.variationsComponent(function (variation) {\n                this._showButtonAddManual(variation.productMatrix());\n            }.bind(this));\n\n            this._initGrid = _.once(this._initGrid);\n            this._switchProductType = _.wrap(this._switchProductType.bind(this), function (func, params) {\n                if (!!params.length !== !!this.init) {\n                    this.init = !!params.length;\n                    func(params);\n                }\n            }.bind(this._switchProductType));\n        },\n\n        /**\n         * Initial observerable\n         * @returns {*}\n         */\n        initObservable: function () {\n            this._super().observe('button');\n\n            return this;\n        },\n\n        /**\n         * init Grid\n         * @private\n         */\n        _initGrid: function (filterData) {\n            $.ajax({\n                type: 'GET',\n                url: this._buildGridUrl(filterData),\n                context: $('body')\n            }).done(function (data) {\n                bootstrap(JSON.parse(data));\n            });\n        },\n\n        /**\n         * Select different product in configurations section\n         * @see configurable_associated_product_listing.xml\n         * @param {Integer} rowIndex\n         */\n        selectProduct: function (rowIndex) {\n            this.close(rowIndex);\n        },\n\n        /**\n         * Open\n         * @param {Object} filterData - filter data\n         * @param {Object|*} filterData.filters - attribute name\n         * @param {Object|*} filterData.filters_modifier - modifier value\n         * @param {String} callbackName\n         * @param {Boolean} showMassActionColumn\n         */\n        open: function (filterData, callbackName, showMassActionColumn) {\n            this.callbackName = callbackName;\n            this.productsMassAction(function (massActionComponent) {\n                this.productsColumns().elems().each(function (rowElement) {\n                    rowElement.disableAction = showMassActionColumn;\n                });\n                massActionComponent.visible = showMassActionColumn;\n            }.bind(this));\n            this._setFilter(filterData);\n            this._initGrid(filterData);\n            this.productsModal.trigger('openModal');\n        },\n\n        /**\n         * Close\n         */\n        close: function (rowIndex) {\n            try {\n                if (this.productsMassAction().selected.getLength()) {\n                    this.variationsComponent()[this.callbackName](this.productsMassAction()\n                        .selected.map(this.getProductById.bind(this)));\n                    this.productsMassAction().deselectAll();\n                } else if (!_.isNull(rowIndex)) {\n                    this.variationsComponent()[this.callbackName]([this.getProductByIndex(rowIndex)]);\n                }\n                this.productsModal.trigger('closeModal');\n            } catch (e) {\n                if (e.name === 'UserException') {\n                    this.productsModal.notification('clear');\n                    this.productsModal.notification('add', {\n                        message: e.message,\n                        messageContainer: this.gridSelector\n                    });\n                } else {\n                    throw e;\n                }\n            }\n        },\n\n        /**\n         * Get product by id\n         * @param {Integer} productId\n         * @returns {*}\n         */\n        getProductById: function (productId) {\n            return _.findWhere(this.productsProvider().data.items, {\n                'entity_id': productId\n            });\n        },\n\n        /**\n         * Get product\n         * @param {Integer} rowIndex\n         * @returns {*}\n         */\n        getProductByIndex: function (rowIndex) {\n            return this.productsProvider().data.items[rowIndex];\n        },\n\n        /**\n         * Build grid url\n         * @private\n         */\n        _buildGridUrl: function (filterData) {\n            var params = '?' + $.param({\n                'filters': filterData.filters,\n                'attributes_codes': this._getAttributesCodes(),\n                'filters_modifier': filterData['filters_modifier']\n            });\n\n            return this.productsGridUrl + params;\n        },\n\n        /**\n         * Show button add manual\n         * @param {Array} variations\n         * @returns {*}\n         * @private\n         */\n        _showButtonAddManual: function (variations) {\n            return this.button(variations.length);\n        },\n\n        /**\n         * @param {Array} variations\n         * @private\n         */\n        _switchProductType: function (variations) {\n            $(document).trigger('changeConfigurableTypeProduct', variations.length);\n        },\n\n        /**\n         * Get attributes codes used for configurable\n         * @private\n         */\n        _getAttributesCodes: function () {\n            return this.variationsComponent().attributes.pluck('code');\n        },\n\n        /**\n         * Show data associated grid\n         * @private\n         */\n        _showMessageAssociatedGrid: function (data) {\n            this.productsModal.notification('clear');\n\n            if (data.items.length) {\n                this.productsModal.notification('add', {\n                    message: $.mage.__('Choose a new product to delete and replace the current product configuration.'),\n                    messageContainer: this.gridSelector\n                });\n            } else {\n                this.productsModal.notification('add', {\n                    message: $.mage.__('For better results, add attributes and attribute values to your products.'),\n                    messageContainer: this.gridSelector\n                });\n            }\n        },\n\n        /**\n         * Show manually grid\n         */\n        showManuallyGrid: function () {\n            var filterModifier = _.mapObject(_.object(this._getAttributesCodes(), []), function () {\n                    return {\n                        'condition_type': 'notnull'\n                    };\n                }),\n                usedProductIds = _.values(this.variationsComponent().productAttributesMap);\n\n            if (usedProductIds && usedProductIds.length > 0) {\n                filterModifier['entity_id'] = {\n                    'condition_type': 'nin', value: usedProductIds\n                };\n            }\n\n            this.open(\n                {\n                    'filters_modifier': filterModifier\n                },\n                'appendProducts',\n                true\n            );\n        },\n\n        /**\n         * Handle manual grid after opening\n         * @private\n         */\n        _handleManualGridOpening: function (data) {\n            if (data.items.length && this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\n                this.productsColumns().elems().each(function (rowElement) {\n                    rowElement.disableAction = true;\n                });\n\n                this._disableRows(data.items);\n            }\n        },\n\n        /**\n         * Disable rows in grid for products with the same variation key\n         *\n         * @param {Array} items\n         * @param {Array} selectedVariationKeys\n         * @param {Array} selected\n         * @private\n         */\n        _disableRows: function (items, selectedVariationKeys, selected) {\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\n            selected = selected === undefined ? [] : selected;\n            this.productsMassAction(function (massaction) {\n                var configurableVariationKeys = _.union(\n                        selectedVariationKeys,\n                        _.pluck(this.variationsComponent().productMatrix(), 'variationKey')\n                    ),\n                    variationKeyMap = this._getVariationKeyMap(items),\n                    rowsForDisable = _.keys(_.pick(\n                        variationKeyMap,\n                        function (variationKey) {\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\n                        }\n                    ));\n\n                massaction.disabled(_.difference(rowsForDisable, selected));\n            }.bind(this));\n        },\n\n        /**\n         * @private\n         */\n        _handleManualGridSelect: function (selected) {\n            var selectedRows, selectedVariationKeys;\n\n            if (this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\n                    return selected.indexOf(row['entity_id']) !== -1;\n                });\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\n            }\n        },\n\n        /**\n         * Get variation key map used in manual grid.\n         *\n         * @param {Object} items\n         * @returns {Array} [{entity_id: variation-key}, ...]\n         * @private\n         */\n        _getVariationKeyMap: function (items) {\n            this._variationKeyMap = {};\n\n            _.each(items, function (row) {\n                this._variationKeyMap[row['entity_id']] = _.values(\n                    _.pick(row, this._getAttributesCodes())\n                ).sort().join('-');\n\n            }, this);\n\n            return this._variationKeyMap;\n        },\n\n        /**\n         * Set filter\n         * @private\n         */\n        _setFilter: function (filterData) {\n            this.productsProvider(function (provider) {\n                provider.params['filters_modifier'] = filterData['filters_modifier'];\n                provider.params['attributes_codes'] = this._getAttributesCodes();\n            }.bind(this));\n\n            this.productsFilter(function (filter) {\n                filter.set('filters', _.extend({\n                    'filters_modifier': filterData['filters_modifier']\n                }, filterData.filters))\n                    .apply();\n            });\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/variations.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/modal/alert',\n    'uiRegistry',\n    'mage/translate'\n], function (Component, $, ko, _, alert, registry, $t) {\n    'use strict';\n\n    /**\n     * @param {*} message\n     * @constructor\n     */\n    function UserException(message) {\n        this.message = message;\n        this.name = 'UserException';\n    }\n    UserException.prototype = Object.create(Error.prototype);\n\n    return Component.extend({\n        defaults: {\n            opened: false,\n            attributes: [],\n            usedAttributes: [],\n            attributeCodes: [],\n            attributesData: {},\n            productMatrix: [],\n            variations: [],\n            formSaveParams: [],\n            productAttributes: [],\n            disabledAttributes: [],\n            fullAttributes: [],\n            rowIndexToEdit: false,\n            productAttributesMap: null,\n            value: [],\n            modules: {\n                associatedProductGrid: '${ $.configurableProductGrid }',\n                wizardButtonElement: '${ $.wizardModalButtonName }',\n                formElement: '${ $.formName }',\n                attributeSetHandlerModal: '${ $.attributeSetHandler }'\n            },\n            imports: {\n                attributeSetName: '${ $.provider }:configurableNewAttributeSetName',\n                attributeSetId: '${ $.provider }:configurableExistingAttributeSetId',\n                attributeSetSelection: '${ $.provider }:configurableAffectedAttributeSet',\n                productPrice: '${ $.provider }:data.product.price'\n            },\n            links: {\n                value: '${ $.provider }:${ $.dataScopeVariations }',\n                usedAttributes: '${ $.provider }:${ $.dataScopeAttributes }',\n                attributesData: '${ $.provider }:${ $.dataScopeAttributesData }',\n                attributeCodes: '${ $.provider }:${ $.dataScopeAttributeCodes }',\n                skeletonAttributeSet: '${ $.provider }:data.new-variations-attribute-set-id'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n\n            this.changeButtonWizard();\n            this.initProductAttributesMap();\n            this.disableConfigurableAttributes(this.productAttributes);\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe(\n                'actions opened attributes productMatrix value usedAttributes attributesData attributeCodes'\n            );\n\n            return this;\n        },\n\n        /**\n         * @param {Object} product\n         * @return {Object}\n         * @private\n         */\n        _makeProduct: function (product) {\n            var productId = product['entity_id'] || product.productId || null,\n                attributes = _.pick(product, this.attributes.pluck('code')),\n                options = _.map(attributes, function (option, attribute) {\n                    var oldOptions = _.findWhere(this.attributes(), {\n                            code: attribute\n                        }).options,\n                        result;\n\n                    if (_.isFunction(oldOptions)) {\n                        result = oldOptions.findWhere({\n                            value: option\n                        });\n                    } else {\n                        result = _.findWhere(oldOptions, {\n                            value: option\n                        });\n                    }\n\n                    return result;\n                }.bind(this));\n\n            return {\n                attribute: JSON.stringify(attributes),\n                editable: false,\n                images: {\n                    preview: product['thumbnail_src']\n                },\n                name: product.name || product.sku,\n                options: options,\n                price: parseFloat(Math.round(product.price.replace(/[^\\d.]+/g, '') + 'e+4') + 'e-4').toFixed(4),\n                productId: productId,\n                productUrl: this.buildProductUrl(productId),\n                quantity: product.quantity || null,\n                sku: product.sku,\n                status: product.status === undefined ? 1 : parseInt(product.status, 10),\n                variationKey: this.getVariationKey(options),\n                weight: product.weight || null\n            };\n        },\n\n        /**\n         * @param {String} name\n         * @return {String|Number|Array}\n         */\n        getProductValue: function (name) {\n            name = name.split('/').join('][');\n\n            return $('[name=\"product[' + name + ']\"]:enabled:not(.ignore-validate)', this.productForm).val();\n        },\n\n        /**\n         * @param {Object} data\n         * @param {String} field\n         * @return {String}\n         */\n        getRowId: function (data, field) {\n            var key = data.variationKey;\n\n            return 'variations-matrix-' + key + '-' + field;\n        },\n\n        /**\n         * @param {Object} variation\n         * @param {String} field\n         * @return {String}\n         */\n        getVariationRowName: function (variation, field) {\n            var result;\n\n            if (variation.productId) {\n                result = 'configurations[' + variation.productId + '][' + field.split('/').join('][') + ']';\n            } else {\n                result = 'variations-matrix[' + variation.variationKey + '][' + field.split('/').join('][') + ']';\n            }\n\n            return result;\n        },\n\n        /**\n         * @param {*} variations\n         * @param {*} attributes\n         */\n        render: function (variations, attributes) {\n            this.changeButtonWizard();\n            this.populateVariationMatrix(variations);\n            this.attributes(attributes);\n            this.disableConfigurableAttributes(attributes);\n            this.handleValue(variations);\n            this.handleAttributes();\n        },\n\n        /**\n         * Change button wizard.\n         */\n        changeButtonWizard: function () {\n            if (this.variations.length) {\n                this.wizardButtonElement().title(this.wizardModalButtonTitle);\n            }\n        },\n\n        /**\n         * @param {Array} variations\n         */\n        handleValue: function (variations) {\n            var tmpArray = [];\n\n            _.each(variations, function (variation) {\n                var attributes = _.reduce(variation.options, function (memo, option) {\n                    var attribute = {};\n\n                    attribute[option['attribute_code']] = option.value;\n\n                    return _.extend(memo, attribute);\n                }, {}),\n                    gallery = {\n                        images: {}\n                    },\n                    types = {};\n\n                _.each(variation.images.images, function (image) {\n                    gallery.images[image['file_id']] = {\n                        position: image.position,\n                        file: image.file,\n                        disabled: image.disabled,\n                        label: image.label || ''\n                    };\n                    _.each(image.galleryTypes, function (type) {\n                        types[type] = image.file;\n                    });\n                }, this);\n\n                tmpArray.push(_.extend(variation, types, {\n                    productId: variation.productId || null,\n                    name: variation.name || variation.sku,\n                    priceCurrency: this.currencySymbol,\n                    weight: variation.weight,\n                    attribute: JSON.stringify(attributes),\n                    variationKey: this.getVariationKey(variation.options),\n                    editable: variation.editable === undefined ? 0 : 1,\n                    productUrl: this.buildProductUrl(variation.productId),\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10),\n                    newProduct: variation.productId ? 0 : 1,\n                    'media_gallery': gallery\n                }));\n            }, this);\n\n            this.value(tmpArray);\n        },\n\n        /**\n         * Handle attributes.\n         */\n        handleAttributes: function () {\n            var tmpArray = [],\n                codesArray = [],\n                tmpOptions = {},\n                option = {},\n                position = 0,\n                values = {};\n\n            _.each(this.attributes(), function (attribute) {\n                tmpArray.push(attribute.id);\n                codesArray.push(attribute.code);\n                values = {};\n                _.each(attribute.chosen, function (row) {\n                    values[row.value] = {\n                        'include': '1',\n                        'value_index': row.value\n                    };\n                }, this);\n                option = {\n                    'attribute_id': attribute.id,\n                    'code': attribute.code,\n                    'label': attribute.label,\n                    'position': position,\n                    'values': values\n                };\n                tmpOptions[attribute.id] = option;\n                position++;\n            }, this);\n\n            this.attributesData(tmpOptions);\n            this.usedAttributes(tmpArray);\n            this.attributeCodes(codesArray);\n        },\n\n        /**\n         * Get attributes options\n         * @see use in matrix.phtml\n         *\n         * @returns {Array}\n         */\n        getAttributesOptions: function () {\n            return this.showVariations() ? this.productMatrix()[0].options : [];\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        showVariations: function () {\n            return this.productMatrix().length > 0;\n        },\n\n        /**\n         * @param {Array} variations\n         */\n        populateVariationMatrix: function (variations) {\n            this.productMatrix([]);\n            _.each(variations, function (variation) {\n                var attributes = _.reduce(variation.options, function (memo, option) {\n                    var attribute = {};\n\n                    attribute[option['attribute_code']] = option.value;\n\n                    return _.extend(memo, attribute);\n                }, {});\n\n                this.productMatrix.push(_.extend(variation, {\n                    productId: variation.productId || null,\n                    name: variation.name || variation.sku,\n                    weight: variation.weight,\n                    attribute: JSON.stringify(attributes),\n                    variationKey: this.getVariationKey(variation.options),\n                    editable: variation.editable === undefined ? !variation.productId : variation.editable,\n                    productUrl: this.buildProductUrl(variation.productId),\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10)\n                }));\n            }, this);\n        },\n\n        /**\n         * @param {*} productId\n         */\n        buildProductUrl: function (productId) {\n            return this.productUrl.replace('%id%', productId);\n        },\n\n        /**\n         * @param {Object} options\n         * @return {String}\n         */\n        getVariationKey: function (options) {\n            return _.pluck(options, 'value').sort().join('-');\n        },\n\n        /**\n         * @param {*} options\n         * @return {*|null}\n         */\n        getProductIdByOptions: function (options) {\n            return this.productAttributesMap[this.getVariationKey(options)] || null;\n        },\n\n        /**\n         * Init product attributes map\n         */\n        initProductAttributesMap: function () {\n            if (this.productAttributesMap === null) {\n                this.productAttributesMap = {};\n                _.each(this.variations, function (product) {\n                    this.productAttributesMap[this.getVariationKey(product.options)] = product.productId;\n                }.bind(this));\n            }\n        },\n\n        /**\n         * @param {Array} attributes\n         */\n        disableConfigurableAttributes: function (attributes) {\n            var element;\n\n            _.each(this.disabledAttributes, function (attribute) {\n                registry.get('inputName = ' + 'product[' + attribute + ']').disabled(false);\n            });\n            this.disabledAttributes = [];\n\n            _.each(attributes, function (attribute) {\n                element = registry.get('inputName = ' + 'product[' + attribute.code + ']');\n\n                if (!_.isUndefined(element)) {\n                    element.disabled(true);\n                    this.disabledAttributes.push(attribute.code);\n                }\n            }, this);\n        },\n\n        /**\n         * Get currency symbol\n         * @returns {String}\n         */\n        getCurrencySymbol: function () {\n            return this.currencySymbol;\n        },\n\n        /**\n         * Chose action for the form save button\n         */\n        saveFormHandler: function () {\n            this.formElement().validate();\n\n            if (this.formElement().source.get('params.invalid') === false) {\n                this.serializeData();\n            }\n\n            if (this.checkForNewAttributes()) {\n                this.formSaveParams = arguments;\n                this.attributeSetHandlerModal().openModal();\n            } else {\n                if (this.validateForm(this.formElement())) {\n                    this.clearOutdatedData();\n                }\n                this.formElement().save(arguments[0], arguments[1]);\n\n                if (this.formElement().source.get('params.invalid')) {\n                    this.unserializeData();\n                }\n            }\n        },\n\n        /**\n         * @param {Object} formElement\n         *\n         * Validates each form element and returns true, if all elements are valid.\n         */\n        validateForm: function (formElement) {\n            formElement.validate();\n\n            return !formElement.additionalInvalid && !formElement.source.get('params.invalid');\n        },\n\n        /**\n         * Serialize data for specific form fields\n         *\n         * Serializes some complex data fields\n         *\n         * Original fields:\n         *   - configurable-matrix;\n         *   - associated_product_ids.\n         *\n         * Serialized fields in request:\n         *   - configurable-matrix-serialized;\n         *   - associated_product_ids_serialized.\n         */\n        serializeData: function () {\n            if (this.source.data['configurable-matrix']) {\n                this.source.data['configurable-matrix-serialized'] =\n                    JSON.stringify(this.source.data['configurable-matrix']);\n            }\n\n            if (this.source.data['associated_product_ids']) {\n                this.source.data['associated_product_ids_serialized'] =\n                    JSON.stringify(this.source.data['associated_product_ids']);\n            }\n        },\n\n        /**\n         * Clear outdated data for specific form fields\n         *\n         * Outdated fields:\n         *   - configurable-matrix;\n         *   - associated_product_ids.\n         */\n        clearOutdatedData: function () {\n            if (this.source.data['configurable-matrix']) {\n                delete this.source.data['configurable-matrix'];\n            }\n\n            if (this.source.data['associated_product_ids']) {\n                delete this.source.data['associated_product_ids'];\n            }\n        },\n\n        /**\n         * Unserialize data for specific form fields\n         *\n         * Unserializes some fields that were serialized this.serializeData\n         */\n        unserializeData: function () {\n            if (this.source.data['configurable-matrix-serialized']) {\n                this.source.data['configurable-matrix'] =\n                    JSON.parse(this.source.data['configurable-matrix-serialized']);\n                delete this.source.data['configurable-matrix-serialized'];\n            }\n\n            if (this.source.data['associated_product_ids_serialized']) {\n                this.source.data['associated_product_ids'] =\n                    JSON.parse(this.source.data['associated_product_ids_serialized']);\n                delete this.source.data['associated_product_ids_serialized'];\n            }\n        },\n\n        /**\n         * Check for newly added attributes\n         * @returns {Boolean}\n         */\n        checkForNewAttributes: function () {\n            var element, newAttributes = false;\n\n            _.each(this.source.get('data.attribute_codes'), function (attribute) {\n                element = registry.get('index = ' + attribute);\n\n                if (_.isUndefined(element)) {\n                    newAttributes = true;\n                }\n            }, this);\n\n            return newAttributes;\n        },\n\n        /**\n         * New attributes handler\n         * @returns {Boolean}\n         */\n        addNewAttributeSetHandler: function () {\n            var chosenAttributeSetOption;\n\n            this.formElement().validate();\n\n            if (this.formElement().source.get('params.invalid') === false) {\n                chosenAttributeSetOption = this.attributeSetSelection;\n\n                if (chosenAttributeSetOption === 'new') {\n                    this.createNewAttributeSet();\n\n                    return false;\n                }\n\n                if (chosenAttributeSetOption === 'existing') {\n                    this.set(\n                        'skeletonAttributeSet',\n                        this.attributeSetId\n                    );\n                }\n\n                this.closeDialogAndProcessForm();\n\n                return true;\n            }\n\n            this.unserializeData();\n\n            return false;\n        },\n\n        /**\n         * Handles new attribute set creation\n         * @returns {Boolean}\n         */\n        createNewAttributeSet: function () {\n            var messageBoxElement = registry.get('index = affectedAttributeSetError');\n\n            messageBoxElement.visible(false);\n\n            $.ajax({\n                type: 'POST',\n                url: this.attributeSetCreationUrl,\n                data: {\n                    gotoEdit: 1,\n                    'attribute_set_name': this.attributeSetName,\n                    'skeleton_set': this.skeletonAttributeSet,\n                    'return_session_messages_only': 1\n                },\n                dataType: 'json',\n                showLoader: true,\n                context: this\n            }).done(function (data) {\n                if (!data.error) {\n                    this.set(\n                        'skeletonAttributeSet',\n                        data.id\n                    );\n                    messageBoxElement.content(data.messages);\n                    messageBoxElement.visible(true);\n                    this.closeDialogAndProcessForm();\n                } else {\n                    messageBoxElement.content(data.messages);\n                    messageBoxElement.visible(true);\n                }\n\n                return false;\n            }).fail(function (xhr) {\n                if (xhr.statusText === 'abort') {\n                    return;\n                }\n\n                alert({\n                    content: $t('Something went wrong.')\n                });\n            });\n\n            return false;\n        },\n\n        /**\n         * Closes attribute set handler modal and process product form\n         */\n        closeDialogAndProcessForm: function () {\n            this.attributeSetHandlerModal().closeModal();\n            this.formElement().save(this.formSaveParams[0], this.formSaveParams[1]);\n        },\n\n        /**\n         * Retrieves product price\n         * @returns {*}\n         */\n        getProductPrice: function () {\n            return this.productPrice;\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/paging/sizes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/paging/sizes'\n], function (Sizes) {\n    'use strict';\n\n    return Sizes.extend({\n        defaults: {\n            options: {\n                '20': {\n                    value: 20,\n                    label: 20\n                },\n                '30': {\n                    value: 30,\n                    label: 30\n                },\n                '50': {\n                    value: 50,\n                    label: 50\n                }\n            },\n            value: 20\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/attributes_values.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'mageUtils',\n    'Magento_Ui/js/lib/collapsible',\n    'mage/translate'\n], function (Component, $, ko, _, utils, Collapsible) {\n    'use strict';\n\n    //connect items with observableArrays\n    ko.bindingHandlers.sortableList = {\n        /** @inheritdoc */\n        init: function (element, valueAccessor) {\n            var list = valueAccessor();\n\n            $(element).sortable({\n                axis: 'y',\n                handle: '[data-role=\"draggable\"]',\n                tolerance: 'pointer',\n\n                /** @inheritdoc */\n                update: function (event, ui) {\n                    var item = ko.contextFor(ui.item[0]).$data,\n                        position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]);\n\n                    if (ko.contextFor(ui.item[0]).$index() != position) { //eslint-disable-line eqeqeq\n                        if (position >= 0) {\n                            list.remove(item);\n                            list.splice(position, 0, item);\n                        }\n                        ui.item.remove();\n                    }\n                }\n            });\n        }\n    };\n\n    return Collapsible.extend({\n        defaults: {\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            createOptionsUrl: null,\n            attributes: [],\n            stepInitialized: false\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.createAttribute = _.wrap(this.createAttribute, function () {\n                var args = _.toArray(arguments),\n                    createAttribute = args.shift();\n\n                return this.doInitSavedOptions(createAttribute.apply(this, args));\n            });\n            this.createAttribute = _.memoize(this.createAttribute.bind(this), _.property('id'));\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe(['attributes']);\n\n            return this;\n        },\n\n        /**\n         * Create option.\n         */\n        createOption: function () {\n            // this - current attribute\n            this.options.push({\n                value: 0,\n                label: '',\n                id: utils.uniqueid(),\n                'attribute_id': this.id,\n                'is_new': true\n            });\n        },\n\n        /**\n         * @param {Object} option\n         */\n        saveOption: function (option) {\n            if (this.isValidOption(option)) {\n                this.options.remove(option);\n                this.options.push(option);\n                this.chosenOptions.push(option.id);\n            }\n        },\n\n        /**\n         * @param {Object} newOption\n         * @return boolean\n         */\n        isValidOption: function (newOption) {\n            var duplicatedOptions = [],\n                errorOption,\n                allOptions = [];\n\n            newOption.label = newOption.label.trim();\n\n            if (_.isEmpty(newOption.label)) {\n                return false;\n            }\n\n            _.each(this.options(), function (option) {\n                if (!_.isUndefined(allOptions[option.label]) && newOption.label === option.label) {\n                    duplicatedOptions.push(option);\n                }\n\n                allOptions[option.label] = option.label;\n            });\n\n            if (duplicatedOptions.length) {\n                _.each(duplicatedOptions, function (duplicatedOption) {\n                    errorOption = $('[data-role=\"' + duplicatedOption.id + '\"]');\n                    errorOption.addClass('_error');\n                });\n\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @param {Object} option\n         */\n        removeOption: function (option) {\n            this.options.remove(option);\n        },\n\n        /**\n         * @param {String} attribute\n         */\n        removeAttribute: function (attribute) {\n            this.attributes.remove(attribute);\n            this.wizard.setNotificationMessage(\n                $.mage.__('An attribute has been removed. This attribute will no longer appear in your configurations.')\n            );\n        },\n\n        /**\n         * @param {Object} attribute\n         * @param {*} index\n         * @return {Object}\n         */\n        createAttribute: function (attribute, index) {\n            attribute.chosenOptions = ko.observableArray([]);\n            attribute.options = ko.observableArray(_.map(attribute.options, function (option) {\n                option.id = utils.uniqueid();\n\n                return option;\n            }));\n            attribute.opened = ko.observable(this.initialOpened(index));\n            attribute.collapsible = ko.observable(true);\n            attribute.isValidOption = this.isValidOption;\n\n            return attribute;\n        },\n\n        /**\n         * First 3 attribute panels must be open.\n         *\n         * @param {Number} index\n         * @return {Boolean}\n         */\n        initialOpened: function (index) {\n            return index < 3;\n        },\n\n        /**\n         * Save attribute.\n         */\n        saveAttribute: function () {\n            var errorMessage = $.mage.__('Select options for all attributes or remove unused attributes.');\n\n            if (!this.attributes().length) {\n                throw new Error(errorMessage);\n            }\n\n            _.each(this.attributes(), function (attribute) {\n                attribute.chosen = [];\n\n                if (!attribute.chosenOptions.getLength()) {\n                    throw new Error(errorMessage);\n                }\n                _.each(attribute.chosenOptions(), function (id) {\n                    attribute.chosen.push(attribute.options.findWhere({\n                        id: id\n                    }));\n                });\n            });\n        },\n\n        /**\n         * @param {Object} attribute\n         */\n        selectAllAttributes: function (attribute) {\n            this.chosenOptions(_.pluck(attribute.options(), 'id'));\n        },\n\n        /**\n         * @param {Object} attribute\n         */\n        deSelectAllAttributes: function (attribute) {\n            attribute.chosenOptions.removeAll();\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        saveOptions: function () {\n            var newOptions = [];\n\n            _.each(this.attributes(), function (attribute) {\n                _.each(attribute.options(), function (element) {\n                    var option = attribute.options.findWhere({\n                        id: element.id\n                    });\n\n                    if (option['is_new'] === true) {\n                        if (!attribute.isValidOption(option)) {\n                            throw new Error(\n                                $.mage.__('The value of attribute \"\"%1\"\" must be unique')\n                                    .replace('\"%1\"', attribute.label)\n                            );\n                        }\n\n                        newOptions.push(option);\n                    }\n                });\n            });\n\n            if (!newOptions.length) {\n                return false;\n            }\n\n            $.ajax({\n                type: 'POST',\n                url: this.createOptionsUrl,\n                data: {\n                    options: newOptions\n                },\n                showLoader: true\n            }).done(function (savedOptions) {\n                if (savedOptions.error) {\n                    this.notificationMessage.error = savedOptions.error;\n                    this.notificationMessage.text = savedOptions.message;\n\n                    return;\n                }\n\n                _.each(this.attributes(), function (attribute) {\n                    _.each(savedOptions, function (newOptionId, oldOptionId) {\n                        var option = attribute.options.findWhere({\n                            id: oldOptionId\n                        });\n\n                        if (option) {\n                            attribute.options.remove(option);\n                            option['is_new'] = false;\n                            option.value = newOptionId;\n                            attribute.options.push(option);\n                        }\n                    });\n                });\n\n            }.bind(this));\n        },\n\n        /**\n         * @param {*} attributeIds\n         */\n        requestAttributes: function (attributeIds) {\n            $.ajax({\n                type: 'GET',\n                url: this.optionsUrl,\n                data: {\n                    attributes: attributeIds\n                },\n                showLoader: true\n            }).done(function (attributes) {\n                attributes = _.sortBy(attributes, function (attribute) {\n                    return this.wizard.data.attributesIds.indexOf(attribute.id);\n                }.bind(this));\n                this.attributes(_.map(attributes, this.createAttribute));\n            }.bind(this));\n        },\n\n        /**\n         * @param {*} attribute\n         * @return {*}\n         */\n        doInitSavedOptions: function (attribute) {\n            var selectedOptions, selectedOptionsIds, selectedAttribute = _.findWhere(this.initData.attributes, {\n                id: attribute.id\n            });\n\n            if (selectedAttribute) {\n                selectedOptions = _.pluck(selectedAttribute.chosen, 'value');\n                selectedOptionsIds = _.pluck(_.filter(attribute.options(), function (option) {\n                    return _.contains(selectedOptions, option.value);\n                }), 'id');\n                attribute.chosenOptions(selectedOptionsIds);\n                this.initData.attributes = _.without(this.initData.attributes, selectedAttribute);\n            }\n\n            return attribute;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.requestAttributes(wizard.data.attributesIds());\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        force: function (wizard) {\n            this.saveOptions();\n            this.saveAttribute(wizard);\n\n            wizard.data.attributes = this.attributes;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        back: function (wizard) {\n            wizard.data.attributesIds(this.attributes().pluck('id'));\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/bulk.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global FORM_KEY, byteConvert */\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/lib/collapsible',\n    'mage/template',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Catalog/js/product-gallery',\n    'jquery/file-uploader',\n    'mage/translate',\n    'Magento_ConfigurableProduct/js/variations/variations'\n], function (Component, $, ko, _, Collapsible, mageTemplate, alert) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            modules: {\n                variationsComponent: '${ $.variationsComponent }'\n            },\n            countVariations: 0,\n            attributes: [],\n            sections: {},\n            images: null,\n            price: '',\n            quantity: '',\n            notificationMessage: {\n                text: null,\n                error: null\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe('countVariations attributes sections');\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            var self = this;\n\n            this._super();\n            this.sections({\n                images: {\n                    label: 'images',\n                    type: ko.observable('none'),\n                    value: ko.observable(),\n                    attribute: ko.observable()\n                },\n                price: {\n                    label: 'price',\n                    type: ko.observable('none'),\n                    value: ko.observable(),\n                    attribute: ko.observable(),\n                    currencySymbol: ''\n                },\n                quantity: {\n                    label: 'quantity',\n                    type: ko.observable('none'),\n                    value: ko.observable(),\n                    attribute: ko.observable()\n                }\n            });\n\n            this.variationsComponent(function (variationsComponent) {\n                this.sections().price.currencySymbol = variationsComponent.getCurrencySymbol();\n            }.bind(this));\n\n            /**\n             * Make options sections.\n             */\n            this.makeOptionSections = function () {\n                return {\n                    images: new this.makeImages(null),\n                    price: this.price,\n                    quantity: this.quantity\n                };\n            }.bind(this);\n\n            /**\n             * @param {Object} images\n             * @param {*} typePreview\n             */\n            this.makeImages = function (images, typePreview) {\n                var preview;\n\n                if (!images) {\n                    this.images = [];\n                    this.preview = self.noImage;\n                    this.file = null;\n                } else {\n                    this.images = images;\n                    preview = _.find(this.images, function (image) {\n                        return _.contains(image.galleryTypes, typePreview);\n                    });\n\n                    if (preview) {\n                        this.file = preview.file;\n                        this.preview = preview.url;\n                    } else {\n                        this.file = null;\n                        this.preview = self.noImage;\n                    }\n                }\n            };\n            this.images = new this.makeImages();\n            _.each(this.sections(), function (section) {\n                section.type.subscribe(function () {\n                    this.setWizardNotifyMessageDependOnSectionType();\n                }.bind(this));\n            }, this);\n        },\n        types: ['each', 'single', 'none'],\n\n        /**\n         * Set Wizard notify message depend on section type\n         */\n        setWizardNotifyMessageDependOnSectionType: function () {\n            var flag = false;\n\n            _.each(this.sections(), function (section) {\n                if (section.type() !== 'none') {\n                    flag = true;\n                }\n            }, this);\n\n            if (flag) {\n                this.wizard.setNotificationMessage(\n                    $.mage.__('Choose this option to delete and replace extension data for all past configurations.')\n                );\n            } else {\n                this.wizard.cleanNotificationMessage();\n            }\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.attributes(wizard.data.attributes());\n\n            if (this.mode === 'edit') {\n                this.setWizardNotifyMessageDependOnSectionType();\n            }\n            //fill option section data\n            this.attributes.each(function (attribute) {\n                attribute.chosen.each(function (option) {\n                    option.sections = ko.observable(this.makeOptionSections());\n                }, this);\n            }, this);\n            //reset section.attribute\n            _.each(this.sections(), function (section) {\n                section.attribute(null);\n            });\n\n            this.initCountVariations();\n            this.bindGalleries();\n        },\n\n        /**\n         * Init count variations.\n         */\n        initCountVariations: function () {\n            var variations = this.generateVariation(this.attributes()),\n                newVariations = _.map(variations, function (options) {\n                    return this.variationsComponent().getVariationKey(options);\n                }.bind(this)),\n                existingVariations = _.keys(this.variationsComponent().productAttributesMap);\n\n            this.countVariations(_.difference(newVariations, existingVariations).length);\n        },\n\n        /**\n         * @param {Object} attributes - example [['b1', 'b2'],['a1', 'a2', 'a3'],['c1', 'c2', 'c3'],['d1']]\n         * @returns {*} example [['b1','a1','c1','d1'],['b1','a1','c2','d1']...]\n         */\n        generateVariation: function (attributes) {\n            return _.reduce(attributes, function (matrix, attribute) {\n                var tmp = [];\n\n                _.each(matrix, function (variations) {\n                    _.each(attribute.chosen, function (option) {\n                        option['attribute_code'] = attribute.code;\n                        option['attribute_label'] = attribute.label;\n                        tmp.push(_.union(variations, [option]));\n                    });\n                });\n\n                if (!tmp.length) {\n                    return _.map(attribute.chosen, function (option) {\n                        option['attribute_code'] = attribute.code;\n                        option['attribute_label'] = attribute.label;\n\n                        return [option];\n                    });\n                }\n\n                return tmp;\n            }, []);\n        },\n\n        /**\n         * @param {*} section\n         * @param {Object} options\n         * @return {*}\n         */\n        getSectionValue: function (section, options) {\n            switch (this.sections()[section].type()) {\n                case 'each':\n                    return _.find(this.sections()[section].attribute().chosen, function (chosen) {\n                        return _.find(options, function (option) {\n                            return chosen.id == option.id; //eslint-disable-line eqeqeq\n                        });\n                    }).sections()[section];\n\n                case 'single':\n                    return this.sections()[section].value();\n\n                case 'none':\n                    return this[section];\n            }\n        },\n\n        /**\n         * @param {*} node\n         * @return {Promise|*}\n         */\n        getImageProperty: function (node) {\n            var types = node.find('[data-role=gallery]').productGallery('option').types,\n                images = _.map(node.find('[data-role=image]'), function (image) {\n                    var imageData = $(image).data('imageData'),\n                        positionElement;\n\n                    imageData.galleryTypes = _.pluck(_.filter(types, function (type) {\n                        return type.value === imageData.file;\n                    }), 'code');\n\n                    //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    positionElement =\n                        $(image).find('[name=\"product[media_gallery][images][' + imageData.file_id + '][position]\"]');\n                    //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    if (!_.isEmpty(positionElement.val())) {\n                        imageData.position = positionElement.val();\n                    }\n\n                    return imageData;\n                });\n\n            return _.reject(images, function (image) {\n                return !!image.isRemoved;\n            });\n        },\n\n        /**\n         * Fill images section.\n         */\n        fillImagesSection: function () {\n            switch (this.sections().images.type()) {\n                case 'each':\n                    if (this.sections().images.attribute()) {\n                        this.sections().images.attribute().chosen.each(function (option) {\n                            option.sections().images = new this.makeImages(\n                                this.getImageProperty($('[data-role=step-gallery-option-' + option.id + ']')),\n                                'thumbnail'\n                            );\n                        }, this);\n                    }\n                    break;\n\n                case 'single':\n                    this.sections().images.value(new this.makeImages(\n                        this.getImageProperty($('[data-role=step-gallery-single]')),\n                        'thumbnail'\n                    ));\n                    break;\n\n                default:\n                    this.sections().images.value(new this.makeImages());\n                    break;\n            }\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        force: function (wizard) {\n            this.fillImagesSection();\n            this.validate();\n            this.validateImage();\n            wizard.data.sections = this.sections;\n            wizard.data.sectionHelper = this.getSectionValue.bind(this);\n            wizard.data.variations = this.generateVariation(this.attributes());\n        },\n\n        /**\n         * Validate.\n         */\n        validate: function () {\n            var formValid;\n\n            _.each(this.sections(), function (section) {\n                switch (section.type()) {\n                    case 'each':\n                        if (!section.attribute()) {\n                            throw new Error($.mage.__('Please select attribute for {section} section.')\n                                .replace('{section}', section.label));\n                        }\n                        break;\n\n                    case 'single':\n                        if (!section.value()) {\n                            throw new Error($.mage.__('Please fill in the values for {section} section.')\n                                .replace('{section}', section.label));\n                        }\n                        break;\n                }\n            }, this);\n            formValid = true;\n            _.each($('[data-role=attributes-values-form]'), function (form) {\n                formValid = $(form).valid() && formValid;\n            });\n\n            if (!formValid) {\n                throw new Error($.mage.__('Please fill-in correct values.'));\n            }\n        },\n\n        /**\n         * Validate image.\n         */\n        validateImage: function () {\n            switch (this.sections().images.type()) {\n                case 'each':\n                    _.each(this.sections().images.attribute().chosen, function (option) {\n                        if (!option.sections().images.images.length) {\n                            throw new Error($.mage.__('Please select image(s) for your attribute.'));\n                        }\n                    });\n                    break;\n\n                case 'single':\n                    if (this.sections().images.value().file == null) {\n                        throw new Error($.mage.__('Please choose image(s).'));\n                    }\n                    break;\n            }\n        },\n\n        /**\n         * Back.\n         */\n        back: function () {\n            this.setWizardNotifyMessageDependOnSectionType();\n        },\n\n        /**\n         * Bind galleries.\n         */\n        bindGalleries: function () {\n            $('[data-role=bulk-step] [data-role=gallery]').each(function (index, element) {\n                var gallery = $(element),\n                    uploadInput = $(gallery.find('[name=image]')),\n                    dropZone = $(gallery).find('.image-placeholder');\n\n                if (!gallery.data('gallery-initialized')) {\n                    gallery.mage('productGallery', {\n                        template: '[data-template=gallery-content]',\n                        dialogTemplate: '.dialog-template',\n                        dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\n                    });\n\n                    uploadInput.fileupload({\n                        dataType: 'json',\n                        dropZone: dropZone,\n                        process: [{\n                            action: 'load',\n                            fileTypes: /^image\\/(gif|jpeg|png)$/\n                        }, {\n                            action: 'resize',\n                            maxWidth: 1920,\n                            maxHeight: 1200\n                        }, {\n                            action: 'save'\n                        }],\n                        formData: {\n                            'form_key': FORM_KEY\n                        },\n                        sequentialUploads: true,\n                        acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        add: function (e, data) {\n                            var progressTmpl = mageTemplate('[data-template=uploader]'),\n                                fileSize,\n                                tmpl;\n\n                            $.each(data.files, function (i, file) {\n                                fileSize = typeof file.size == 'undefined' ?\n                                    $.mage.__('We could not detect a size.') :\n                                    byteConvert(file.size);\n\n                                data.fileId = Math.random().toString(33).substr(2, 18);\n\n                                tmpl = progressTmpl({\n                                    data: {\n                                        name: file.name,\n                                        size: fileSize,\n                                        id: data.fileId\n                                    }\n                                });\n\n                                $(tmpl).appendTo(gallery.find('[data-role=uploader]'));\n                            });\n\n                            $(this).fileupload('process', data).done(function () {\n                                data.submit();\n                            });\n                        },\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        done: function (e, data) {\n                            if (data.result && !data.result.error) {\n                                gallery.trigger('addItem', data.result);\n                            } else {\n                                $('#' + data.fileId)\n                                    .delay(2000)\n                                    .hide('highlight');\n                                alert({\n                                    content: $.mage.__('We don\\'t recognize or support this file extension type.')\n                                });\n                            }\n                            $('#' + data.fileId).remove();\n                        },\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        progress: function (e, data) {\n                            var progress = parseInt(data.loaded / data.total * 100, 10),\n                                progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\n\n                            $(progressSelector).css('width', progress + '%');\n                        },\n\n                        /**\n                         * @param {jQuery.Event} e\n                         * @param {Object} data\n                         */\n                        fail: function (e, data) {\n                            var progressSelector = '#' + data.fileId;\n\n                            $(progressSelector).removeClass('upload-progress').addClass('upload-failure')\n                                .delay(2000)\n                                .hide('highlight')\n                                .remove();\n                        }\n                    });\n                    gallery.data('gallery-initialized', 1);\n                }\n            });\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/select_attributes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'underscore',\n    'mage/translate'\n], function (Component, $, _) {\n    'use strict';\n\n    /**\n     * @param {Function} provider\n     */\n    var initNewAttributeListener = function (provider) {\n        $('[data-role=product-variations-matrix]').on('add', function () {\n            provider().reload();\n        });\n    };\n\n    return Component.extend({\n        attributesLabels: {},\n        stepInitialized: false,\n        defaults: {\n            modules: {\n                multiselect: '${ $.multiselectName }',\n                attributeProvider: '${ $.providerName }'\n            },\n            listens: {\n                '${ $.multiselectName }:selected': 'doSelectedAttributesLabels',\n                '${ $.multiselectName }:rows': 'doSelectSavedAttributes'\n            },\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            selectedAttributes: []\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            this.selected = [];\n\n            initNewAttributeListener(this.attributeProvider);\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super().observe(['selectedAttributes']);\n\n            return this;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.setNotificationMessage();\n        },\n\n        /**\n         * Set notification message.\n         */\n        setNotificationMessage: function () {\n            /*eslint-disable max-len*/\n            var msg = $.mage.__('When you remove or add an attribute, we automatically update all configurations and you will need to recreate current configurations manually.');\n\n            /*eslint-enable max-len*/\n\n            if (this.mode === 'edit') {\n                this.wizard.setNotificationMessage(msg);\n            }\n        },\n\n        /**\n         * Do select saved attributes.\n         */\n        doSelectSavedAttributes: function () {\n            if (this.stepInitialized === false) {\n                this.stepInitialized = true;\n                //cache attributes labels, which can be present on the 2nd page\n                _.each(this.initData.attributes, function (attribute) {\n                    this.attributesLabels[attribute.id] = attribute.label;\n                }.bind(this));\n                this.multiselect().selected(_.pluck(this.initData.attributes, 'id'));\n            }\n        },\n\n        /**\n         * @param {*} selected\n         */\n        doSelectedAttributesLabels: function (selected) {\n            var labels = [];\n\n            this.selected = selected;\n            _.each(selected, function (attributeId) {\n                var attribute;\n\n                if (!this.attributesLabels[attributeId]) {\n                    attribute = _.findWhere(this.multiselect().rows(), {\n                        'attribute_id': attributeId\n                    });\n\n                    if (attribute) {\n                        this.attributesLabels[attribute['attribute_id']] = attribute['frontend_label'];\n                    }\n                }\n                labels.push(this.attributesLabels[attributeId]);\n            }.bind(this));\n            this.selectedAttributes(labels.join(', '));\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        force: function (wizard) {\n            wizard.data.attributesIds = this.multiselect().selected;\n\n            if (!wizard.data.attributesIds() || wizard.data.attributesIds().length === 0) {\n                throw new Error($.mage.__('Please select attribute(s).'));\n            }\n            this.setNotificationMessage();\n        },\n\n        /**\n         * Back.\n         */\n        back: function () {\n        }\n    });\n});\n","Magento_ConfigurableProduct/js/variations/steps/summary.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'ko',\n    'underscore',\n    'Magento_Ui/js/grid/paging/paging',\n    'mage/translate'\n], function (Component, $, ko, _, paging) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            modules: {\n                variationsComponent: '${ $.variationsComponent }',\n                modalComponent: '${ $.modalComponent }',\n                matrixGridComponent: '${ $.matrixGridComponent }'\n            },\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            gridExisting: [],\n            gridNew: [],\n            gridDeleted: [],\n            variationsExisting: [],\n            variationsNew: [],\n            variationsDeleted: [],\n            pagingExisting: paging({\n                name: 'configurableWizard.pagingExisting',\n                sizesConfig: {\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\n                    name: 'configurableWizard.pagingExisting_sizes'\n                }\n            }),\n            pagingNew: paging({\n                name: 'configurableWizard.pagingNew',\n                sizesConfig: {\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\n                    name: 'configurableWizard.pagingNew_sizes'\n                }\n            }),\n            pagingDeleted: paging({\n                name: 'configurableWizard.pagingDeleted',\n                sizesConfig: {\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\n                    name: 'configurableWizard.pagingDeleted_sizes'\n                }\n            }),\n            attributes: [],\n            attributesName: [$.mage.__('Images'), $.mage.__('SKU'), $.mage.__('Quantity'), $.mage.__('Price')],\n            sections: [],\n            gridTemplate: 'Magento_ConfigurableProduct/variations/steps/summary-grid',\n            quantityFieldName: 'quantity'\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            var pagingObservables = {\n                currentNew: ko.getObservable(this.pagingNew, 'current'),\n                currentExisting: ko.getObservable(this.pagingExisting, 'current'),\n                currentDeleted: ko.getObservable(this.pagingDeleted, 'current'),\n                pageSizeNew: ko.getObservable(this.pagingNew, 'pageSize'),\n                pageSizeExisting: ko.getObservable(this.pagingExisting, 'pageSize'),\n                pageSizeDeleted: ko.getObservable(this.pagingDeleted, 'pageSize')\n            };\n\n            this._super().observe('gridExisting gridNew gridDeleted attributes sections');\n            this.gridExisting.columns = ko.observableArray();\n            this.gridNew.columns = ko.observableArray();\n            this.gridDeleted.columns = ko.observableArray();\n\n            _.each(pagingObservables, function (observable) {\n                observable.subscribe(function () {\n                    this.generateGrid();\n                }, this);\n            }, this);\n\n            return this;\n        },\n        nextLabelText: $.mage.__('Generate Products'),\n        variations: [],\n\n        /**\n         * @param {*} variations\n         * @param {Function} getSectionValue\n         */\n        calculate: function (variations, getSectionValue) {\n            var productSku = this.variationsComponent().getProductValue('sku'),\n                productPrice = this.variationsComponent().getProductPrice(),\n                productWeight = this.variationsComponent().getProductValue('weight'),\n                productName = this.variationsComponent().getProductValue('name'),\n                variationsKeys = [],\n                gridExisting = [],\n                gridNew = [],\n                gridDeleted = [],\n                matrixGridData = this.matrixGridComponent() ?\n                    _.indexBy(this.matrixGridComponent().getUnionInsertData(), 'variationKey') : {};\n\n            this.variations = [];\n            _.each(variations, function (options) {\n                var product, images, sku, name, quantity, price, variation,\n                    variationsKey = this.variationsComponent().getVariationKey(options),\n                    productDataFromGrid = matrixGridData[variationsKey] || {},\n                    productDataFromWizard = {},\n                    productId = this.variationsComponent().getProductIdByOptions(options);\n\n                if (productId) {\n                    product = _.findWhere(this.variationsComponent().variations, {\n                        productId: productId\n                    });\n                }\n                images = getSectionValue('images', options);\n                sku = productSku + _.reduce(options, function (memo, option) {\n                    return memo + '-' + option.label;\n                }, '');\n                name = productName + _.reduce(options, function (memo, option) {\n                    return memo + '-' + option.label;\n                }, '');\n                quantity = getSectionValue(this.quantityFieldName, options);\n\n                if (quantity) {\n                    productDataFromWizard[this.quantityFieldName] = quantity;\n                }\n                price = getSectionValue('price', options);\n\n                if (price) {\n                    productDataFromWizard.price = price;\n                }\n\n                if (productId && !images.file) {\n                    images = product.images;\n                }\n                productDataFromGrid = _.pick(\n                    productDataFromGrid,\n                    'sku',\n                    'name',\n                    'weight',\n                    'status',\n                    'price',\n                    'qty'\n                );\n\n                if (productDataFromGrid.hasOwnProperty('qty')) {\n                    productDataFromGrid[this.quantityFieldName] = productDataFromGrid.qty;\n                }\n                delete productDataFromGrid.qty;\n                product = _.pick(\n                    product || {},\n                    'sku',\n                    'name',\n                    'weight',\n                    'status',\n                    'price',\n                    this.quantityFieldName\n                );\n                variation = {\n                    options: options,\n                    images: images,\n                    sku: sku,\n                    name: name,\n                    price: productPrice,\n                    productId: productId,\n                    weight: productWeight,\n                    editable: true\n                };\n                variation[this.quantityFieldName] = quantity;\n                variation = _.extend(variation, product, productDataFromGrid, productDataFromWizard);\n\n                if (productId) {\n                    gridExisting.push(this.prepareRowForGrid(variation));\n                } else {\n                    gridNew.push(this.prepareRowForGrid(variation));\n                }\n                this.variations.push(variation);\n                variationsKeys.push(variationsKey);\n            }, this);\n\n            _.each(_.omit(this.variationsComponent().productAttributesMap, variationsKeys), function (productId) {\n                gridDeleted.push(this.prepareRowForGrid(\n                    _.findWhere(this.variationsComponent().variations, {\n                        productId: productId\n                    })\n                ));\n            }.bind(this));\n\n            this.variationsExisting = gridExisting;\n            this.variationsNew = gridNew;\n            this.variationsDeleted = gridDeleted;\n        },\n\n        /**\n         * Generate grid.\n         */\n        generateGrid: function () {\n            var pageExisting = this.pagingExisting.pageSize * this.pagingExisting.current,\n                pageNew = this.pagingNew.pageSize * this.pagingNew.current,\n                pageDeleted = this.pagingDeleted.pageSize * this.pagingDeleted.current;\n\n            this.pagingExisting.totalRecords = this.variationsExisting.length;\n            this.gridExisting(this.variationsExisting.slice(pageExisting - this.pagingExisting.pageSize, pageExisting));\n\n            this.pagingNew.totalRecords = this.variationsNew.length;\n            this.gridNew(this.variationsNew.slice(pageNew - this.pagingNew.pageSize, pageNew));\n\n            this.pagingDeleted.totalRecords = this.variationsDeleted.length;\n            this.gridDeleted(this.variationsDeleted.slice(pageDeleted - this.pagingDeleted.pageSize, pageDeleted));\n        },\n\n        /**\n         * @param {Object} variation\n         * @return {Array}\n         */\n        prepareRowForGrid: function (variation) {\n            var row = [];\n\n            row.push(_.extend({\n                images: []\n            }, variation.images));\n            row.push(variation.sku);\n            row.push(variation[this.quantityFieldName]);\n            _.each(variation.options, function (option) {\n                row.push(option.label);\n            });\n            row.push(this.variationsComponent().getCurrencySymbol() +  ' ' + variation.price);\n\n            return row;\n        },\n\n        /**\n         * @return {String|*}\n         */\n        getGridTemplate: function () {\n            return this.gridTemplate;\n        },\n\n        /**\n         * @return {*|String}\n         */\n        getGridId: function () {\n            return _.uniqueId('grid_');\n        },\n\n        /**\n         * @param {*} attributes\n         * @return {Array}\n         */\n        getColumnsName: function (attributes) {\n            var columns = this.attributesName.slice(0);\n\n            attributes.each(function (attribute, index) {\n                columns.splice(3 + index, 0, attribute.label);\n            }, this);\n\n            return columns;\n        },\n\n        /**\n         * @param {Object} wizard\n         */\n        render: function (wizard) {\n            this.wizard = wizard;\n            this.sections(wizard.data.sections());\n            this.attributes(wizard.data.attributes());\n            this.gridNew([]);\n            this.gridExisting([]);\n            this.gridDeleted([]);\n            this.gridExisting.columns(this.getColumnsName(this.wizard.data.attributes));\n            this.gridNew.columns(this.getColumnsName(this.wizard.data.attributes));\n            this.gridDeleted.columns(this.getColumnsName(this.variationsComponent().productAttributes));\n            this.calculate(wizard.data.variations, wizard.data.sectionHelper);\n            this.generateGrid();\n        },\n\n        /**\n         * Force.\n         */\n        force: function () {\n            this.variationsComponent().render(this.variations, this.attributes());\n            this.modalComponent().closeModal();\n        },\n\n        /**\n         * Back.\n         */\n        back: function () {\n        }\n    });\n});\n","Magento_Shipping/js/packages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function ($, modal, $t) {\n    'use strict';\n\n    return function (config, element) {\n        config.buttons = [\n            {\n                text: $t('Print'),\n                'class': 'action action-primary',\n\n                /**\n                 * Click handler\n                 */\n                click: function () {\n                    window.location.href = this.options.url;\n                }\n            }, {\n                text: $t('Cancel'),\n                'class': 'action action-secondary',\n\n                /**\n                 * Click handler\n                 */\n                click: function () {\n                    this.closeModal();\n                }\n            }\n        ];\n        modal(config, element);\n    };\n});\n","Magento_Shipping/order/packaging.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['prototype'], function () {\n\n    window.Packaging = Class.create();\n    Packaging.prototype = {\n        /**\n         * Initialize object\n         */\n        initialize: function (params) {\n            this.packageIncrement = 0;\n            this.packages = [];\n            this.itemsAll = [];\n            this.createLabelUrl = params.createLabelUrl ? params.createLabelUrl : null;\n            this.itemsGridUrl = params.itemsGridUrl ? params.itemsGridUrl : null;\n            this.errorQtyOverLimit = params.errorQtyOverLimit;\n            this.titleDisabledSaveBtn = params.titleDisabledSaveBtn;\n            this.window = $('packaging_window');\n            this.messages = this.window.select('.message-warning')[0];\n            this.packagesContent = $('packages_content');\n            this.template = $('package_template');\n            this.paramsCreateLabelRequest = {};\n            this.validationErrorMsg = params.validationErrorMsg;\n\n            this.defaultItemsQty            = params.shipmentItemsQty ? params.shipmentItemsQty : null;\n            this.defaultItemsPrice          = params.shipmentItemsPrice ? params.shipmentItemsPrice : null;\n            this.defaultItemsName           = params.shipmentItemsName ? params.shipmentItemsName : null;\n            this.defaultItemsWeight         = params.shipmentItemsWeight ? params.shipmentItemsWeight : null;\n            this.defaultItemsProductId      = params.shipmentItemsProductId ? params.shipmentItemsProductId : null;\n            this.defaultItemsOrderItemId    = params.shipmentItemsOrderItemId ? params.shipmentItemsOrderItemId : null;\n\n            this.shippingInformation = params.shippingInformation ? params.shippingInformation : null;\n            this.thisPage           = params.thisPage ? params.thisPage : null;\n            this.customizableContainers = params.customizable ? params.customizable : [];\n\n            this.eps = 0.000001;\n        },\n\n        /**\n         * Get Package Id\n         */\n        getPackageId: function (packageBlock) {\n            return packageBlock.id.match(/\\d{0,}$/)[0];\n        },\n\n        //******************** Setters **********************************//\n        setLabelCreatedCallback: function (callback) {\n            this.labelCreatedCallback = callback;\n        },\n        setCancelCallback: function (callback) {\n            this.cancelCallback = callback;\n        },\n        setConfirmPackagingCallback: function (callback) {\n            this.confirmPackagingCallback = callback;\n        },\n        setItemQtyCallback: function (callback) {\n            this.itemQtyCallback = callback;\n        },\n        setCreateLabelUrl: function (url) {\n            this.createLabelUrl = url;\n        },\n        setParamsCreateLabelRequest: function (params) {\n            Object.extend(this.paramsCreateLabelRequest, params);\n        },\n        //******************** End Setters *******************************//\n\n        showWindow: function () {\n            if (this.packagesContent.childElements().length == 0) {\n                this.newPackage();\n            }\n            jQuery(this.window).modal('openModal');\n        },\n\n        cancelPackaging: function () {\n            if (Object.isFunction(this.cancelCallback)) {\n                this.cancelCallback();\n            }\n        },\n\n        confirmPackaging: function (params) {\n            if (Object.isFunction(this.confirmPackagingCallback)) {\n                this.confirmPackagingCallback();\n            }\n        },\n\n        checkAllItems: function (headCheckbox) {\n            $(headCheckbox).up('table').select('tbody input[type=\"checkbox\"]').each(function (checkbox) {\n                checkbox.checked = headCheckbox.checked;\n                this._observeQty.call(checkbox);\n            }.bind(this));\n        },\n\n        cleanPackages: function () {\n            this.packagesContent.update();\n            this.packages = [];\n            this.itemsAll = [];\n            this.packageIncrement = 0;\n            this._setAllItemsPackedState();\n            this.messages.hide().update();\n        },\n\n        sendCreateLabelRequest: function () {\n            var self = this;\n\n            if (!this.validate()) {\n                this.messages.show().update(this.validationErrorMsg);\n\n                return;\n            }\n            this.messages.hide().update();\n\n            if (this.createLabelUrl) {\n                var weight, length, width, height = null;\n                var packagesParams = [];\n\n                this.packagesContent.childElements().each(function (pack) {\n                    var packageId = this.getPackageId(pack);\n\n                    weight = parseFloat(pack.select('input[name=\"container_weight\"]')[0].value);\n                    length = parseFloat(pack.select('input[name=\"container_length\"]')[0].value);\n                    width = parseFloat(pack.select('input[name=\"container_width\"]')[0].value);\n                    height = parseFloat(pack.select('input[name=\"container_height\"]')[0].value);\n                    packagesParams[packageId] = {\n                        container:                  pack.select('select[name=\"package_container\"]')[0].value,\n                        customs_value:              parseFloat(pack.select('input[name=\"package_customs_value\"]')[0].value, 10),\n                        weight:                     isNaN(weight) ? '' : weight,\n                        length:                     isNaN(length) ? '' : length,\n                        width:                      isNaN(width) ? '' : width,\n                        height:                     isNaN(height) ? '' : height,\n                        weight_units:               pack.select('select[name=\"container_weight_units\"]')[0].value,\n                        dimension_units:            pack.select('select[name=\"container_dimension_units\"]')[0].value\n                    };\n\n                    if (isNaN(packagesParams[packageId]['customs_value'])) {\n                        packagesParams[packageId]['customs_value'] = 0;\n                    }\n\n                    if ('undefined' != typeof pack.select('select[name=\"package_size\"]')[0]) {\n                        if ('' != pack.select('select[name=\"package_size\"]')[0].value) {\n                            packagesParams[packageId]['size'] = pack.select('select[name=\"package_size\"]')[0].value;\n                        }\n                    }\n\n                    if ('undefined' != typeof pack.select('input[name=\"container_girth\"]')[0]) {\n                        if ('' != pack.select('input[name=\"container_girth\"]')[0].value) {\n                            packagesParams[packageId]['girth'] = pack.select('input[name=\"container_girth\"]')[0].value;\n                            packagesParams[packageId]['girth_dimension_units'] = pack.select('select[name=\"container_girth_dimension_units\"]')[0].value;\n                        }\n                    }\n\n                    if ('undefined' != typeof pack.select('select[name=\"content_type\"]')[0] && 'undefined' != typeof pack.select('input[name=\"content_type_other\"]')[0]) {\n                        packagesParams[packageId]['content_type'] = pack.select('select[name=\"content_type\"]')[0].value;\n                        packagesParams[packageId]['content_type_other'] = pack.select('input[name=\"content_type_other\"]')[0].value;\n                    } else {\n                        packagesParams[packageId]['content_type'] = '';\n                        packagesParams[packageId]['content_type_other'] = '';\n                    }\n                    var deliveryConfirmation = pack.select('select[name=\"delivery_confirmation_types\"]');\n\n                    if (deliveryConfirmation.length) {\n                        packagesParams[packageId]['delivery_confirmation'] =  deliveryConfirmation[0].value;\n                    }\n                }.bind(this));\n\n                for (var packageId in this.packages) {\n                    if (!isNaN(packageId)) {\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[container]']              = packagesParams[packageId]['container'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight]']                 = packagesParams[packageId]['weight'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[customs_value]']          = packagesParams[packageId]['customs_value'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[length]']                 = packagesParams[packageId]['length'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[width]']                  = packagesParams[packageId]['width'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[height]']                 = packagesParams[packageId]['height'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[weight_units]']           = packagesParams[packageId]['weight_units'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[dimension_units]']        = packagesParams[packageId]['dimension_units'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type]']           = packagesParams[packageId]['content_type'];\n                        this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[content_type_other]']     = packagesParams[packageId]['content_type_other'];\n\n                        if ('undefined' != typeof packagesParams[packageId]['size']) {\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[size]'] = packagesParams[packageId]['size'];\n                        }\n\n                        if ('undefined' != typeof packagesParams[packageId]['girth']) {\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth]'] = packagesParams[packageId]['girth'];\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[girth_dimension_units]'] = packagesParams[packageId]['girth_dimension_units'];\n                        }\n\n                        if ('undefined' != typeof packagesParams[packageId]['delivery_confirmation']) {\n                            this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[params]' + '[delivery_confirmation]']  = packagesParams[packageId]['delivery_confirmation'];\n                        }\n\n                        for (var packedItemId in this.packages[packageId]['items']) {\n                            if (!isNaN(packedItemId)) {\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][qty]']           = this.packages[packageId]['items'][packedItemId]['qty'];\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][customs_value]'] = this.packages[packageId]['items'][packedItemId]['customs_value'];\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][price]']         = self.defaultItemsPrice[packedItemId];\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][name]']          = self.defaultItemsName[packedItemId];\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][weight]']        = self.defaultItemsWeight[packedItemId];\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][product_id]']    = self.defaultItemsProductId[packedItemId];\n                                this.paramsCreateLabelRequest['packages[' + packageId + ']' + '[items]' + '[' + packedItemId + '][order_item_id]'] = self.defaultItemsOrderItemId[packedItemId];\n                            }\n                        }\n                    }\n                }\n\n                new Ajax.Request(this.createLabelUrl, {\n                    parameters: this.paramsCreateLabelRequest,\n                    onSuccess: function (transport) {\n                        var response = transport.responseText;\n\n                        if (response.isJSON()) {\n                            response = response.evalJSON();\n\n                            if (response.error) {\n                                this.messages.show().innerHTML = response.message;\n                            } else if (response.ok && Object.isFunction(this.labelCreatedCallback)) {\n                                this.labelCreatedCallback(response);\n                            }\n                        }\n                    }.bind(this)\n                });\n\n                if (this.paramsCreateLabelRequest['code'] &&\n                    this.paramsCreateLabelRequest['carrier_title'] &&\n                    this.paramsCreateLabelRequest['method_title'] &&\n                    this.paramsCreateLabelRequest['price']\n                ) {\n                    var a = this.paramsCreateLabelRequest['code'];\n                    var b = this.paramsCreateLabelRequest['carrier_title'];\n                    var c = this.paramsCreateLabelRequest['method_title'];\n                    var d = this.paramsCreateLabelRequest['price'];\n\n                    this.paramsCreateLabelRequest = {};\n                    this.paramsCreateLabelRequest['code']           = a;\n                    this.paramsCreateLabelRequest['carrier_title']  = b;\n                    this.paramsCreateLabelRequest['method_title']   = c;\n                    this.paramsCreateLabelRequest['price']          = d;\n                } else {\n                    this.paramsCreateLabelRequest = {};\n                }\n            }\n        },\n\n        validate: function () {\n            var dimensionElements = $('packaging_window').select(\n                'input[name=container_length],input[name=container_width],input[name=container_height],input[name=container_girth]:not(\"._disabled\")'\n            );\n            var callback = null;\n\n            if (dimensionElements.any(function (element) {\n                return !!element.value;\n            })) {\n                callback = function (element) {\n                    $(element).addClassName('required-entry');\n                };\n            } else {\n                callback = function (element) {\n                    $(element).removeClassName('required-entry');\n                };\n            }\n            dimensionElements.each(callback);\n\n            return result = $$('[id^=\"package_block_\"] input').collect(function (element) {\n                return this.validateElement(element);\n            }, this).all();\n        },\n\n        validateElement: function (elm) {\n            var cn = $w(elm.className);\n\n            return result = cn.all(function (value) {\n                var v = Validation.get(value);\n\n                if (Validation.isVisible(elm) && !v.test($F(elm), elm)) {\n                    $(elm).addClassName('validation-failed');\n\n                    return false;\n                }\n                $(elm).removeClassName('validation-failed');\n\n                return true;\n\n            });\n        },\n\n        validateCustomsValue: function () {\n            var items = [];\n            var isValid = true;\n            var itemsPrepare = [];\n            var itemsPacked = [];\n\n            this.packagesContent.childElements().each(function (pack) {\n                itemsPrepare = pack.select('[data-role=\"package-items\"]')[0];\n\n                if (itemsPrepare) {\n                    items = items.concat(itemsPrepare.select('.grid tbody tr'));\n                }\n                itemsPacked = pack.select('.package_items')[0];\n\n                if (itemsPacked) {\n                    items = items.concat(itemsPacked.select('.grid tbody tr'));\n                }\n            });\n\n            items.each(function (item) {\n                var itemCustomsValue = item.select('[name=\"customs_value\"]')[0];\n\n                if (!this.validateElement(itemCustomsValue)) {\n                    isValid = false;\n                }\n            }.bind(this));\n\n            if (isValid) {\n                this.messages.hide().update();\n            } else {\n                this.messages.show().update(this.validationErrorMsg);\n            }\n\n            return isValid;\n        },\n\n        newPackage: function () {\n            var pack = this.template.cloneNode(true);\n\n            pack.id = 'package_block_' + ++this.packageIncrement;\n            pack.addClassName('package-block');\n            pack.select('[data-role=package-number]')[0].update(this.packageIncrement);\n            this.packagesContent.insert({\n                top: pack\n            });\n            pack.select('[data-action=package-save-items]')[0].hide();\n            pack.show();\n        },\n\n        deletePackage: function (obj) {\n            var pack = $(obj).up('[id^=\"package_block\"]');\n\n            var packItems = pack.select('.package_items')[0];\n            var packageId = this.getPackageId(pack);\n\n            delete this.packages[packageId];\n            pack.remove();\n            this.messages.hide().update();\n            this._setAllItemsPackedState();\n        },\n\n        deleteItem: function (obj) {\n            var item = $(obj).up('tr');\n            var itemId = item.select('[type=\"checkbox\"]')[0].value;\n            var pack = $(obj).up('[id^=\"package_block\"]');\n            var packItems = pack.select('.package_items')[0];\n            var packageId = this.getPackageId(pack);\n\n            delete this.packages[packageId]['items'][itemId];\n\n            if (item.offsetParent.rows.length <= 2) { /* head + this last row */\n                $(packItems).hide();\n            }\n            item.remove();\n            this.messages.hide().update();\n            this._recalcContainerWeightAndCustomsValue(packItems);\n            this._setAllItemsPackedState();\n        },\n\n        recalcContainerWeightAndCustomsValue: function (obj) {\n            var pack = $(obj).up('[id^=\"package_block\"]');\n            var packItems = pack.select('.package_items')[0];\n\n            if (packItems) {\n                if (!this.validateCustomsValue()) {\n                    return;\n                }\n                this._recalcContainerWeightAndCustomsValue(packItems);\n            }\n        },\n\n        getItemsForPack: function (obj) {\n            if (this.itemsGridUrl) {\n                var parameters = $H({\n                    'shipment_id': this.shipmentId\n                });\n                var packageBlock = $(obj).up('[id^=\"package_block\"]');\n                var packagePrapare = packageBlock.select('[data-role=package-items]')[0];\n                var packagePrapareGrid = packagePrapare.select('.grid_prepare')[0];\n\n                new Ajax.Request(this.itemsGridUrl, {\n                    parameters: parameters,\n                    onSuccess: function (transport) {\n                        var response = transport.responseText;\n\n                        if (response) {\n                            packagePrapareGrid.update(response);\n                            this.processPackagePrepare(packagePrapareGrid);\n\n                            if (packagePrapareGrid.select('.grid tbody tr').length) {\n                                packageBlock.select('[data-action=package-add-items]')[0].hide();\n                                packageBlock.select('[data-action=package-save-items]')[0].show();\n                                packagePrapare.show();\n                            } else {\n                                packagePrapareGrid.update();\n                            }\n                        }\n                    }.bind(this)\n                });\n            }\n        },\n\n        getPackedItemsQty: function () {\n            var items = [];\n\n            for (var packageId in this.packages) {\n                if (!isNaN(packageId)) {\n                    for (var packedItemId in this.packages[packageId]['items']) {\n                        if (!isNaN(packedItemId)) {\n                            if (items[packedItemId]) {\n                                items[packedItemId] += this.packages[packageId]['items'][packedItemId]['qty'];\n                            } else {\n                                items[packedItemId] = this.packages[packageId]['items'][packedItemId]['qty'];\n                            }\n                        }\n                    }\n                }\n            }\n\n            return items;\n        },\n\n        _parseQty: function (obj) {\n            var qty = $(obj).hasClassName('qty-decimal') ? parseFloat(obj.value) : parseInt(obj.value);\n\n            if (isNaN(qty) || qty <= 0) {\n                qty = 1;\n            }\n\n            return qty;\n        },\n\n        packItems: function (obj) {\n            var anySelected = false;\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\n            var packageId = this.getPackageId(packageBlock);\n            var packagePrepare = packageBlock.select('[data-role=package-items]')[0];\n            var packagePrepareGrid = packagePrepare.select('.grid_prepare')[0];\n\n            // check for exceeds the total shipped quantity\n            var checkExceedsQty = false;\n\n            this.messages.hide().update();\n            packagePrepareGrid.select('.grid tbody tr').each(function (item) {\n                var checkbox = item.select('[type=\"checkbox\"]')[0];\n                var itemId = checkbox.value;\n                var qtyValue  = this._parseQty(item.select('[name=\"qty\"]')[0]);\n\n                item.select('[name=\"qty\"]')[0].value = qtyValue;\n\n                if (checkbox.checked && this._checkExceedsQty(itemId, qtyValue)) {\n                    this.messages.show().update(this.errorQtyOverLimit);\n                    checkExceedsQty = true;\n                }\n            }.bind(this));\n\n            if (checkExceedsQty) {\n                return;\n            }\n\n            if (!this.validateCustomsValue()) {\n                return;\n            }\n\n            // prepare items for packing\n            packagePrepareGrid.select('.grid tbody tr').each(function (item) {\n                var checkbox = item.select('[type=\"checkbox\"]')[0];\n\n                if (checkbox.checked) {\n                    var qty  = item.select('[name=\"qty\"]')[0];\n                    var qtyValue  = this._parseQty(qty);\n\n                    item.select('[name=\"qty\"]')[0].value = qtyValue;\n                    anySelected = true;\n                    qty.disabled = 'disabled';\n                    checkbox.disabled = 'disabled';\n                    packagePrepareGrid.select('.grid th [type=\"checkbox\"]')[0].up('th label').hide();\n                    item.select('[data-action=package-delete-item]')[0].show();\n                } else {\n                    item.remove();\n                }\n            }.bind(this));\n\n            // packing items\n            if (anySelected) {\n                var packItems = packageBlock.select('.package_items')[0];\n\n                if (!packItems) {\n                    packagePrepare.insert(new Element('div').addClassName('grid_prepare'));\n                    packagePrepare.insert({\n                        after: packagePrepareGrid\n                    });\n                    packItems = packagePrepareGrid.removeClassName('grid_prepare').addClassName('package_items');\n                    packItems.select('.grid tbody tr').each(function (item) {\n                        var itemId = item.select('[type=\"checkbox\"]')[0].value;\n                        var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\n\n                        qtyValue = qtyValue <= 0 ? 1 : qtyValue;\n\n                        if ('undefined' == typeof this.packages[packageId]) {\n                            this.packages[packageId] = {\n                                'items': [], 'params': {}\n                            };\n                        }\n\n                        if ('undefined' == typeof this.packages[packageId]['items'][itemId]) {\n                            this.packages[packageId]['items'][itemId] = {};\n                            this.packages[packageId]['items'][itemId]['qty'] = qtyValue;\n                        } else {\n                            this.packages[packageId]['items'][itemId]['qty'] += qtyValue;\n                        }\n                    }.bind(this));\n                } else {\n                    packagePrepareGrid.select('.grid tbody tr').each(function (item) {\n                        var itemId = item.select('[type=\"checkbox\"]')[0].value;\n                        var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\n\n                        qtyValue = qtyValue <= 0 ? 1 : qtyValue;\n\n                        if ('undefined' == typeof this.packages[packageId]['items'][itemId]) {\n                            this.packages[packageId]['items'][itemId] = {};\n                            this.packages[packageId]['items'][itemId]['qty'] = qtyValue;\n                            packItems.select('.grid tbody')[0].insert(item);\n                        } else {\n                            this.packages[packageId]['items'][itemId]['qty'] += qtyValue;\n                            var packItem = packItems.select('[type=\"checkbox\"][value=\"' + itemId + '\"]')[0].up('tr').select('[name=\"qty\"]')[0];\n\n                            packItem.value = this.packages[packageId]['items'][itemId]['qty'];\n                        }\n                    }.bind(this));\n                    packagePrepareGrid.update();\n                }\n                $(packItems).show();\n                this._recalcContainerWeightAndCustomsValue(packItems);\n            } else {\n                packagePrepareGrid.update();\n            }\n\n            // show/hide disable/enable\n            packagePrepare.hide();\n            packageBlock.select('[data-action=package-save-items]')[0].hide();\n            packageBlock.select('[data-action=package-add-items]')[0].show();\n            this._setAllItemsPackedState();\n        },\n\n        validateItemQty: function (itemId, qty) {\n            return this.defaultItemsQty[itemId] < qty ? this.defaultItemsQty[itemId] : qty;\n        },\n\n        changeMeasures: function (obj) {\n            var incr = 0;\n            var incrSelected = 0;\n\n            obj.childElements().each(function (option) {\n                if (option.selected) {\n                    incrSelected = incr;\n                }\n                incr++;\n            });\n\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\n\n            packageBlock.select('.measures').each(function (item) {\n                if (item.name != obj.name) {\n                    var incr = 0;\n\n                    item.select('option').each(function (option) {\n                        if (incr == incrSelected) {\n                            item.value = option.value;\n                            //option.selected = true\n                        }\n                        incr++;\n                    });\n                }\n            });\n\n        },\n\n        checkSizeAndGirthParameter: function (obj, enabled) {\n            if (enabled == 0) {\n                return;\n            }\n            var currentNode = obj;\n\n            while (currentNode.nodeName != 'TBODY') {\n                currentNode = currentNode.parentNode;\n            }\n\n            if (!currentNode) {\n                return;\n            }\n\n            var packageSize = currentNode.select('select[name=package_size]');\n            var packageContainer = currentNode.select('select[name=package_container]');\n            var packageGirth = currentNode.select('input[name=container_girth]');\n            var packageGirthDimensionUnits = currentNode.select('select[name=container_girth_dimension_units]');\n\n            if (packageSize.length <= 0) {\n                return;\n            }\n\n            var girthEnabled = packageContainer[0].value == 'NONRECTANGULAR' || packageContainer[0].value == 'VARIABLE';\n\n            if (!girthEnabled) {\n                packageGirth[0].value = '';\n                packageGirth[0].disable();\n                packageGirth[0].addClassName('_disabled');\n                packageGirthDimensionUnits[0].disable();\n                packageGirthDimensionUnits[0].addClassName('_disabled');\n            } else {\n                packageGirth[0].enable();\n                packageGirth[0].removeClassName('_disabled');\n                packageGirthDimensionUnits[0].enable();\n                packageGirthDimensionUnits[0].removeClassName('_disabled');\n            }\n\n            var sizeEnabled = packageContainer[0].value == 'NONRECTANGULAR' || packageContainer[0].value == 'RECTANGULAR' ||\n                packageContainer[0].value == 'VARIABLE';\n\n            if (!sizeEnabled) {\n                option = document.createElement('OPTION');\n                option.value = '';\n                option.text = '';\n                packageSize[0].options.add(option);\n                packageSize[0].value = '';\n                packageSize[0].disable();\n                packageSize[0].addClassName('_disabled');\n            } else {\n                for (i = 0; i < packageSize[0].length; i++) {\n                    if (packageSize[0].options[i].value == '') {\n                        packageSize[0].removeChild(packageSize[0].options[i]);\n                    }\n                }\n                packageSize[0].enable();\n                packageSize[0].removeClassName('_disabled');\n            }\n        },\n\n        changeContainerType: function (obj) {\n            if (this.customizableContainers.length <= 0) {\n                return;\n            }\n\n            var disable = true;\n\n            for (var i in this.customizableContainers) {\n                if (this.customizableContainers[i] == obj.value) {\n                    disable = false;\n                    break;\n                }\n            }\n\n            var currentNode = obj;\n\n            while (currentNode.nodeName != 'TBODY') {\n                currentNode = currentNode.parentNode;\n            }\n\n            if (!currentNode) {\n                return;\n            }\n\n            $(currentNode).select(\n                'input[name=container_length],input[name=container_width],input[name=container_height],select[name=container_dimension_units]'\n            ).each(function (inputElement) {\n                if (disable) {\n                    Form.Element.disable(inputElement);\n                    inputElement.addClassName('_disabled');\n\n                    if (inputElement.nodeName == 'INPUT') {\n                        $(inputElement).value = '';\n                    }\n                } else {\n                    Form.Element.enable(inputElement);\n                    inputElement.removeClassName('_disabled');\n                }\n            });\n        },\n\n        changeContentTypes: function (obj) {\n            var packageBlock = $(obj).up('[id^=\"package_block\"]');\n            var contentType = packageBlock.select('[name=content_type]')[0];\n            var contentTypeOther = packageBlock.select('[name=content_type_other]')[0];\n\n            if (contentType.value == 'OTHER') {\n                Form.Element.enable(contentTypeOther);\n                contentTypeOther.removeClassName('_disabled');\n            } else {\n                Form.Element.disable(contentTypeOther);\n                contentTypeOther.addClassName('_disabled');\n            }\n\n        },\n\n        //******************** Private functions **********************************//\n        _getItemsCount: function (items) {\n            var count = 0;\n\n            items.each(function (itemCount) {\n                if (!isNaN(itemCount)) {\n                    count += parseFloat(itemCount);\n                }\n            });\n\n            return count;\n        },\n\n        /**\n         * Show/hide disable/enable buttons in case of all items packed state\n         */\n        _setAllItemsPackedState: function () {\n            var addPackageBtn = $$('[data-action=add-packages]')[0];\n            var savePackagesBtn = $$('[data-action=save-packages]')[0];\n\n            if (this._getItemsCount(this.itemsAll) > 0 &&\n                    this._checkExceedsQtyFinal(this._getItemsCount(this.getPackedItemsQty()), this._getItemsCount(this.itemsAll))\n            ) {\n                this.packagesContent.select('[data-action=package-add-items]').each(function (button) {\n                    button.disabled = 'disabled';\n                    button.addClassName('_disabled');\n                });\n                addPackageBtn.addClassName('_disabled');\n                Form.Element.disable(addPackageBtn);\n                savePackagesBtn.removeClassName('_disabled');\n                Form.Element.enable(savePackagesBtn);\n                savePackagesBtn.title = '';\n\n                // package number recalculation\n                var packagesRecalc = [];\n\n                this.packagesContent.childElements().each(function (pack) {\n                    if (!pack.select('.package_items .grid tbody tr').length) {\n                        pack.remove();\n                    }\n                });\n                var packagesCount = this.packagesContent.childElements().length;\n\n                this.packageIncrement = packagesCount;\n                this.packagesContent.childElements().each(function (pack) {\n                    var packageId = this.getPackageId(pack);\n\n                    pack.id = 'package_block_' + packagesCount;\n                    pack.select('[data-role=package-number]')[0].update(packagesCount);\n                    packagesRecalc[packagesCount] = this.packages[packageId];\n                    --packagesCount;\n                }.bind(this));\n                this.packages = packagesRecalc;\n\n            } else {\n                this.packagesContent.select('[data-action=package-add-items]').each(function (button) {\n                    button.removeClassName('_disabled');\n                    Form.Element.enable(button);\n                });\n                addPackageBtn.removeClassName('_disabled');\n                Form.Element.enable(addPackageBtn);\n                savePackagesBtn.addClassName('_disabled');\n                Form.Element.disable(savePackagesBtn);\n                savePackagesBtn.title = this.titleDisabledSaveBtn;\n            }\n        },\n\n        processPackagePrepare: function (packagePrepare) {\n            var itemsAll = [],\n                qty,\n                itemId,\n                qtyValue = 0,\n                value = 1;\n\n            packagePrepare.select('.grid tbody tr').each(function (item) {\n                qty = item.select('[name=\"qty\"]')[0],\n                    itemId = item.select('[type=\"checkbox\"]')[0].value,\n                    qtyValue = parseFloat(qty.value);\n\n                if (Object.isFunction(this.itemQtyCallback)) {\n                    value = this.itemQtyCallback(itemId);\n\n                    if (typeof value !== 'undefined') {\n                        qtyValue = parseFloat(value);\n                        qtyValue = this.validateItemQty(itemId, qtyValue);\n                        qty.value = qtyValue;\n                    }\n                } else {\n                    value = item.select('[name=\"qty\"]')[0].value;\n                    qtyValue = typeof value == 'string' && value.length == 0 ? 0 : parseFloat(value);\n\n                    if (isNaN(qtyValue) || qtyValue < 0) {\n                        qtyValue = 1;\n                    }\n                }\n\n                if (qtyValue == 0) {\n                    item.remove();\n\n                    return;\n                }\n                var packedItems = this.getPackedItemsQty();\n\n                itemsAll[itemId] = qtyValue;\n\n                for (var packedItemId in packedItems) {\n                    if (!isNaN(packedItemId)) {\n                        var packedQty = packedItems[packedItemId];\n\n                        if (itemId == packedItemId) {\n                            if (qtyValue == packedQty || qtyValue <= packedQty) {\n                                item.remove();\n                            } else if (qtyValue > packedQty) {\n                                /* fix float number precision */\n                                qty.value = Number(Number(Math.round(qtyValue - packedQty + 'e+4') + 'e-4').toFixed(4));\n                            }\n                        }\n                    }\n                }\n            }.bind(this));\n\n            if (!this.itemsAll.length) {\n                this.itemsAll = itemsAll;\n            }\n\n            packagePrepare.select('tbody input[type=\"checkbox\"]').each(function (item) {\n                $(item).observe('change', this._observeQty);\n                this._observeQty.call(item);\n            }.bind(this));\n        },\n\n        _observeQty: function () {\n            /** this = input[type=\"checkbox\"] */\n            var tr  = jQuery(this).closest('tr')[0],\n                qty = $(tr.cells[tr.cells.length - 1]).select('input[name=\"qty\"]')[0];\n\n            if (qty.disabled = !this.checked) {\n                $(qty).addClassName('_disabled');\n            } else {\n                $(qty).removeClassName('_disabled');\n            }\n        },\n\n        _checkExceedsQty: function (itemId, qty) {\n            var packedItemQty = this.getPackedItemsQty()[itemId] ? this.getPackedItemsQty()[itemId] : 0;\n            var allItemQty = this.itemsAll[itemId];\n\n            return qty * (1 - this.eps) > allItemQty *  (1 + this.eps)  - packedItemQty * (1 - this.eps);\n        },\n\n        _checkExceedsQtyFinal: function (checkOne, defQty) {\n            return checkOne * (1 + this.eps) >= defQty * (1 - this.eps);\n        },\n\n        _recalcContainerWeightAndCustomsValue: function (container) {\n            var packageBlock = container.up('[id^=\"package_block\"]');\n            var packageId = this.getPackageId(packageBlock);\n            var containerWeight = packageBlock.select('[name=\"container_weight\"]')[0];\n            var containerCustomsValue = packageBlock.select('[name=\"package_customs_value\"]')[0];\n\n            containerWeight.value = 0;\n            containerCustomsValue.value = 0;\n            container.select('.grid tbody tr').each(function (item) {\n                var itemId = item.select('[type=\"checkbox\"]')[0].value;\n                var qtyValue  = parseFloat(item.select('[name=\"qty\"]')[0].value);\n\n                if (isNaN(qtyValue) || qtyValue <= 0) {\n                    qtyValue = 1;\n                    item.select('[name=\"qty\"]')[0].value = qtyValue;\n                }\n                var itemWeight = parseFloat(this._getElementText(item.select('[data-role=item-weight]')[0]));\n\n                containerWeight.value = parseFloat(containerWeight.value) + itemWeight * qtyValue;\n                var itemCustomsValue = parseFloat(item.select('[name=\"customs_value\"]')[0].value) || 0;\n\n                containerCustomsValue.value = parseFloat(containerCustomsValue.value) + itemCustomsValue * qtyValue;\n                this.packages[packageId]['items'][itemId]['customs_value'] = itemCustomsValue;\n            }.bind(this));\n            containerWeight.value = parseFloat(parseFloat(Math.round(containerWeight.value + 'e+4') + 'e-4').toFixed(4));\n            containerCustomsValue.value = parseFloat(Math.round(containerCustomsValue.value + 'e+2') + 'e-2').toFixed(2);\n\n            if (containerCustomsValue.value == 0) {\n                containerCustomsValue.value = '';\n            }\n        },\n\n        _getElementText: function (el) {\n            if ('string' == typeof el.textContent) {\n                return el.textContent;\n            }\n\n            if ('string' == typeof el.innerText) {\n                return el.innerText;\n            }\n\n            return el.innerHTML.replace(/<[^>]*>/g, '');\n        }\n        //******************** End Private functions ******************************//\n    };\n\n});\n","Magento_AdvancedSearch/js/testconnection.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'jquery/ui'\n], function ($, alert) {\n    'use strict';\n\n    $.widget('mage.testConnection', {\n        options: {\n            url: '',\n            elementId: '',\n            successText: '',\n            failedText: '',\n            fieldMapping: ''\n        },\n\n        /**\n         * Bind handlers to events\n         */\n        _create: function () {\n            this._on({\n                'click': $.proxy(this._connect, this)\n            });\n        },\n\n        /**\n         * Method triggers an AJAX request to check search engine connection\n         * @private\n         */\n        _connect: function () {\n            var result = this.options.failedText,\n                element =  $('#' + this.options.elementId),\n                self = this,\n                params = {},\n                msg = '',\n                fieldToCheck = this.options.fieldToCheck || 'success';\n\n            element.removeClass('success').addClass('fail');\n            $.each(JSON.parse(this.options.fieldMapping), function (key, el) {\n                params[key] = $('#' + el).val();\n            });\n            $.ajax({\n                url: this.options.url,\n                showLoader: true,\n                data: params,\n                headers: this.options.headers || {}\n            }).done(function (response) {\n                if (response[fieldToCheck]) {\n                    element.removeClass('fail').addClass('success');\n                    result = self.options.successText;\n                } else {\n                    msg = response.errorMessage;\n\n                    if (msg) {\n                        alert({\n                            content: msg\n                        });\n                    }\n                }\n            }).always(function () {\n                $('#' + self.options.elementId + '_result').text(result);\n            });\n        }\n    });\n\n    return $.mage.testConnection;\n});\n","Magento_Staging/js/form/components/insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form',\n    'mage/translate',\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/modal/confirm',\n    'uiRegistry',\n    'Magento_Ui/js/lib/view/utils/async'\n], function (Insert, $t, $, _, uiConfirm, registry) {\n    'use strict';\n\n    return Insert.extend({\n        defaults: {\n            updateModalProvider: '${ $.parentName }',\n            subTitlePrefix: $t('Belongs to '),\n            switcherSelector: '.store-switcher',\n            toRemove: [],\n            imports: {\n                removeResponseData: '${ $.removeResponseProvider }',\n                modalTitle: '${ $.modalTitleProvider }',\n                modalSubTitle: '${ $.modalSubTitleProvider }',\n                destroyClosedModalContents: '${ $.updateModalProvider }:state'\n            },\n            listens: {\n                responseData: 'afterUpdate',\n                removeResponseData: 'afterRemove',\n                modalTitle: 'changeModalTitle',\n                modalSubTitle: 'changeModalSubTitle'\n            },\n            modules: {\n                updateModal: '${ $.updateModalProvider }',\n                removeModal: '${ $.removeModalProvider }',\n                upcomingListing: 'index = ${ $.upcomingListingProvider }'\n            }\n        },\n\n        /** @inheritdoc **/\n        initialize: function () {\n            _.bindAll(this, 'onSwitcherSelect');\n            this._super();\n            this.updateModal(this.initSwitcherHandler.bind(this));\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        destroyInserted: function () {\n            if (this.isRendered) {\n                _.each(this.toRemove, function (componentName) {\n                    registry.get(componentName, function (component) {\n                        if (component.hasOwnProperty('delegate')) {\n                            component.delegate('destroy');\n                        } else {\n                            component.destroy();\n                        }\n                    });\n                });\n            }\n\n            this._super();\n        },\n\n        /**\n         * Form save callback.\n         *\n         * @param {Object} data\n         */\n        afterUpdate: function (data) {\n            if (!data.error) {\n                this.updateModal('closeModal');\n                this.upcomingListing('reload');\n            }\n        },\n\n        /**\n         * Form remove callback.\n         *\n         * @param {Object} data\n         */\n        afterRemove:  function (data) {\n            if (!data.error) {\n                this.removeModal('closeModal');\n                this.afterUpdate(data);\n            }\n        },\n\n        /**\n         * Change modal title.\n         *\n         * @param {String} title\n         */\n        changeModalTitle: function (title) {\n            this.updateModal('setTitle', title);\n        },\n\n        /**\n         * Change modal sub title.\n         *\n         * @param {String} subTitle\n         */\n        changeModalSubTitle: function (subTitle) {\n            subTitle = subTitle ?\n            this.subTitlePrefix + this.modalTitle + ' ' + subTitle :\n                '';\n\n            this.updateModal('setSubTitle', subTitle);\n        },\n\n        /**\n         * Destroy contents of modal when it is closed\n         *\n         * @param {Boolean} state\n         */\n        destroyClosedModalContents: function (state) {\n            if (state === false) {\n                this.destroyInserted();\n            }\n        },\n\n        /**\n         * Switcher initialization.\n         */\n        initSwitcherHandler: function () {\n            var switcherSelector = this.updateModal().rootSelector + ' ' + this.switcherSelector,\n                self = this;\n\n            $.async(switcherSelector, function (switcher) {\n                $(switcher).on('click', 'li a', self.onSwitcherSelect);\n            });\n        },\n\n        /**\n         * Store switcher selection handler.\n         * @param {Object} e - event object.\n         */\n        onSwitcherSelect: function (e) {\n            var self = this,\n                param = $(e.currentTarget).data('param'),\n                params = {\n                    store: 0\n                };\n\n            params[param] = $(e.currentTarget).data('value');\n\n            uiConfirm({\n                content:  $t('Please confirm scope switching. All data that hasn\\'t been saved will be lost.'),\n                actions: {\n\n                    /** Confirm callback. */\n                    confirm: function () {\n                        self.destroyInserted();\n                        params = _.extend(self.previousParams, params);\n                        self.render(params);\n                    }\n                }\n            });\n        }\n    });\n});\n","Magento_Staging/js/grid/columns/includes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'underscore',\n    'Magento_Ui/js/grid/columns/column'\n], function (_, Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_Staging/grid/includes'\n        },\n\n        /**\n         * Count items.\n         *\n         * @param {Object} record - Record object.\n         * @returns {Number}\n         */\n        countItems: function (record) {\n            var items = this.getItems(record),\n                total = 0;\n\n            items.forEach(function (item) {\n                total += parseInt(item.count, 10);\n            });\n\n            return total;\n        },\n\n        /**\n         * Extracts records' items.\n         *\n         * @param {Object} record - Record object.\n         * @returns {Object}\n         */\n        getItems: function (record) {\n            return record[this.index];\n        },\n\n        /**\n         * Extracts item label.\n         *\n         * @param {Object} item - Item object.\n         * @returns {String}\n         */\n        getItemLabel: function (item) {\n            return item.entityLabel;\n        }\n    });\n});\n","Magento_Staging/js/grid/columns/singleselect.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/multiselect',\n    'underscore'\n], function (Select, _) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/text',\n            bodyTmpl: 'Magento_Staging/grid/cells/singleselect',\n            label: '',\n            extendedSelections: [],\n            listens: {\n                selected: 'onSelectedChange setExtendedSelections'\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('extendedSelections');\n\n            return this;\n        },\n\n        /**\n         * Getter for extended selections.\n         *\n         * @returns {Array}\n         */\n        getExtendedSelections: function () {\n            return this.extendedSelections();\n        },\n\n        /**\n         * Setter for extended selections.\n         *\n         * @param {Array} selected\n         */\n        setExtendedSelections: function (selected) {\n            var item = {},\n                extended = [];\n\n            _.each(selected, function (id) {\n                item[this.indexField] = id;\n                extended.push(_.findWhere(this.rows(), item));\n            }, this);\n\n            this.set('extendedSelections', extended);\n        },\n\n        /** @inheritdoc */\n        isSelected: function (id, isIndex) {\n            id = this.getId(id, isIndex);\n\n            return this.selected()[0] === id;\n        },\n\n        /** @inheritdoc */\n        _setSelection: function (id, isIndex, select) {\n            var selected = this.selected;\n\n            id = this.getId(id, isIndex);\n\n            if (!select && this.isSelected(id)) {\n                selected([]);\n            } else if (select) {\n                selected([id]);\n            }\n\n            return this;\n        }\n    });\n});\n","Magento_Staging/js/grid/columns/status.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/grid/columns/select'\n], function (_, SelectColumn) {\n    'use strict';\n\n    return SelectColumn.extend({\n        defaults: {\n            updateTypesMap: []\n        },\n\n        /** @inheritdoc **/\n        initialize: function () {\n            return this._super()\n                    .processingUpdateTypesMap();\n        },\n\n        /**\n         * Processing update types -\n         * add labels to map\n         *\n         * @returns {Object} Chainable\n         */\n        processingUpdateTypesMap: function () {\n            var optionData;\n\n            this.updateTypesMap.forEach(function (data) {\n                optionData = _.findWhere(this.options, {\n                    value: data.value\n                });\n                data.label = optionData ? optionData.label : '';\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Overwrite parent method -\n         * add class to highlight column\n         *\n         * @returns {Object} Classes\n         */\n        getFieldClass: function (record) {\n            var data = _.findWhere(this.updateTypesMap, {\n                    value: record[this.index].toString()\n                });\n\n            if (data) {\n                this.resetFieldClass();\n                this.fieldClass[data.className] = true;\n            }\n\n            return this.fieldClass;\n        },\n\n        /**\n         * Clean field classes for update types.\n         */\n        resetFieldClass: function () {\n            _.each(this.updateTypesMap, function (type) {\n                this.fieldClass[type.className] = false;\n            }, this);\n        }\n    });\n});\n","Magento_Staging/js/grid/paging/paging.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/paging/paging'\n], function (Paging) {\n    'use strict';\n\n    return Paging.extend({\n        defaults: {\n            totalTmpl: 'Magento_Staging/grid/paging/paging-total',\n            extendedSelections: [],\n            imports: {\n                extendedSelections: '${ $.selectProvider }:extendedSelections'\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('extendedSelections');\n\n            return this;\n        }\n    });\n});\n","Magento_Staging/js/preview/preview.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'uiRegistry',\n    'uiClass',\n    'moment',\n    'mageUtils',\n    'jquery/ui',\n    'mage/translate'\n], function ($, _, registry, Class, moment, utils) {\n    'use strict';\n\n    var queryBuilder = {\n\n        /**\n         * Extracts value of specified 'GET' parameter\n         * from a provided url string.\n         *\n         * @param {String} url - Url to be processed.\n         * @param {String} key - Name of parameter to be extracted.\n         * @returns {String|Undefined} Parameters' value.\n         */\n        get: function (url, key) {\n            var regExp,\n                value;\n\n            key = key\n                .replace(/[\\[]/, '\\\\\\[')\n                .replace(/[\\]]/, '\\\\\\]');\n\n            regExp = new RegExp('[\\\\?&]' + key + '=([^&#]*)');\n            value  = regExp.exec(url);\n\n            if (value) {\n                return value[1];\n            }\n        },\n\n        /**\n         * Adds 'GET' parameter to the url.\n         *\n         * @param {String} url - Url to be processed.\n         * @param {String} key - Name of parameter that will be added.\n         * @param {*} value - Parameters' value.\n         * @returns {String} Modified string.\n         */\n        set: function (url, key, value) {\n            var hashIndex   = url.indexOf('#'),\n                hasHash     = !~hashIndex,\n                hash        = hasHash ? '' : url.substr(hashIndex),\n                regExp      = new RegExp('([?&])' + key + '=.*?(&|$)', 'i'),\n                separator;\n\n            value = encodeURIComponent(value);\n            url = hasHash ? url : url.substr(0, hashIndex);\n\n            if (url.match(regExp)) {\n                url = url.replace(regExp, '$1' + key + '=' + value + '$2');\n            } else {\n                separator = ~url.indexOf('?') ? '&' : '?';\n                url += separator + key + '=' + value;\n            }\n\n            return url + hash;\n        },\n\n        /**\n         * Removes specified 'GET' parameter from a provided url.\n         *\n         * @param {String} url - Url to be processed.\n         * @param {String} key - Name of parameter that will be removed.\n         * @returns {String} Modified string.\n         */\n        remove: function (url, key) {\n            var urlParts = url.split('?'),\n                baseUrl  = urlParts[0],\n                query    = urlParts[1],\n                regExp;\n\n            if (!query) {\n                return url;\n            }\n\n            query = query.split('#');\n\n            regExp = new RegExp('&' + key + '(=[^&]*)?|^' + key + '(=[^&]*)?&?');\n            query[0] = query[0].replace(regExp, '');\n\n            if (query[0]) {\n                baseUrl += '?' + query.join('#');\n            }\n\n            return baseUrl;\n        }\n    };\n\n    return Class.extend({\n        defaults: {\n            storesProvider: 'store-views',\n            selectors: {\n                dateField: '#staging_date',\n                previewHeader: '[data-role=preview-header]',\n                iframeContainer: '[data-role=iframe-container]',\n                iframe: '[data-role=preview-iframe]',\n                updateBtn: '[data-role=update-button]',\n                shareBtn: '[data-role=share-button]',\n                shareModal: '[data-role=share-modal]',\n                shareModalInput: '[data-role=share-modal-input]',\n                closeBtn: '[data-role=collapsible-content-close]',\n                collapsibleTitle: '[data-role=collapsible-title]'\n            }\n        },\n\n        /**\n         *\n         * @returns {Preview} Chainable.\n         */\n        initialize: function () {\n            this._super()\n                .initDOMElements();\n\n            this.storesProvider = registry.get(this.storesProvider);\n            this.datetimeFormat = utils.normalizeDate(this.datetimeFormat);\n\n            return this;\n        },\n\n        /**\n         * Performs initial DOM elements manipulations.\n         *\n         * @returns {Preview} Chainable.\n         */\n        initDOMElements: function () {\n            var selectors = this.selectors;\n\n            this.$previewHeader = document.querySelector(selectors.previewHeader);\n            this.$dateField = document.querySelector(selectors.dateField);\n            this.$iframeContainer = document.querySelector(selectors.iframeContainer);\n            this.$iframe = this.$iframeContainer.querySelector(selectors.iframe);\n            this.initModal();\n\n            $(selectors.updateBtn).on('click', this.update.bind(this));\n            $(selectors.shareBtn).on('click', this.share.bind(this));\n            $(selectors.closeBtn).on('click', this.onCloseBtnClick.bind(this));\n            $(selectors.collapsibleTitle).on('click', this.onTitleClick.bind(this));\n\n            $(window).on('resize', this.onWindowResize.bind(this));\n            $(this.$iframe).on('load', this.onIFrameLoaded.bind(this));\n\n            if (this.isIFrameLoaded()) {\n                this.onIFrameLoaded();\n            }\n\n            this.updateIFrameHeight();\n\n            return this;\n        },\n\n        /**\n         * Init modal window for share button\n         */\n        initModal: function () {\n            var selectors = this.selectors,\n                context = this;\n\n            $(selectors.shareModal).modal({\n                title: $.mage.__('Share Preview Link'),\n\n                /**\n                 * Close current modal\n                 */\n                closeCurrentModal: function () {\n                    this.closeModal();\n                },\n\n                /**\n                 * Set current URL to modal input.\n                 */\n                opened: function () {\n                    $(selectors.shareModalInput).val(context.buildUrl()).trigger('select');\n                },\n                buttons: [\n                    {\n                        'text': $.mage.__('Cancel'),\n                        'class': 'action-secondary',\n\n                        /**\n                         * Close modal\n                         */\n                        'click': function () {\n                            this.closeModal();\n                        }\n                    }\n                ]\n            });\n        },\n\n        /**\n         * Establishes interceptor for AJAX requests made within iFrame.\n         *\n         * @returns {Preview} Chainable.\n         */\n        initIFrameAjaxInterceptor: function () {\n            var iFrameWindow       = this.getIFrameWindow(),\n                iFrameAjaxCallback = this.processIFrameAjax.bind(this),\n                timer              = setInterval(function () {\n                    if (typeof iFrameWindow.require === 'function') {\n                        iFrameWindow.require(['jquery'], function (jQuery) {\n                            jQuery.ajaxPrefilter(iFrameAjaxCallback);\n                        });\n                        clearInterval(timer);\n                    }\n                }, 100);\n\n            return this;\n        },\n\n        /**\n         * Update page's url to match current configuration.\n         */\n        update: function () {\n            window.location.href = this.buildUrl();\n        },\n\n        /**\n         * Share current configuration.\n         */\n        share: function () {\n            $(this.selectors.shareModal).modal('openModal');\n        },\n\n        /**\n         * Creates pages' url based on the current configuration.\n         *\n         * @returns {String}\n         */\n        buildUrl: function () {\n            var url            = this.getBaseUrl(),\n                previewVersion = this.getPreviewVersion(),\n                previewUrl     = this.buildPreviewUrl(),\n                previewStore   = this.storesProvider.value();\n\n            url = queryBuilder.set(url, this.previewVersionParam, previewVersion);\n            url = queryBuilder.set(url, this.previewStoreParam, previewStore);\n            url = queryBuilder.set(url, this.previewUrlParam, previewUrl);\n\n            return url;\n        },\n\n        /**\n         * Creates preview's url based on the current configuration.\n         *\n         * @returns {String}\n         */\n        buildPreviewUrl: function () {\n            var url       = this.getIFrameUrl(),\n                storeData = this.getSelectedStore();\n\n            url = this.applyStoreToUrl(url, storeData);\n\n            url = queryBuilder.remove(url, this.storeParam);\n            url = queryBuilder.remove(url, this.versionParam);\n            url = queryBuilder.remove(url, this.sidParam);\n            url = queryBuilder.remove(url, this.timestampParam);\n            url = queryBuilder.remove(url, this.signatureParam);\n\n            return url;\n        },\n\n        /**\n         * Applies store data to provided url.\n         *\n         * @param {String} url\n         * @param {Object} storeData\n         * @returns {String}\n         */\n        applyStoreToUrl: function (url, storeData) {\n            var urlStore = this.getStoreOfUrl(url),\n                path;\n\n            path = urlStore ?\n                url.slice(urlStore.baseUrl.length) :\n                '';\n\n            return storeData.baseUrl + path;\n        },\n\n        /**\n         * Processes configuration of iFrame AJAX request.\n         *\n         * @param {Object} options\n         */\n        processIFrameAjax: function (options) {\n            var url     = options.url,\n                version = this.getPreviewVersion();\n\n            url = queryBuilder.set(url, this.versionParam, version);\n\n            options.url = url;\n        },\n\n        /**\n         * Returns currently selected store object.\n         *\n         * @returns {Object}\n         */\n        getSelectedStore: function () {\n            var provider = this.storesProvider,\n                storeCode = provider.value();\n\n            return provider.getOption(storeCode);\n        },\n\n        /**\n         * Returns an array of available stores.\n         *\n         * @returns {Object}\n         */\n        getStores: function () {\n            return this.storesProvider.indexedOptions;\n        },\n\n        /**\n         * Extracts store data associated with provided url.\n         *\n         * @param {String} url\n         * @returns {Object}\n         */\n        getStoreOfUrl: function (url) {\n            var stores;\n\n            stores = _.sortBy(this.getStores(), function (store) {\n                return -store.baseUrl.length;\n            });\n\n            return _.find(stores, function (store) {\n                return !!~url.indexOf(store.baseUrl);\n            });\n        },\n\n        /**\n         * Returns base url of the page.\n         *\n         * @returns {String}\n         */\n        getBaseUrl: function () {\n            return this.baseUrl;\n        },\n\n        /**\n         * Creates version identifier based on the selected date.\n         *\n         * @returns {Number}\n         */\n        getPreviewVersion: function () {\n            var value = this.$dateField.value,\n                date = moment.utc(value, this.datetimeFormat);\n\n            date.subtract(this.timezoneOffset, 'seconds');\n\n            return date.unix();\n        },\n\n        /**\n         * Returns window object of the IFrame.\n         *\n         * @returns {Window}\n         */\n        getIFrameWindow: function () {\n            var iframe = this.$iframe;\n\n            return iframe.contentDocument.defaultView;\n        },\n\n        /**\n         * Returns current url of the IFrame.\n         *\n         * @returns {String}\n         */\n        getIFrameUrl: function () {\n            return this.getIFrameWindow().location.href;\n        },\n\n        /**\n         * Checks if iFrame is loaded.\n         *\n         * @returns {Boolean}\n         */\n        isIFrameLoaded: function () {\n            return this.getIFrameWindow().document.readyState === 'complete';\n        },\n\n        /**\n         * Updates height of preview IFrame.\n         *\n         * @returns {Preview} Chainable.\n         */\n        updateIFrameHeight: function () {\n            var windowHeight    = window.innerHeight,\n                headerHeight    = this.$previewHeader.offsetHeight,\n                containerHeight = windowHeight - headerHeight - 5;\n\n            this.$iframeContainer.style.height = containerHeight + 'px';\n\n            return this;\n        },\n\n        /**\n         * Windows' 'resize' event handler.\n         */\n        onWindowResize: function () {\n            this.updateIFrameHeight();\n        },\n\n        /**\n         * Titles' 'click' event handler.\n         *\n         * @param {Event} e\n         */\n        onTitleClick: function (e) {\n            var $elem = $(e.currentTarget);\n\n            $elem.next('[data-role=collapsible-content]').slideToggle()\n                    .siblings('[data-role=collapsible-content]:visible').slideUp()\n                    .siblings(this.selectors.collapsibleTitle).removeClass('_active');\n\n            $elem.toggleClass('_active');\n        },\n\n        /**\n         * 'Close' button element 'click' event handler.\n         */\n        onCloseBtnClick: function (e) {\n            var $elem = $(e.currentTarget);\n\n            $elem.closest('[data-role=collapsible-content]').slideUp();\n\n            $(this.selectors.collapsibleTitle).removeClass('_active');\n        },\n\n        /**\n         * iFrame 'load' event handler.\n         */\n        onIFrameLoaded: function () {\n            this.initIFrameAjaxInterceptor();\n        }\n    });\n});\n","Magento_UrlRewrite/js/url-rewrite-validation.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/backend/form',\n    'mage/backend/validation'\n], function ($) {\n    'use strict';\n\n    return function (data, element) {\n\n        $(element).form().validation({\n            validationUrl: data.url\n        });\n    };\n});\n","Magento_CustomerSegment/js/conditions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Rule/rules',\n    'prototype'\n], function (VarienRulesForm) {\n    'use strict';\n\n    return function (config) {\n        var segmentConditionsFieldset = new VarienRulesForm(config.jsObjectName, config.childUrl);\n\n        if (config.isReadonly !== '') {\n            segmentConditionsFieldset.setReadonly(true);\n        }\n        window[config.jsObjectName] = segmentConditionsFieldset;\n    };\n});\n","Magento_Vault/js/vault.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n/* @api */\ndefine([\n    'jquery',\n    'uiComponent'\n], function ($, Class) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n            $selector: null,\n            selector: 'edit_form',\n            fieldset: '',\n            active: false,\n            imports: {\n                onActiveChange: 'active'\n            }\n        },\n\n        /**\n         * Set list of observable attributes\n         * @returns {exports.initObservable}\n         */\n        initObservable: function () {\n            var self = this,\n                paymentSelector = '[name=\"payment[method]\"][value=\"' + this.getCode() + '\"]:checked';\n\n            self.$selector = $('#' + self.selector);\n            this._super()\n                .observe(['active']);\n\n            if (self.$selector.find(paymentSelector).length !== 0) {\n                this.active(true);\n            }\n\n            $('#' + self.fieldset).find('[name=\"payment[token_switcher]\"]')\n                .on('click', this.rememberTokenSwitcher.bind(this));\n\n            // re-init payment method events\n            self.$selector.off('changePaymentMethod.' + this.getCode())\n                .on('changePaymentMethod.' + this.getCode(), this.changePaymentMethod.bind(this));\n\n            if (this.active()) {\n                this.chooseTokenSwitcher();\n            }\n\n            return this;\n        },\n\n        /**\n         * Enable/disable current payment method\n         * @param {Object} event\n         * @param {String} method\n         * @returns {exports.changePaymentMethod}\n         */\n        changePaymentMethod: function (event, method) {\n            this.active(method === this.getCode());\n\n            return this;\n        },\n\n        /**\n         * Save last chosen token switcher\n         * @param {Object} event\n         * @returns {exports.rememberTokenSwitcher}\n         */\n        rememberTokenSwitcher: function (event) {\n            $('#' + this.selector).data('lastTokenSwitcherId', event.target.id);\n\n            return this;\n        },\n\n        /**\n         * Select token switcher\n         * @returns {exports.chooseTokenSwitcher}\n         */\n        chooseTokenSwitcher: function () {\n            var lastTokenSwitcherId = $('#' + this.selector).data('lastTokenSwitcherId');\n\n            if (lastTokenSwitcherId) {\n                $('#' + lastTokenSwitcherId).trigger('click');\n            } else {\n                $('#' + this.fieldset + ' input:radio:first').trigger('click');\n            }\n\n            return this;\n        },\n\n        /**\n         * Triggered when payment changed\n         * @param {Boolean} isActive\n         */\n        onActiveChange: function (isActive) {\n            if (!isActive) {\n                this.$selector.trigger('setVaultNotActive.' + this.getCode());\n\n                return;\n            }\n            this.chooseTokenSwitcher();\n            window.order.addExcludedPaymentMethod(this.getCode());\n        },\n\n        /**\n         * Get payment method code\n         * @returns {String}\n         */\n        getCode: function () {\n            return this.code;\n        }\n    });\n});\n","Magento_CustomerBalance/js/payment.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n\ndefine([\n    'jquery',\n    'uiComponent'\n], function ($, Class) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n            $container: null\n        },\n\n        /**\n         * Initialization\n         */\n        initialize: function (config, element) {\n            this._super();\n            this.$container = $(element);\n            this.initEventHandlers();\n\n            return this;\n        },\n\n        /**\n         * Updated order totals section\n         */\n        updateTotals: function (event) {\n            var data = {};\n\n            data['payment[use_customer_balance]'] = event.currentTarget.checked ? 1 : 0;\n            window.order.loadArea(['totals', 'billing_method'], true, data);\n        },\n\n        /**\n         * Init event handlers\n         */\n        initEventHandlers: function () {\n            this.$container.on('change', this.updateTotals.bind(this));\n        }\n    });\n});\n","Magento_GiftRegistry/edit/validation-rules.js":"/**\n * GiftRegistry client side validation rules\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* eslint-disable strict, no-undef */\ndefine([\n    'jquery',\n    'mage/validation'\n], function ($) {\n\n    $.validator.addMethod('attribute-code', function (v, element) {\n        var resultFlag = true,\n            select = $($('#' + $(element).prop('id').sub('_code', '_type')));\n\n        $.each(select.find('option'), function (i, option) {\n            parts = $(option).val().split(':');\n\n            if (parts[1] !== undefined && parts[1] == v) { //eslint-disable-line eqeqeq\n                resultFlag = false;\n            }\n        });\n\n        return resultFlag;\n    }, 'Please use a different input type for this code.');\n\n    $.validator.addMethod('required-option-select-rows', function (v, elm) {\n        var optionContainerElm = $(elm).closest('fieldset');\n\n        return !!$(optionContainerElm).find('tr:not(.no-display) .select-option-code').length;\n    }, 'Please add rows to option.');\n\n});\n","Magento_CatalogPermissions/category_edit.js":"/**\n * CatalogPermissions controls for admin category editing\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global Enterprise */\n/* eslint-disable strict */\ndefine([\n  'jquery',\n  'mage/template',\n  'mage/validation',\n  'prototype'\n], function (jQuery, mageTemplate) {\n\n    if (!window.Enterprise) {\n        window.Enterprise = {};\n    }\n\n    Enterprise.CatalogPermissions = {};\n\n    Enterprise.CatalogPermissions.CategoryTab = Class.create();\n    Object.extend(Enterprise.CatalogPermissions.CategoryTab.prototype, {\n        /**\n         * @param {*} container\n         * @param {*} config\n         */\n        initialize: function (container, config) {\n            this.container = $(container);\n            this.config = config;\n            this.permissions = $H(Object.isArray(this.config.permissions) ? {} : this.config.permissions);\n            this.rowTemplate = mageTemplate(this.config.row);\n            this.addButton = this.container.down('button.add');\n            this.items = this.container.down('.items');\n            this.onAddButton = this.handleAddButton.bindAsEventListener(this);\n            this.onDeleteButton = this.handleDeleteButton.bindAsEventListener(this);\n            this.onChangeWebsiteGroup = this.handleWebsiteGroupChange.bindAsEventListener(this);\n            this.onFieldChange = this.handleUpdatePermission.bindAsEventListener(this);\n\n            if (this.addButton) {\n                this.addButton.observe('click', this.onAddButton);\n            }\n            this.index = 1;\n            jQuery.validator.addMethod(\n                'validate-duplicate-' + this.container.id,\n                function (v, elem) {\n                    return !$(elem).isDuplicate;\n                },\n                this.config['duplicate_message']\n            );\n            this.permissions.each(this.add.bind(this));\n        },\n\n        /**\n         * Add.\n         */\n        add: function () {\n            var config = {\n                    index: this.index++\n                },\n                params, i, l, isNewRow, readOnly, limitWebsiteIds, row, field, j, ln, fields, deleteButton, wsValue,\n                optionId;\n\n            config['html_id'] = this.container.id + '_row_' + config.index;\n\n            readOnly = false;\n            isNewRow = true;\n            limitWebsiteIds = null;\n\n            if (this.config['limited_website_ids']) {\n                limitWebsiteIds = this.config['limited_website_ids'];\n            }\n\n            if (this.config['single_mode']) {\n                config['website_id_disabled'] = 'disabled=\"disabled\"';\n                config['website_id'] = this.config['website_id'];\n            }\n\n            /* eslint-disable max-depth, eqeqeq, no-undef, no-cond-assign */\n            if (arguments.length) {\n                isNewRow = false;\n                Object.extend(config, arguments[0].value);\n\n                if (limitWebsiteIds) {\n                    //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    if (!this.in_array(config['website_id'], limitWebsiteIds)) {\n                        readOnly = true;\n                    }\n                    //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                }\n\n                params = Object.keys(config);\n\n                for (i = 0, l = params.length; i < l; i++) {\n                    if (params[i].match(/grant_/i)) {\n                        // Workaround for IE\n                        config[params[i] + '_' + config[params[i]]] = 'checked=\"checked\"';\n\n                        if (params[i] == 'grant_catalog_category_view' &&\n                            config[params[i]].toString() == '-2'\n                        ) {\n                            config['grant_catalog_product_price'] = -2;\n                            config['grant_catalog_product_price_disabled'] = 'disabled=\"disabled\"';\n                        }\n\n                        if (params[i] == 'grant_catalog_product_price' &&\n                            config[params[i]].toString() == '-2'\n                        ) {\n                            config['grant_checkout_items_disabled'] = 'disabled=\"disabled\"';\n                        }\n                    }\n                }\n                params.push('id');\n                config.id = config['permission_id'];\n                config['permission_id'] = arguments[0].key;\n            } else {\n                config['permission_id'] = 'new_permission' + config.index;\n                params = Object.keys(config);\n                this.permissions.set(config['permission_id'], {});\n            }\n\n            this.items.insert({\n                top: this.rowTemplate({\n                    data: config\n                })\n            });\n\n            row = $(config['html_id']);\n            row.permissionId = config['permission_id'];\n            row.controller = this;\n\n            for (i = 0, l = params.length; i < l; i++) {\n                field = row.down('.' + this.fieldClassName(params[i]));\n\n                if (field) {\n                    if (!params[i].match(/grant_/i)) {\n                        if (field.tagName.toUpperCase() != 'SELECT') {\n                            field.value = config[params[i]];\n                        } else {\n                            for (j = 0, ln = field.options.length; j < ln; j++) {\n                                if (config[params[i]] == null) {\n                                    config[params[i]] = '-1';\n                                }\n\n                                if (field.options[j].value == config[params[i]] &&\n                                   field.options[j].value.length == config[params[i]].length\n                                ) {\n                                    field.value = field.options[j].value;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (arguments.length == 0) {\n                row.select('input[value=\"0\"]').each(function (radio) {\n                    if (radio.type == 'radio') {\n                        radio.checked = true;\n                    }\n                });\n            }\n\n            fields = row.select('input', 'select', 'textarea');\n\n            for (i = 0, l = fields.length; i < l; i++) {\n                fields[i].observe('change', this.onFieldChange);\n\n                if (fields[i].type == 'radio') {\n                    fields[i].observe('click', this.onFieldChange);\n                }\n\n                if (fields[i].hasClassName('permission-duplicate')) {\n                    row.duplicateField = fields[i];\n                    row.duplicateField.isDuplicate = false;\n                    row.duplicateField.addClassName('validate-duplicate-' + this.container.id);\n                    row.duplicateField.setAttribute('name', 'validate-duplicate-' + this.container.id);\n                }\n\n                if (readOnly) {\n                    fields[i].disabled = true;\n                }\n            }\n\n            if (websiteSelect = row.down('select.website-id-value')) {\n                websiteSelect.observe('change', this.onChangeWebsiteGroup);\n\n                if ((isNewRow || !readOnly) && limitWebsiteIds) {\n                    for (optionId = 0; optionId < websiteSelect.options.length; optionId++) {\n                        wsValue = websiteSelect.options[optionId].value;\n\n                        //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                        if (wsValue != '' && !this.in_array(wsValue, limitWebsiteIds)) {\n                            websiteSelect.remove(optionId);\n                        }\n                        //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    }\n                }\n            }\n\n            if (groupSelect = row.down('select.customer-group-id-value')) {\n                groupSelect.observe('change', this.onChangeWebsiteGroup);\n            }\n\n            deleteButton = row.down('button.delete');\n\n            if (deleteButton) {\n                if (readOnly) {\n                    deleteButton.addClassName('disabled').disabled = true;\n                    row.addClassName('readonly');\n                } else {\n                    deleteButton.observe('click', this.onDeleteButton);\n                }\n            }\n\n            /* eslint-enable max-depth, eqeqeq, max-depth, eqeqeq, no-undef, no-cond-assign */\n            this.modifyParentValue(row);\n        },\n\n        /**\n         * Handle add button\n         */\n        handleAddButton: function () {\n            this.add();\n            this.checkDuplicates();\n            this.validate();\n        },\n\n        /**\n         * @param {*} evt\n         */\n        handleUpdatePermission: function (evt) {\n            var field = $(Event.element(evt)),\n                row = field.up('.permission-box'),\n                fieldName;\n\n            if (field.name && (field.type != 'radio' || field.checked)) { //eslint-disable-line eqeqeq\n                fieldName = field.name.replace(/^(.*)\\[([^\\]]*)\\]$/, '$2');\n                this.permissions.get(row.permissionId)[fieldName] = field.value;\n\n            }\n\n            setTimeout(this.disableRadio.bind(this), 1);\n\n            if (field.hasClassName('is-unique')) {\n                this.checkDuplicates();\n                this.validate();\n            }\n        },\n\n        /**\n         * disable radio.\n         */\n        disableRadio: function () {\n            var rows = this.items.select('.permission-box'),\n                i, l, row;\n\n            for (i = 0, l = rows.length; i < l; i++) {\n                row = rows[i];\n\n                if (row.hasClassName('readonly')) {\n                    continue; //jscs:ignore disallowKeywords\n                }\n\n                if (row.down('.' + this.fieldClassName('grant_catalog_category_view') + '[value=\"-2\"]').checked) {\n                    row.select('.' + this.fieldClassName('grant_catalog_product_price'))\n                        .each(function (item) {\n                            item.disabled = true;\n                        });\n                } else {\n                    row.select('.' + this.fieldClassName('grant_catalog_product_price'))\n                        .each(function (item) {\n                            item.disabled = false;\n                        });\n                }\n\n                if (row.down('.' + this.fieldClassName('grant_catalog_category_view') + '[value=\"-2\"]').checked ||\n                    row.down('.' + this.fieldClassName('grant_catalog_product_price') + '[value=\"-2\"]').checked\n                ) {\n                    row.select('.' + this.fieldClassName('grant_checkout_items'))\n                        .each(function (item) {\n                            item.disabled = true;\n                        });\n                } else {\n                    row.select('.' + this.fieldClassName('grant_checkout_items'))\n                        .each(function (item) {\n                            item.disabled = false;\n                        });\n                }\n            }\n        },\n\n        /**\n         * @param {*} row\n         * @return {Boolean}\n         */\n        isDuplicate: function (row) {\n            var needleString = this.rowUniqueKey(row),\n                rows, i, l;\n\n            if (needleString.length === 0 || row.isDeleted) {\n                return false;\n            }\n\n            rows = this.items.select('.permission-box');\n\n            for (i = 0, l = rows.length; i < l; i++) {\n                if (!rows[i].isDuplicate &&\n                    !rows[i].isDeleted &&\n                    rows[i].permissionId != row.permissionId && this.rowUniqueKey(rows[i]) == needleString //eslint-disable-line\n                ) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Check duplicates.\n         */\n        checkDuplicates: function () {\n            var rows = this.items.select('.permission-box'),\n                i, l;\n\n            for (i = 0, l = rows.length; i < l; i++) {\n                rows[i].duplicateField.isDuplicate = this.isDuplicate(rows[i]);\n            }\n        },\n\n        /**\n         * @param {*} row\n         * @return {String}\n         */\n        rowUniqueKey: function (row) {\n            var fields = row.select('select.is-unique', 'input.is-unique'),\n                key = '',\n                i, l;\n\n            for (i = 0, l = fields.length; i < l; i++) {\n                if (fields[i].value === '') {\n                    return '';\n                }\n\n                key += '_' + fields[i].value;\n\n            }\n\n            return key;\n        },\n\n        /**\n         * @param {String} fieldName\n         * @return {String}\n         */\n        fieldClassName: function (fieldName) {\n            return fieldName.replace(/_/g, '-') + '-value';\n        },\n\n        /**\n         * @param {*} evt\n         */\n        handleDeleteButton: function (evt) {\n            var button = $(Event.element(evt)),\n                row = button.up('.permission-box'),\n                elems = row.select('td select', 'td input', 'td textarea'),\n                i = 0,\n                length = elems.length;\n\n            row.isDeleted = true;\n            row.down('.' + this.fieldClassName('_deleted')).value = '1';\n\n            for (; i < length; i++) {\n                elems[i].addClassName('ignore-validate');\n            }\n\n            row.addClassName('no-display').addClassName('template');\n            this.checkDuplicates();\n            this.validate();\n        },\n\n        /**\n         * Validate.\n         */\n        validate: function () {\n            var fields, i, l;\n\n            if (arguments.length > 0) {\n                jQuery.validator.validateElement(arguments[0]);\n\n                return;\n            }\n            fields = this.container.select('input.permission-duplicate');\n\n            for (i = 0, l = fields.length; i < l; i++) {\n                jQuery.validator.validateElement(fields[i]);\n            }\n        },\n\n        /**\n         * @param {*} row\n         */\n        modifyParentValue: function (row) {\n            var websiteId, groupId, parentVals, grants, val, key, text;\n\n            /* eslint-disable no-undef, no-cond-assign */\n\n            if (websiteSelect = row.down('select.website-id-value')) {\n                websiteId = websiteSelect.value;\n            } else if (this.config['single_mode']) {\n                websiteId = this.config['website_id'];\n            }\n\n            if (!websiteId) {\n                websiteId = -1;\n            }\n\n            if (groupSelect = row.down('select.customer-group-id-value')) {\n                groupId = groupSelect.value;\n            }\n\n            if (groupId == '') { //eslint-disable-line eqeqeq\n                groupId = -1;\n            }\n            parentVals = this.config['parent_vals'][websiteId + '_' + groupId];\n\n            if (typeof parentVals == 'undefined') {\n                parentVals = {\n                    'category': 0,\n                    'product': 0,\n                    'checkout': 0\n                };\n            }\n\n            grants = {\n                'grant_catalog_category_view': 'category',\n                'grant_catalog_product_price': 'product',\n                'grant_checkout_items': 'checkout'\n            };\n\n            for (key in grants) { //eslint-disable-line guard-for-in\n                val = parentVals[grants[key]];\n\n                switch (val) {\n                    case '-1':\n                        text = this.config['use_parent_allow'];\n                        break;\n\n                    case '-2':\n                        text = this.config['use_parent_deny'];\n                        break;\n\n                    default:\n                        text = this.config['use_parent_config'];\n                        break;\n                }\n\n                row.down('span.' + key).innerHTML = text;\n            }\n\n            /* eslint-enable no-undef, no-cond-assign */\n        },\n\n        /**\n         * @param {*} e\n         */\n        handleWebsiteGroupChange: function (e) {\n            var row = $(Event.element(e)).up('.permission-box');\n\n            this.modifyParentValue(row);\n        },\n\n        /**\n         * @param {*} needle\n         * @param {Array} haystack\n         * @return {Boolean}\n         */\n        'in_array': function (needle, haystack) { //jscs:ignore\n            var key;\n\n            for (key in haystack) {\n                if (haystack[key] === needle) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    });\n});\n","Magento_CatalogPermissions/system_config.js":"/**\n * CatalogPermissions control for admin system configuration field\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global Enterprise */\n/* eslint-disable strict */\ndefine([\n    'prototype'\n], function () {\n\n    if (!window.Enterprise) {\n        window.Enterprise = {};\n    }\n\n    if (!Enterprise.CatalogPermissions) {\n        Enterprise.CatalogPermissions = {};\n    }\n\n    Enterprise.CatalogPermissions.Config = Class.create();\n\n    Object.extend(Enterprise.CatalogPermissions.Config.prototype, {\n        /**\n         * Initialize.\n         */\n        initialize: function () {\n            Event.observe(window.document, 'dom:loaded', this.handleDomLoaded.bindAsEventListener(this));\n        },\n\n        /**\n         * Handle Dom Loaded.\n         */\n        handleDomLoaded: function () {\n            $$('.magento-grant-select').each(function (element) {\n                element.observe('change', this.updateFields.bind(this));\n            }, this);\n\n            this.updateFields();\n        },\n\n        /**\n         * Update Fields.\n         */\n        updateFields: function () {\n            $$('.magento-grant-select').each(function (element) {\n                if (parseInt(element.value) !== 2) { //eslint-disable-line radix\n                    element.up('tr').next('tr').hide();\n                } else {\n                    element.up('tr').next('tr').show();\n                }\n\n                if (element.hasClassName('browsing-catagories')) {\n                    if (parseInt(element.value) === 1) { //eslint-disable-line radix\n                        element.up('tr').next('tr', 1).hide();\n                    } else {\n                        element.up('tr').next('tr', 1).show();\n                    }\n                }\n            });\n        }\n    });\n\n    new Enterprise.CatalogPermissions.Config();\n});\n","Magento_CatalogPermissions/js/bootstrap/edit.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_CatalogPermissions/system_config'\n]);\n","Magento_VisualMerchandiser/js/add_products.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*global setLocation:true*/\n/*@api*/\ndefine([\n    'jquery',\n    'Magento_Ui/js/core/app',\n    'uiRegistry',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function ($, bootstrap, registry) {\n    'use strict';\n\n    $.widget('mage.visualMerchandiserAddProducts', {\n        options: {\n            dialogUrl: null,\n            dialogButton: null\n        },\n        isGridLoaded: false,\n        registry: null,\n        positionCacheName: 'position_cache_valid',\n        selectedFromCache: 'selected_cache',\n        massAssign: 'mass_assign',\n        saveButtonName: 'add_products_save_button',\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.registry = registry;\n            this.bootstrap = bootstrap;\n\n            this.element.modal(this._getConfig());\n            this._bind();\n        },\n\n        /**\n         * @private\n         */\n        _bind: function () {\n            this._on({\n                requestUpdate: this.updateGrid,\n                requestReload: this.reloadGrid\n            });\n\n            $(document).on('click', this.options.dialogButton, $.proxy(this.openDialog, this));\n        },\n\n        /**\n         * Open the dialog\n         */\n        openDialog: function () {\n            this.element.modal('openModal');\n        },\n\n        /**\n         * Close the dialog\n         */\n        closeDialog: function () {\n            this.element.modal('closeModal');\n        },\n\n        /**\n         * Update the grid with changes\n         */\n        updateGrid: function () {\n            this.registry.get('merchandiser_product_listing.merchandiser_product_listing_data_source').reload({\n                refresh: true\n            });\n        },\n\n        /**\n         * Toggle state of submit button.\n         *\n         * @param {Boolean} disabled\n         */\n        toggleSaveButton: function (disabled) {\n            $(document).find('button[name=\"' + this.saveButtonName + '\"]')\n                .attr('disabled', disabled)\n                .text(disabled ? $.mage.__('Wait loading...') : $.mage.__('Save and Close'));\n        },\n\n        /**\n         * Grid load handler.\n         */\n        onGridLoad: function () {\n            var self = this;\n\n            this.isGridLoaded = true;\n            this.registry.get(\n                'merchandiser_product_listing.merchandiser_product_listing_data_source',\n                function (listingDataSource) {\n                    listingDataSource.on('reload', function () {\n                        self.toggleSaveButton(true);\n                    });\n                    listingDataSource.on('reloaded', function () {\n                        self.toggleSaveButton(false);\n                    });\n                }\n            );\n        },\n\n        /**\n         * Perform a full grid update, caches will be invalidated\n         * changes to grid will be lost.\n         *\n         * @param {Event} event\n         * @param {Array} action\n         */\n        reloadGrid: function (event, action) {\n            var selectedFromCache = registry.get(this.selectedFromCache),\n                indexOfCacheResult,\n                i;\n\n            if (action.action === 'remove') {\n                selectedFromCache = JSON.parse(selectedFromCache);\n\n                for (i = 0; i < action.ids.length; i++) {\n                    indexOfCacheResult = selectedFromCache.indexOf(action.ids[i]);\n                    indexOfCacheResult >= 0 && selectedFromCache.splice(indexOfCacheResult, 1);\n                }\n\n                registry.set(this.selectedFromCache, JSON.stringify(selectedFromCache));\n                registry.set(this.massAssign, true);\n                this.updateGrid();\n            } else if (action.action === 'assign') {\n                selectedFromCache = JSON.parse(selectedFromCache);\n\n                for (i = 0; i < action.ids.length; i++) {\n                    selectedFromCache.indexOf(action.ids[i]) !== -1 || selectedFromCache.push(action.ids[i]);\n                }\n\n                registry.set(this.selectedFromCache, JSON.stringify(selectedFromCache));\n                registry.set(this.massAssign, true);\n                this.updateGrid();\n            } else {\n                this._invalidateCache();\n                this.updateGrid();\n            }\n        },\n\n        /**\n         * Invalidate grid selection cache\n         * @private\n         */\n        _invalidateCache: function () {\n            this.registry.set(this.positionCacheName, false);\n            this.registry.set(this.selectedFromCache, JSON.stringify([]));\n        },\n\n        /**\n         * @returns {{type: String, title: String, opened: *, buttons: *}}\n         * @private\n         */\n        _getConfig: function () {\n            return {\n                title: $.mage.__('Add Products'),\n                opened: $.proxy(this._opened, this),\n                buttons: this._getButtonsConfig()\n            };\n        },\n\n        /**\n         * @private\n         */\n        _opened: function () {\n            if (!this.isGridLoaded) {\n                this._invalidateCache();\n                $.ajax({\n                    type: 'GET',\n                    url: this.options.dialogUrl,\n                    context: $('body'),\n                    dataType: 'json',\n                    success: $.proxy(this._ajaxSuccess, this)\n                });\n            } else {\n                this._invalidateCache();\n                this.updateGrid();\n            }\n        },\n\n        /**\n         * @param {String} data\n         * @private\n         */\n        _ajaxSuccess: function (data) {\n            this._validateAjax(data);\n            this.bootstrap(data);\n            this.onGridLoad();\n        },\n\n        /**\n         * @param {Object} response\n         * @private\n         */\n        _validateAjax: function (response) {\n            if (response.ajaxExpired && response.ajaxRedirect) {\n                setLocation(response.ajaxRedirect);\n            } else if (response.url) {\n                setLocation(response.url);\n            }\n        },\n\n        /**\n         * @returns {*[]}\n         * @private\n         */\n        _getButtonsConfig: function () {\n            return [{\n                text: $.mage.__('Wait loading...'),\n                class: '',\n                click: $.proxy(this._save, this),\n                attr: {\n                    name: this.saveButtonName,\n                    disabled: 'disabled'\n                }\n            }];\n        },\n\n        /**\n         * @private\n         */\n        _save: function () {\n            var idColumn = this\n                .registry\n                .get('merchandiser_product_listing.merchandiser_product_listing.merchandiser_product_columns.ids');\n\n            this._invalidateCache();\n\n            this._trigger('dialogSave', null, [\n                idColumn.selected(),\n                this\n            ]);\n        }\n    });\n\n    return $.mage.visualMerchandiserAddProducts;\n});\n","Magento_VisualMerchandiser/js/mass_sku.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*global setLocation:true*/\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.visualMerchandiserMassSku', {\n        options: {\n            massAssignButton: null,\n            massAssignUrl: null,\n            messagesContainer: '[data-role=messages]'\n        },\n        form: null,\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.form = this.element.find('form');\n            this._bind();\n        },\n\n        /**\n         * @private\n         */\n        _bind: function () {\n            $(this.options.massAssignButton).on('click', $.proxy(this._massAssignAction, this));\n        },\n\n        /**\n         * @param {Event} event\n         * @private\n         */\n        _massAssignAction: function (event) {\n            var button = $(Event.element(event)),\n                action = {\n                    action: button.attr('role')\n                };\n\n            $.ajax({\n                type: 'POST',\n                data: this.form.serialize() + '&' + $.param(action),\n                url: this.options.massAssignUrl,\n                context: $('body'),\n                showLoader: true,\n                success: $.proxy(this._massActionSuccess, this)\n            });\n        },\n\n        /**\n         * @param {Object} response\n         * @private\n         */\n        _massActionSuccess: function (response) {\n            this._validateAjax(response);\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            this.element.find(this.options.messagesContainer).html(response.html_message);\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n            this.element.trigger('requestReload', {\n                'action': response.action, 'ids': response.ids\n            });\n        },\n\n        /**\n         * @param {Object} response\n         * @private\n         */\n        _validateAjax: function (response) {\n            if (response.ajaxExpired && response.ajaxRedirect) {\n                setLocation(response.ajaxRedirect);\n            } else if (response.url) {\n                setLocation(response.url);\n            }\n        }\n    });\n\n    return $.mage.visualMerchandiserMassSku;\n});\n","Magento_VisualMerchandiser/js/merchandiser.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*@api*/\ndefine([\n    'jquery',\n    'mage/template',\n    'jquery/ui',\n    'prototype',\n    'Magento_VisualMerchandiser/js/tabs',\n    'Magento_VisualMerchandiser/js/add_products'\n], function ($, mageTemplate) {\n    'use strict';\n\n    $.widget('mage.visualMerchandiser', {\n        options: {\n            'gridSelector': '[data-grid-id=catalog_category_products]',\n            'tileSelector': '[data-role=catalog_category_merchandiser]',\n            'tabsSelector': '[data-role=merchandiser-tabs]',\n            'addProductsContainer': '[data-role=catalog_category_add_product_content]',\n            'addProductsUrl': null,\n            'savePositionsUrl': null,\n            'getPositionsUrl': null,\n            'currentCategoryId': null,\n            'positionCacheKeyName': null,\n            'positionCacheKey': null\n        },\n        sourcePosition: null,\n        sourceIndex: null,\n        currentView: null,\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.gridView = $(this.options.gridSelector);\n            this.tileView = $(this.options.tileSelector);\n\n            this.element.prepend(\n                $('<input type=\"hidden\" />')\n                    .attr('id', this.options.positionCacheKeyName)\n                    .attr('name', this.options.positionCacheKeyName)\n                    .attr('data-form-part', this.options.formName)\n                    .val(this.options.positionCacheKey)\n            );\n\n            this.setupGridView();\n            this.initGridEventHandlers();\n\n            this.setupTileView();\n            this.initTileEventHandlers();\n\n            $(this.options.addProductsContainer).visualMerchandiserAddProducts({\n                dialogUrl: this.options.addProductsUrl,\n                dialogButton: '[data-ui-id=category-merchandiser-add-product-button]',\n                dialogSave: $.proxy(this._dialogSave, this)\n            });\n\n            this.setupSmartCategory();\n\n            // Only updates when Ajax loads another page\n            this.gridView.on(\n                'contentUpdated', function () {\n                    this.setupGridView();\n                }.bind(this)\n            );\n            this.tileView.on(\n                'contentUpdated', function () {\n                    this.setupTileView();\n                }.bind(this)\n            );\n\n            // Tabs setup\n            $(this.options.tabsSelector).visualMerchandiserTabs({\n                viewDidChange: $.proxy(this._setView, this)\n            });\n        },\n\n        /**\n         * @returns void\n         */\n        initGridEventHandlers: function () {\n            this.gridView.on(\n                'focus',\n                'input[name=position]',\n                this.positionFieldFocused.bindAsEventListener(this)\n            ).on(\n                'change',\n                'input[name=position]',\n                this.positionFieldChanged.bindAsEventListener(this)\n            ).keypress(function (event) {\n                if (event.which === Event.KEY_RETURN) {\n                    $(event.target).trigger('blur');\n                }\n            });\n\n            this.gridView.on('click', 'a[name=unassign]', function (e) {\n                this.removeProduct(e);\n            }.bind(this));\n            this.gridView.on('click', '.move-top', this.moveToTop.bindAsEventListener(this));\n            this.gridView.on('click', '.move-bottom', this.moveToBottom.bindAsEventListener(this));\n\n            // Talks to paging/ajax component directly, converts events into calls\n            this.gridView.on('click', '.action-next:not(.disabled)', function (e) {\n                $(e.target).attr('data-value', this.getPage(this.gridView) + 1);\n                $(this.options.tileSelector).visualMerchandiserTilePager('setPage', e);\n            }.bind(this));\n            this.gridView.on('click', '.action-previous:not(.disabled)', function (e) {\n                $(e.target).attr('data-value', this.getPage(this.gridView) - 1);\n                $(this.options.tileSelector).visualMerchandiserTilePager('setPage', e);\n            }.bind(this));\n            this.gridView.on('keypress', 'input[name=page]:not(.disabled)', function (e) {\n                $(this.options.tileSelector).visualMerchandiserTilePager('inputPage', e);\n            }.bind(this));\n            this.gridView.on('change', 'select[name=limit]:not(.disabled)', function (e) {\n                $(this.options.tileSelector).visualMerchandiserTilePager('loadByElement', e);\n            }.bind(this));\n\n            this.gridView.on('gridajaxsettings', function (event, settings) {\n                settings.data[this.options.positionCacheKeyName] = this.getCacheKey();\n            }.bind(this));\n        },\n\n        /**\n         * @returns void\n         */\n        initTileEventHandlers: function () {\n            this.tileView.on(\n                'focus',\n                'input[name=position]',\n                this.positionFieldFocused.bindAsEventListener(this)\n            ).on(\n                'change',\n                'input[name=position]',\n                this.positionFieldChanged.bindAsEventListener(this)\n            ).keypress(function (event) {\n                if (event.which === Event.KEY_RETURN) {\n                    $(event.target).trigger('blur');\n                }\n            });\n\n            this.tileView.on('click', '.remove-product', this.removeProduct.bindAsEventListener(this));\n            this.tileView.on('click', '.icon-gripper', function () {\n                return false;\n            });\n            this.tileView.on('click', '.move-top', this.moveToTop.bindAsEventListener(this));\n            this.tileView.on('click', '.move-bottom', this.moveToBottom.bindAsEventListener(this));\n\n            // Talks to paging/ajax component directly, converts events into calls\n            this.tileView.on('click', '.action-next:not(.disabled)', function () {\n                this._getGridViewComponent().setPage(this.getPage(this.tileView) + 1);\n            }.bind(this));\n            this.tileView.on('click', '.action-previous:not(.disabled)', function () {\n                this._getGridViewComponent().setPage(this.getPage(this.tileView) - 1);\n            }.bind(this));\n            this.tileView.on('keypress', 'input[name=page]:not(.disabled)', function (e) {\n                this._getGridViewComponent().inputPage(e);\n            }.bind(this));\n            this.tileView.on('change', 'select[name=limit]:not(.disabled)', function (e) {\n                this._getGridViewComponent().loadByElement(e.target);\n            }.bind(this));\n\n            this.tileView.on('gridajaxsettings', function (event, settings) {\n                settings.data[this.options.positionCacheKeyName] = this.getCacheKey();\n            }.bind(this));\n        },\n\n        /**\n         * @param {Event} event\n         * @param {Array} selected\n         * @param {mage.visualMerchandiserAddProducts} modal\n         * @private\n         */\n        _dialogSave: function (event, selected, modal) {\n            var selectedSortData,\n                sorted,\n                finalData;\n\n            selectedSortData = this.sortSelectedProducts(selected);\n            sorted = this.getSortedPositionsFromData(selectedSortData);\n\n            finalData = $H();\n            sorted.each(function (item, idx) {\n                finalData.set(item.key, String(idx));\n            });\n\n            $('#vm_category_products').val(Object.toJSON(finalData));\n\n            this.savePositionCache($.proxy(this._modalDidSave, this, modal));\n        },\n\n        /**\n         * @param {mage.visualMerchandiserAddProducts} modal\n         * @private\n         */\n        _modalDidSave: function (modal) {\n            this.reloadViews();\n            modal.closeDialog();\n        },\n\n        /**\n         * @returns void\n         */\n        reloadViews: function () {\n            $.when(this._getGridViewComponent().reload()).then(function () {\n                this.getNewPositions();\n            }.bind(this));\n            $(this.options.tileSelector).visualMerchandiserTilePager('reload');\n        },\n\n        /**\n         * @returns {*}\n         * @private\n         */\n        _getGridViewComponent: function () {\n            // XXX: refactor\n            var k = $(this.options.gridSelector).attr('id') + 'JsObject';\n\n            return window[k];\n        },\n\n        /**\n         * @param {Event} event\n         * @param {View} view\n         * @private\n         */\n        _setView: function (event, view) {\n            this.currentView = view;\n        },\n\n        /**\n         * @returns void\n         */\n        setupSmartCategory: function () {\n            var attributeRules,\n                switchSmartCategory,\n                divSmartCategory,\n                rulesSmartCategory,\n                divRegularCategory;\n\n            $('#catalog_category_sort_products_tabs').on('click', function () {\n                this.savePositionCache(function () {\n                    this.reloadViews();\n                }.bind(this));\n            }.bind(this));\n\n            attributeRules = {\n                table: $('#attribute-rules-table'),\n                itemCount: 0,\n\n                /**\n                 * @param {Object} data\n                 */\n                add: function (data) {\n                    this.template = mageTemplate('#row-template');\n\n                    if (typeof data.id == 'undefined') {\n                        data = {\n                            'id': 'rule_' + this.itemCount\n                        };\n                    }\n\n                    Element.insert($$('[data-role=rules-container]')[0], this.template({\n                        data: data\n                    }));\n                    this.disableLastLogicSelect();\n                    this.showHideRulesTable();\n                    $('#smart_category_table tbody tr:last').find('.smart_category_rule').each(function () {\n                        $(this).on('change', function () {\n                            window.attributeRules.getRules();\n                        });\n                    });\n\n                    this.itemCount++;\n                },\n\n                /**\n                 * @param {Event} event\n                 */\n                remove: function (event) {\n                    var element = $(Event.findElement(event, 'tr'));\n\n                    element.remove();\n                    this.disableLastLogicSelect();\n                    this.getRules();\n                    this.showHideRulesTable();\n                },\n\n                /**\n                 * Hide irrelevant operators for selected attribute\n                 *\n                 * @param {Event} event\n                 * @param {Object} data\n                 */\n                hideIrrelevantOperators: function (event, data) {\n                    var element;\n\n                    if (event === null && data === null) {\n                        return;\n                    }\n\n                    if (event !== null) {\n                        element = $(Event.findElement(event, 'tr'));\n                    }\n\n                    if (data !== null) {\n                        element = data;\n                    }\n\n                    element.find('select[name=operator_select] option').show();\n\n                    if (element.find('select[name=attribute_select] option:selected').val() === 'category_id') {\n                        element.find('select[name=operator_select] option').hide();\n                        element.find('select[name=operator_select] option[value=eq]').show();\n                    }\n\n                    if (\n                        element.find('select[name=attribute_select] option:selected').val() === 'created_at' ||\n                        element.find('select[name=attribute_select] option:selected').val() === 'updated_at'\n                    ) {\n                        element.find('select[name=operator_select] option[value=neq]').hide();\n                        element.find('select[name=operator_select] option[value=like]').hide();\n                    }\n                },\n\n                disableLastLogicSelect: function () {\n                    if (this.element.find('#smart_category_table > tbody > tr').length === 1) {\n                        this.element\n                            .find('#smart_category_table tbody tr:first')\n                            .find('.smart_category_logic_select')\n                            .hide();\n                    } else {\n                        this.element\n                            .find('#smart_category_table tbody tr:first')\n                            .find('.smart_category_logic_select')\n                            .show();\n                    }\n                    this.element.find('#smart_category_table tbody > tr').each(function (index, element) {\n                        $(element).find('[name=\\'logic_select\\']').show();\n                    });\n                    this.element.find('#smart_category_table tbody tr:last').find('[name=\\'logic_select\\']').hide();\n\n                    if (this.element.find('#smart_category_table > tbody > tr').length === 1) {\n                        this.element.find('.logic_header').addClass('hidden');\n                    } else {\n                        this.element.find('.logic_header').removeClass('hidden');\n                    }\n\n                }.bind(this),\n\n                showHideRulesTable: function () {\n                    if (this.element.find('#smart_category_table > tbody > tr').length === 0) {\n                        this.element.find('#smart_category_table_wrapper').addClass('hidden');\n                        this.element.find('#mode_select').addClass('hidden');\n                    } else {\n                        this.element.find('#smart_category_table_wrapper').removeClass('hidden');\n                        this.element.find('#mode_select').removeClass('hidden');\n                    }\n                }.bind(this),\n\n                /**\n                 * @returns void\n                 */\n                getRules: function () {\n                    var rows = [],\n                        row;\n\n                    $('#smart_category_table tbody > tr').each(function (index, element) {\n                        if ($(element).find('[name=\\'attribute_select\\']').val() !== '') {\n                            row = {\n                                'attribute': $(element).find('[name=\\'attribute_select\\']').val(),\n                                'operator': $(element).find('[name=\\'operator_select\\']').val(),\n                                'value': $(element).find('[name=\\'rule_value\\']').val(),\n                                'logic': $(element).find('[name=\\'logic_select\\']').val()\n                            };\n                            rows.push(row);\n                        }\n                    });\n                    $('#smart_category_rules').val(Object.toJSON(rows));\n                },\n\n                /**\n                 * @returns void\n                 */\n                setRules: function () {\n                    var rulesArray,\n                        i;\n\n                    if ($('#smart_category_rules').val() !== '') {\n                        rulesArray = JSON.parse($('#smart_category_rules').val());\n\n                        for (i = 0; i < rulesArray.length; i++) {\n                            this.add(rulesArray[i]);\n                            $('#smart_category_table tbody tr:last')\n                                .find('[name=\\'attribute_select\\']')\n                                .val(rulesArray[i].attribute);\n                            $('#smart_category_table tbody tr:last')\n                                .find('[name=\\'operator_select\\']')\n                                .val(rulesArray[i].operator);\n                            $('#smart_category_table tbody tr:last')\n                                .find('[name=\\'rule_value\\']')\n                                .val(rulesArray[i].value);\n                            $('#smart_category_table tbody tr:last')\n                                .find('[name=\\'logic_select\\']')\n                                .val(rulesArray[i].logic);\n                            attributeRules.hideIrrelevantOperators(null, $('#smart_category_table tbody tr:last'));\n                        }\n                    }\n                }\n            };\n\n            attributeRules.setRules();\n\n            switchSmartCategory = this.element.find('#catalog_category_smart_category_onoff');\n            divSmartCategory = this.element.find('#manage-rules-panel');\n            rulesSmartCategory = this.element.find('#smart_category_rules');\n            divRegularCategory = this.element.find('#regular-category-settings');\n\n            if (switchSmartCategory.is(':checked')) {\n                divSmartCategory.removeClass('hidden');\n                divRegularCategory.addClass('hidden');\n                attributeRules.showHideRulesTable();\n            }\n            switchSmartCategory.change(function () {\n                if (switchSmartCategory.is(':checked')) {\n                    rulesSmartCategory.prop('disabled', false);\n                    divSmartCategory.removeClass('hidden');\n                    divRegularCategory.addClass('hidden');\n                } else {\n                    divSmartCategory.addClass('hidden');\n                    divRegularCategory.removeClass('hidden');\n                }\n                attributeRules.showHideRulesTable();\n            });\n\n            $('#smart_category_table tbody').find('.smart_category_rule').each(function () {\n                jQuery(this).on('change', function () {\n                    window.attributeRules.getRules();\n                });\n            });\n\n            if ($('#add_new_rule_button')) {\n                Event.observe('add_new_rule_button', 'click', attributeRules.add.bind(attributeRules));\n            }\n\n            $('#manage-rules-panel').on('click', '.delete-rule', function (event) {\n                attributeRules.remove(event);\n            });\n\n            $('#manage-rules-panel').on('change', 'select[name=attribute_select]', function (event) {\n                attributeRules.hideIrrelevantOperators(event, null);\n            });\n\n            window.attributeRules = attributeRules;\n        },\n\n        /**\n         * @returns void\n         */\n        setupTileView: function () {\n            var sortableParent = this.tileView.find('#catalog_category_merchandiser_list'),\n                data;\n\n            sortableParent.sortable({\n                distance: 8,\n                tolerance: 'pointer',\n                cancel: 'input, button',\n                forcePlaceholderSize: true,\n                update: this.sortableDidUpdate.bind(this),\n                start: this.sortableStartUpdate.bind(this),\n                stop: $.proxy(function () {\n                    if (this.isAutosortEnabled()) {\n                        sortableParent.sortable('cancel');\n                    }\n                }, this)\n            });\n            data = {};\n            sortableParent.data('ui-sortable').items.each(function (instance) {\n                var key = $(instance.item).find('input[name=entity_id]').val();\n\n                data[key] = $(instance.item);\n            });\n\n            sortableParent.data('item_id_mapper', data);\n        },\n\n        /**\n         * @returns void\n         */\n        setupGridView: function () {\n            var sortableParent = this.gridView.find('table > tbody'),\n                data;\n\n            sortableParent.sortable({\n                distance: 8,\n                tolerance: 'pointer',\n                cancel: 'input, button',\n                forcePlaceholderSize: true,\n                axis: 'y',\n                update: this.sortableDidUpdate.bind(this),\n                start: this.sortableStartUpdate.bind(this),\n                stop: $.proxy(function () {\n                    if (this.isAutosortEnabled()) {\n                        sortableParent.sortable('cancel');\n                    }\n                }, this)\n            });\n\n            data = {};\n            sortableParent.data('ui-sortable').items.each(function (instance) {\n                var key = $(instance.item).find('input[name=entity_id]').val();\n\n                data[key] = $(instance.item);\n\n                if ($(instance.item).attr('title') === '#') {\n                    $(instance.item).removeAttr('title');\n                }\n            });\n            sortableParent.data('item_id_mapper', data);\n        },\n\n        /**\n         * @param {Array} selectedIds\n         * @returns {Array}\n         */\n        sortSelectedProducts: function (selectedIds) {\n            var sortData = this.getSortData(),\n                selectedSortData = $H(),\n                newSelectedIds,\n                offset;\n\n            newSelectedIds = selectedIds.filter(function (entityId) {\n                return sortData.get(entityId) === undefined;\n            });\n\n            offset = newSelectedIds.length;\n\n            newSelectedIds.each(function (item, idx) {\n                selectedSortData.set(item, idx);\n            });\n\n            selectedIds.each(function (item) {\n                var idx = sortData.get(item);\n\n                if (idx !== undefined) {\n                    selectedSortData.set(item, idx + offset);\n                }\n            });\n\n            return selectedSortData;\n        },\n\n        /**\n         * @param {Array} sortData\n         * @returns {Array}\n         */\n        getSortedPositionsFromData: function (sortData) {\n            // entity_id => pos\n            var sortedArr = [];\n\n            sortData.each(Array.prototype.push.bindAsEventListener(sortedArr));\n            sortedArr.sort(this.sortArrayAsc.bind(this, sortData));\n\n            return sortedArr;\n        },\n\n        /**\n         * @param {String} view\n         * @returns {Number}\n         */\n        getPage: function (view) {\n            var parentView = $(view).parents('.merchandiser-tab');\n\n            return parseInt(parentView.find('input[name=page]').val(), 10);\n        },\n\n        /**\n         * @param {String} view\n         * @returns {Number}\n         */\n        getPageSize: function (view) {\n            var parentView = $(view).parents('.merchandiser-tab');\n\n            return parseInt(parentView.find('select[name=limit]').val(), 10);\n        },\n\n        /**\n         * @param {String} view\n         * @returns {Number}\n         */\n        getStartIdx: function (view) {\n            var perPage = this.getPageSize(view);\n\n            return this.getPage(view) * perPage - perPage;\n        },\n\n        /**\n         * @param {String} view\n         * @returns {Number}\n         */\n        getFinalIndex: function (view) {\n            return this.getPage(view) * this.getPageSize(view);\n        },\n\n        /**\n         * @returns {Number}\n         */\n        getTotalIndex: function () {\n            return parseInt($('#catalog_category_products-total-count').text(), 10) - 1;\n        },\n\n        /**\n         * @returns {Boolean}\n         */\n        isAutosortEnabled: function () {\n            return $('#catalog_category_smart_category_onoff').prop('checked');\n        },\n\n        /**\n         * Used to re-populate text inputs and move items in non-active view\n         * triggered by {sortable}\n         *\n         * @param {Event} event\n         * @param {Object} ui\n         */\n        sortableDidUpdate: function (event, ui) {\n            var to,\n                from,\n                otherViews;\n\n            if (this.isAutosortEnabled()) {\n                return;\n            }\n\n            to = ui.item.index();\n            from = ui.item.data('originIndex');\n\n            this.populateFromIdx(ui.item.parents('.ui-sortable').find('> *'));\n\n            otherViews = this.element.find('.ui-sortable').not(ui.item.parent());\n            otherViews.each(function (idx, view) {\n                this.moveItemInView($(view), from, to);\n            }.bind(this));\n\n            this.sortDataObject({\n                target: ui.item.parents('.ui-sortable')\n            });\n        },\n\n        /**\n         * Generic helper to move items in DOM and repopulate position indexes\n         *\n         * @param {Object} view\n         * @param {Integer} from\n         * @param {Integer} to\n         */\n        moveItemInView: function (view, from, to) {\n            var items = view.find('>*');\n\n            if (to > from) {\n                $(items.get(from)).insertAfter($(items.get(to)));\n            } else {\n                $(items.get(from)).insertBefore($(items.get(to)));\n            }\n            items.removeClass('selected');\n            this.populateFromIdx(items);\n        },\n\n        /**\n         * Store the original index\n         *\n         * @param {Event} event\n         * @param {Object} ui\n         */\n        sortableStartUpdate: function (event, ui) {\n            ui.item.data('originIndex', ui.item.index());\n        },\n\n        /**\n         * UI trigger for product remove\n         *\n         * @param {Event} event\n         */\n        removeProduct: function (event) {\n            var row;\n\n            event.preventDefault();\n            row = $(event.currentTarget).parents('li,tr');\n\n            this.removeRow(row);\n        },\n\n        /**\n         * Remove product by refresing the grids\n         *\n         * @param {Object} row\n         */\n        removeRow: function (row) {\n            var data = this.getSortData();\n\n            data.unset(row.find('[name=entity_id]').val());\n            $('#vm_category_products').val(Object.toJSON(data));\n            this.savePositionCache(function () {\n                this.reloadViews();\n            }.bind(this));\n        },\n\n        /**\n         * Triggered by clicking on move to top button\n         *\n         * @param {Event} event\n         */\n        moveToTop: function (event) {\n            var input;\n\n            event.preventDefault();\n\n            if (this.isAutosortEnabled()) {\n                return;\n            }\n\n            input = $(event.currentTarget).next('input[name=position]');\n            this.moveToPosition(input, 0);\n        },\n\n        /**\n         * Triggered by clicking on move to bottom button\n         *\n         * @param {Event} event\n         */\n        moveToBottom: function (event) {\n            var input;\n\n            event.preventDefault();\n\n            if (this.isAutosortEnabled()) {\n                return;\n            }\n\n            input = $(event.currentTarget).prev('input[name=position]');\n            this.moveToPosition(input, this.getTotalIndex());\n        },\n\n        /**\n         * @param {Object} input\n         * @param {Integer} targetPosition\n         */\n        moveToPosition: function (input, targetPosition) {\n            this.positionFieldFocused({\n                'currentTarget': input\n            });\n\n            input.val(targetPosition);\n            this.changePosition(input);\n        },\n\n        /**\n         * Triggered by 'onchange' and keypress\n         *\n         * @param {Event} event\n         */\n        positionFieldChanged: function (event) {\n            var input = $(event.currentTarget);\n\n            if (input.val() !== parseInt(input.val(), 10).toString()) {\n                input.val(this.sourcePosition);\n\n                return;\n            }\n            this.changePosition(input);\n        },\n\n        /**\n         * Do all the necessary calls to re-position an element\n         *\n         * @param {Object} input\n         */\n        changePosition: function (input) {\n            var destinationPosition = parseInt(input.val(), 10),\n                destinationIndex = destinationPosition - this.getStartIdx(input),\n                data,\n                sorted,\n                result,\n                movedItem;\n\n            if (destinationPosition > this.getTotalIndex()) {\n                input.val(this.getTotalIndex());\n                this.changePosition(input);\n\n                return;\n            }\n\n            // Moving within current page\n            if (this.isValidMove(this.sourcePosition, destinationPosition)) {\n                // Move on all views\n                this.element.find('.ui-sortable').each(function (idx, item) {\n                    this.moveItemInView($(item), this.sourceIndex, destinationIndex);\n                }.bind(this));\n\n                this.sortDataObject({\n                    target: input.parents('.ui-sortable')\n                });\n\n                return;\n            }\n\n            // Moving off the current page\n            if (\n                this.isValidPosition(this.sourcePosition) &&\n                destinationPosition >= 0 &&\n                this.sourcePosition !== destinationPosition\n            ) {\n                data = this.getSortData();\n                sorted = this.getSortedPositionsFromData(data);\n                result = [];\n\n                movedItem = sorted[this.sourcePosition];\n                movedItem.value = String(destinationPosition);\n\n                sorted.each(function (item, idx) {\n                    if (idx !== this.sourcePosition && idx !== destinationPosition) {\n                        result.push(item);\n                    }\n\n                    if (idx === destinationPosition) {\n                        if (destinationPosition > this.sourcePosition) {\n                            result.push(item);\n                            result.push(movedItem);\n                        } else {\n                            result.push(movedItem);\n                            result.push(item);\n                        }\n                    }\n                }.bind(this));\n\n                result.each(function (item, idx) {\n                    data.set(item.key, String(idx));\n                });\n\n                $('#vm_category_products').val(Object.toJSON(data));\n\n                this.savePositionCache(function () {\n                    this.reloadViews();\n                }.bind(this));\n\n                return;\n            }\n\n        },\n\n        /**\n         * @param {Array} items\n         */\n        populateFromIdx: function (items) {\n            var startIdx = this.getStartIdx(items);\n\n            items.find('input[name=position][type=text]').each(function (idx, item) {\n                $(item).val(startIdx + idx);\n            });\n        },\n\n        /**\n         * @param {Integer} src\n         * @param {Integer} dst\n         * @returns {Boolean}\n         */\n        isValidMove: function (src, dst) {\n            return this.isValidPosition(src) && this.isValidPosition(dst) && src !== dst;\n        },\n\n        /**\n         * @param {Integer} pos\n         * @returns {Boolean}\n         */\n        isValidPosition: function (pos) {\n            var view = this.currentView.find('>*:eq(0)'),\n                maxPos = this.getFinalIndex(view),\n                minPos = this.getStartIdx(view);\n\n            return pos !== null && pos >= minPos && pos < maxPos;\n        },\n\n        /**\n         * Stores position for later use by this.positionFieldChanged\n         *\n         * @param {Event} event\n         */\n        positionFieldFocused: function (event) {\n            var idx = parseInt($(event.currentTarget).parents('tr,li').index(), 10),\n                pos = idx + this.getStartIdx($(event.currentTarget));\n\n            if (!this.isValidPosition(pos)) {\n                this.sourcePosition = null;\n                this.sourceIndex = null;\n            } else {\n                this.sourcePosition = pos;\n                this.sourceIndex = idx;\n            }\n        },\n\n        /**\n         * @param {Object} sortData\n         * @param {Object} a\n         * @param {Object} b\n         * @returns {Number}\n         */\n        sortArrayAsc: function (sortData, a, b) {\n            var keyA = sortData.get(a.key),\n                keyB = sortData.get(b.key),\n                diff = parseFloat(a.value) - parseFloat(b.value);\n\n            if (diff !== 0) {\n                return diff;\n            }\n\n            if (keyA === undefined && keyB !== undefined) {\n                return -1;\n            }\n\n            if (keyA !== undefined && keyB === undefined) {\n                return 1;\n            }\n\n            return 0;\n        },\n\n        /**\n         * @returns {Hash}\n         */\n        getSortData: function () {\n            return $H(JSON.parse($('#vm_category_products').val()));\n        },\n\n        /**\n         * Re-sort the actual positions array which will be sent to the server\n         *\n         * @param {Event} event\n         */\n        sortDataObject: function (event) {\n            // Data format: {entity_id => sort index, ... }\n            var data = this.getSortData(),\n                startIdx = this.getStartIdx($(event.target));\n\n            // Overwrite positions with items from UI\n            $(event.target).find('> *').find('[name=entity_id]').each(function (idx, item) {\n                data.set($(item).val(), startIdx);\n                startIdx++;\n            });\n\n            $('#vm_category_products').val(Object.toJSON(data));\n\n            this.savePositionCache();\n        },\n\n        /**\n         * @returns {jQuery}\n         */\n        getCacheKey: function () {\n            return $('#' + this.options.positionCacheKeyName).val();\n        },\n\n        /**\n         * @param {Function} callback\n         */\n        savePositionCache: function (callback) {\n            var data = {\n                    'category_id': this.options.currentCategoryId,\n                    'positions': $('#vm_category_products').val(),\n                    'sort_order': $('select.sort_order').val()\n                },\n                loader = typeof callback !== 'undefined';\n\n            data[this.options.positionCacheKeyName] = this.getCacheKey();\n\n            $.ajax({\n                type: 'POST',\n                url: this.options.savePositionsUrl,\n                data: data,\n                context: $('body'),\n                showLoader: loader\n            }).done(function () {\n                if (callback) {\n                    callback();\n                }\n            });\n        },\n\n        /**\n         * @param {Function} callback\n         */\n        getNewPositions: function (callback) {\n            var data = {\n                    'category_id': this.options.currentCategoryId\n                },\n                loader = typeof callback !== 'undefined';\n\n            data[this.options.positionCacheKeyName] = this.getCacheKey();\n\n            $.ajax({\n                type: 'POST',\n                url: this.options.getPositionsUrl,\n                data: data,\n                context: $('body'),\n                showLoader: loader\n            }).done(function (result) {\n                $('#vm_category_products').val(result);\n            });\n        }\n    });\n\n    return $.mage.visualMerchandiser;\n});\n","Magento_VisualMerchandiser/js/pager.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*global FORM_KEY:true*/\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.visualMerchandiserTilePager', {\n        options: {\n            'gridUrl': null,\n            'varNamePage': null,\n            'limitControl': '[data-role=page_limiter]',\n            'prevControl': '[data-role=button_previous]',\n            'nextControl': '[data-role=button_next]',\n            'inputControl': '[data-role=input_page]'\n        },\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.reloadParams = false;\n            this.url = this.options.gridUrl;\n            this._bind();\n        },\n\n        /**\n         * Bind all events\n         * @private\n         */\n        _bind: function () {\n            this._bindElement($(this.options.limitControl), this.loadByElement);\n            this._bindElement($(this.options.prevControl), this.setPage);\n            this._bindElement($(this.options.nextControl), this.setPage);\n            this._bindElement($(this.options.inputControl), this.inputPage);\n        },\n\n        /**\n         * Bind per element\n         * @private\n         */\n        _bindElement: function (element, callback) {\n            if (element.is('select')) {\n                element.on('change', $.proxy(callback, this));\n            } else if (element.is('button')) {\n                element.on('click', $.proxy(callback, this));\n            } else if (element.is('input')) {\n                element.on('keypress', $.proxy(callback, this));\n            }\n        },\n\n        /**\n         * Reload the grid view\n         * @param {String} url\n         */\n        reload: function (url) {\n            var ajaxRequest,\n                ajaxSettings;\n\n            this.reloadParams = this.reloadParams || {};\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            this.reloadParams.form_key = FORM_KEY;\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n            url = url || this.url;\n\n            ajaxSettings = {\n                url: url + (url.match(new RegExp('\\\\?')) ? '&ajax=true' : '?ajax=true'),\n                showLoader: true,\n                method: 'post',\n                context: this.element,\n                data: this.reloadParams,\n                dataType: 'html',\n                success: $.proxy(this._onAjaxSuccess, this)\n            };\n\n            this.element.trigger('gridajaxsettings', ajaxSettings);\n            ajaxRequest = $.ajax(ajaxSettings);\n            this.element.trigger('gridajax', ajaxRequest);\n        },\n\n        /**\n         * Set new page and reload\n         * @param {Event} event\n         */\n        setPage: function (event) {\n            var pageNumber = $(event.target).attr('data-value');\n\n            this.reload(this.addVarToUrl(this.options.varNamePage, pageNumber));\n        },\n\n        /**\n         * Set new page via page number and reload\n         * @param {Event} event\n         */\n        inputPage: function (event) {\n            var keyCode = event.keyCode || event.which,\n                element = $(Event.element(event));\n\n            if (keyCode === Event.KEY_RETURN) {\n                this.reload(this.addVarToUrl(this.options.varNamePage, element.val()));\n            }\n        },\n\n        /**\n         * Use element properties to reload\n         * @param {Event} event\n         */\n        loadByElement: function (event) {\n            var element = event.target;\n\n            if (element && element.name) {\n                this.reload(this.addVarToUrl(element.name, element.value));\n            }\n        },\n\n        /**\n         * Success callback\n         * @param {Object} data\n         * @param {String} textStatus\n         * @param {Object} transport\n         * @private\n         */\n        _onAjaxSuccess: function (data, textStatus, transport) {\n            var html = $('<div />').append(transport.responseText).find('>div').html();\n\n            this.element.html(html);\n            this.element.trigger('contentUpdated');\n            this._bind();\n        },\n\n        /**\n         * Writes an URL\n         * @param {String} url\n         * @param {String} varName\n         * @param {String} varValue\n         * @returns {String|*}\n         * @private\n         */\n        _addVarToUrl: function (url, varName, varValue) {\n            var re = new RegExp('\\/(' + varName + '\\/.*?\\/)'),\n                parts = url.split(new RegExp('\\\\?'));\n\n            url = parts[0].replace(re, '/');\n            url += varName + '/' + varValue + '/';\n\n            if (parts.size() > 1) {\n                url += '?' + parts[1];\n            }\n\n            return url;\n        },\n\n        /**\n         * Wrapper for url writer\n         * @param {String} varName\n         * @param {String} varValue\n         * @returns {*|String}\n         */\n        addVarToUrl: function (varName, varValue) {\n            this.url = this._addVarToUrl(this.url, varName, varValue);\n\n            return this.url;\n        }\n    });\n\n    return $.mage.visualMerchandiserTilePager;\n});\n","Magento_VisualMerchandiser/js/tabs.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Ui/js/lib/core/storage/local',\n    'mage/backend/tabs'\n], function ($, registry) {\n    'use strict';\n\n    $.widget('mage.visualMerchandiserTabs', {\n        options: {\n        },\n\n        storage: null,\n        activeTabName: 'merchandiser_tab_active',\n        storageName: 'localStorage',\n\n        /**\n         * @private\n         */\n        _create: function () {\n            var tabs = null,\n                active = null;\n\n            this.storage = registry.get(this.storageName);\n\n            tabs = this.element.tabs({\n                activate: $.proxy(this._activateTab, this),\n                create: $.proxy(this._createTabs, this)\n            });\n\n            active = this.storage.get(this.activeTabName);\n\n            if (active === undefined) {\n                active = 0;\n            }\n            tabs.tabs('option', 'active', active);\n        },\n\n        /**\n         * @param {jQuery.Event} event\n         * @param {Object} ui\n         * @private\n         */\n        _activateTab: function (event, ui) {\n            this._trigger('viewDidChange', event, ui.newPanel);\n            this.storage.set(this.activeTabName, ui.newTab.index());\n        },\n\n        /**\n         * @param {jQuery.Event} event\n         * @param {Object} ui\n         * @private\n         */\n        _createTabs: function (event, ui) {\n            this._trigger('viewDidChange', event, ui.panel);\n        }\n    });\n\n    return $.mage.visualMerchandiserTabs;\n});\n","Magento_VisualMerchandiser/js/grid/columns/onoff.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'underscore',\n    'mage/translate',\n    'Magento_Ui/js/grid/columns/multiselect',\n    'uiRegistry',\n    'prototype'\n], function (_, $t, Column, registry) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            headerTmpl: 'ui/grid/columns/onoff',\n            bodyTmpl: 'ui/grid/cells/onoff',\n            fieldClass: {\n                'admin__scope-old': true,\n                'data-grid-onoff-cell': true,\n                'data-grid-checkbox-cell': false\n            },\n            imports: {\n                selectedData: '${ $.provider }:data.selectedData',\n                allIds: '${ $.provider }:data.allIds'\n            },\n            listens: {\n                '${ $.provider }:reloaded': 'setDefaultSelections'\n            }\n        },\n\n        /**\n         * @param {Number} id\n         * @returns {*}\n         */\n        getLabel: function (id) {\n            return this.selected.indexOf(id) !== -1 ? $t('On') : $t('Off');\n        },\n\n        /**\n         * Sets the ids for preselected elements\n         * @returns void\n         */\n        setDefaultSelections: function () {\n            var positionCacheValid = registry.get('position_cache_valid'),\n                selectedFromCache = registry.get('selected_cache'),\n                massAssign = registry.get('mass_assign');\n\n            if (positionCacheValid && massAssign === true) {\n                // Set selected data from cache\n                selectedFromCache = JSON.parse(selectedFromCache);\n\n                this.selected(_.clone(selectedFromCache));\n\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n                registry.set('mass_assign', false);\n\n                return;\n            }\n\n            if (positionCacheValid && this.selected().length === 0) {\n                // Load selected data from cache\n                selectedFromCache = JSON.parse(selectedFromCache);\n\n                this.selected(_.clone(selectedFromCache));\n\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n\n                return;\n            }\n\n            if (positionCacheValid && this.selected().length > 0) {\n                // Save selected data to cache\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n\n                return;\n            }\n\n            if (this.selectedData.length === 0) {\n                // Remove all selected data\n                this.selected.removeAll();\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify([]));\n\n                return;\n            }\n\n            this.selected.removeAll();\n            this.selected(_.keys(this.selectedData));\n\n            registry.set('position_cache_valid', true);\n            registry.set('selected_cache', JSON.stringify(this.selected()));\n        },\n\n        /**\n         * Show/hide action in the massaction menu\n         * @param {Number} actionId\n         * @returns {Boolean}\n         */\n        isActionRelevant: function (actionId) {\n            var relevant = true;\n\n            switch (actionId) {\n                case 'selectPage':\n                    relevant = !this.isPageSelected(true);\n                    break;\n\n                case 'deselectPage':\n                    relevant =  this.isPageSelected();\n                    break;\n            }\n\n            return relevant;\n        },\n\n        /**\n         * Updates values of the 'allSelected'\n         * and 'indetermine' properties.\n         *\n         * @returns {Object} Chainable.\n         */\n        updateState: function () {\n            var positionCacheValid = registry.get('position_cache_valid'),\n                totalRecords    = this.totalRecords(),\n                totalSelected   = this.totalSelected(),\n                allSelected;\n\n            if (positionCacheValid && this.selected().length > 0) {\n                registry.set('position_cache_valid', true);\n                registry.set('selected_cache', JSON.stringify(this.selected()));\n            }\n\n            // When filters are enabled then totalRecords is unknown\n            if (this.getFiltering()) {\n                if (this.getFiltering().search !== '') {\n                    totalRecords = -1;\n                }\n            }\n\n            allSelected = totalRecords && totalSelected === totalRecords;\n\n            this.allSelected(allSelected);\n            this.indetermine(totalSelected && !allSelected);\n\n            return this;\n        },\n\n        /**\n         * Selects all records, even those that\n         * are not visible on the page.\n         *\n         * @returns {Object} Chainable.\n         */\n        selectAll: function () {\n            var newSelected = [],\n                $selected = $H(),\n                i;\n\n            for (i = 0; i < this.selected().length; i++) {\n                $selected.set(this.selected()[i], i);\n            }\n\n            for (i = 0; i < this.allIds.length; i++) {\n                if ($selected.get(this.allIds[i]) === undefined) {\n                    newSelected.push(this.allIds[i]);\n                }\n            }\n\n            this.selected(this.selected().concat(newSelected));\n\n            return this;\n        }\n    });\n});\n","Magento_CatalogStaging/js/tinyMCE/modal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n        'jquery',\n        'uiElement'\n    ],\n    function ($, Element) {\n        'use strict';\n\n        return Element.extend({\n            defaults: {\n                parentSelector: '.modals-wrapper',\n                modalSelector: '.scheduled-changes-modal-slide',\n                partOfElementId: 'catalogstaging'\n            },\n\n            /**\n             * @inheritdoc\n             */\n            initialize: function () {\n                var block,\n                    arr,\n                    wysiwyg;\n\n                this._super();\n\n                // The fix should be applied only if tinyMCE defined\n                if (typeof tinyMCE === 'undefined') {\n                    return;\n                }\n\n                /* eslint-disable no-undef */\n                wysiwyg = tinyMCE;\n\n                // The fix should be applied for tinyMCE3 only\n                if (wysiwyg.majorVersion !== '3') {\n                    return;\n                }\n                block = this;\n\n                // remove active wysiwyg editors when modal popup closed\n                $(block.parentSelector).on('modalclosed', block.modalSelector, function () {\n                    if (wysiwyg.editors.length === 0) {\n                        return;\n                    }\n                    arr = wysiwyg.editors.filter(function () {\n                        return true;\n                    });\n                    arr.each(function (editor) {\n                        if (editor.editorId.indexOf(block.partOfElementId) === 0) {\n                            editor.remove();\n                        }\n                    });\n                });\n            }\n        });\n    }\n);\n","Magento_AdobeIms/js/config.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([], function () {\n    'use strict';\n\n    return {\n        loginUrl: 'https://ims-na1.adobelogin.com/ims/authorize',\n        profileUrl: 'adobe_ims/user/profile',\n        logoutUrl: 'adobe_ims/user/logout',\n        manageAccountLink: 'https://account.adobe.com/',\n        login: {\n            callbackParsingParams: {\n                regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\n                codeIndex: 1,\n                messageIndex: 2,\n                nameIndex: 3,\n                successCode: 'success',\n                errorCode: 'error'\n            },\n            popupWindowParams: {\n                width: 500,\n                height: 600,\n                top: 100,\n                left: 300\n            },\n            popupWindowTimeout: 10000\n        }\n    };\n});\n\n","Magento_AdobeIms/js/signIn.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiComponent',\n    'jquery',\n    'Magento_AdobeIms/js/action/authorization'\n], function (Component, $, login) {\n    'use strict';\n\n    return Component.extend({\n\n        defaults: {\n            profileUrl: 'adobe_ims/user/profile',\n            logoutUrl: 'adobe_ims/user/logout',\n            user: {\n                isAuthorized: false,\n                name: '',\n                email: '',\n                image: ''\n            },\n            loginConfig: {\n                url: 'https://ims-na1.adobelogin.com/ims/authorize',\n                callbackParsingParams: {\n                    regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\n                    codeIndex: 1,\n                    messageIndex: 2,\n                    nameIndex: 3,\n                    successCode: 'success',\n                    errorCode: 'error'\n                },\n                popupWindowParams: {\n                    width: 500,\n                    height: 600,\n                    top: 100,\n                    left: 300\n                },\n                popupWindowTimeout: 60000\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            this._super().observe(['user']);\n\n            return this;\n        },\n\n        /**\n         * Login to Adobe\n         *\n         * @return {window.Promise}\n         */\n        login: function () {\n            var deferred = $.Deferred();\n\n            if (this.user().isAuthorized) {\n                deferred.resolve();\n            }\n            login(this.loginConfig)\n                .then(function (response) {\n                    this.loadUserProfile();\n                    deferred.resolve(response);\n                }.bind(this))\n                .fail(function (error) {\n                    deferred.reject(error);\n                });\n\n            return deferred.promise();\n        },\n\n        /**\n         * Retrieve data to authorized user.\n         *\n         * @return array\n         */\n        loadUserProfile: function () {\n            $.ajax({\n                type: 'GET',\n                url: this.profileUrl,\n                showLoader: true,\n                dataType: 'json',\n                context: this,\n\n                /**\n                 * @param {Object} response\n                 * @returns void\n                 */\n                success: function (response) {\n                    this.user({\n                        isAuthorized: true,\n                        name: response.result.name,\n                        email: response.result.email,\n                        image: response.result.image\n                    });\n                },\n\n                /**\n                 * @param {Object} response\n                 * @returns {String}\n                 */\n                error: function (response) {\n                    return response.message;\n                }\n            });\n        },\n\n        /**\n         * Logout from adobe account\n         */\n        logout: function () {\n            $.ajax({\n                type: 'POST',\n                url: this.logoutUrl,\n                data: {\n                    'form_key': window.FORM_KEY\n                },\n                dataType: 'json',\n                context: this,\n                showLoader: true,\n                success: function () {\n                    this.user({\n                        isAuthorized: false,\n                        name: '',\n                        email: '',\n                        image: ''\n                    });\n                }.bind(this),\n\n                /**\n                 * @param {Object} response\n                 * @returns {String}\n                 */\n                error: function (response) {\n                    return response.message;\n                }\n            });\n        }\n    });\n});\n","Magento_AdobeIms/js/user.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine(['ko'], function (ko) {\n    'use strict';\n\n    return {\n        isAuthorized: ko.observable(false),\n        name: ko.observable(''),\n        email: ko.observable('')\n    };\n});\n","Magento_AdobeIms/js/action/authorization.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    /**\n     * Build window params\n     * @param {Object} windowParams\n     * @returns {String}\n     */\n    function buildWindowParams(windowParams) {\n        var output = '',\n            coma = '',\n            paramName,\n            paramValue;\n\n        for (paramName in windowParams) {\n            if (windowParams[paramName]) {\n                paramValue = windowParams[paramName];\n                output += coma + paramName + '=' + paramValue;\n                coma = ',';\n            }\n        }\n\n        return output;\n    }\n\n    return function (config) {\n        var authWindow,\n            deferred = $.Deferred(),\n            watcherId,\n            stopWatcherId;\n\n        /**\n         * Close authorization window if already opened\n         */\n        if (window.adobeIMSAuthWindow) {\n            window.adobeIMSAuthWindow.close();\n        }\n\n        /**\n         * Opens authorization window with special parameters\n         */\n        authWindow = window.adobeIMSAuthWindow = window.open(\n            config.url,\n            'authorization_widnow',\n            buildWindowParams(\n                config.popupWindowParams || {\n                    width: 500,\n                    height: 300\n                }\n            )\n        );\n\n        /**\n         * Stop handle\n         */\n        function stopHandle() {\n            // Clear timers\n            clearTimeout(stopWatcherId);\n            clearInterval(watcherId);\n\n            // Close window\n            authWindow.close();\n        }\n\n        /**\n         * Start handle\n         */\n        function startHandle() {\n            var responseData;\n\n            try {\n\n                if (authWindow.document.domain !== document.domain ||\n                    authWindow.document.readyState !== 'complete') {\n                    return;\n                }\n\n                /**\n                 * If within 10 seconds the result is not received, then reject the request\n                 */\n                stopWatcherId = setTimeout(function () {\n                    stopHandle();\n                    deferred.reject(new Error('Time\\'s up.'));\n                }, config.popupWindowTimeout || 60000);\n\n                responseData = authWindow.document.body.innerHTML.match(\n                    config.callbackParsingParams.regexpPattern\n                );\n\n                if (!responseData) {\n                    return;\n                }\n\n                stopHandle();\n\n                if (responseData[config.callbackParsingParams.codeIndex] ===\n                    config.callbackParsingParams.successCode) {\n                    deferred.resolve({\n                        isAuthorized: true,\n                        lastAuthSuccessMessage: responseData[config.callbackParsingParams.messageIndex]\n                    });\n                } else {\n                    deferred.reject(responseData[config.callbackParsingParams.messageIndex]);\n                }\n            } catch (e) {\n                if (authWindow.closed) {\n                    clearTimeout(stopWatcherId);\n                    clearInterval(watcherId);\n\n                    // eslint-disable-next-line max-depth\n                    if (window.adobeIMSAuthWindow && window.adobeIMSAuthWindow.closed) {\n                        deferred.reject(new Error('Authentication window was closed.'));\n                    }\n                }\n            }\n        }\n\n        /**\n         * Watch a result 1 time per second\n         */\n        watcherId = setInterval(startHandle, 1000);\n\n        return deferred.promise();\n    };\n});\n","Magento_Paypal/js/rule.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiClass',\n    'Magento_Paypal/js/rules'\n], function (Class, Rules) {\n    'use strict';\n\n    return Class.extend({\n\n        /**\n         * Constructor\n         *\n         * @param {Object} config\n         * @returns {exports.initialize}\n         */\n        initialize: function (config) {\n            this.rules = new Rules();\n            this.initConfig(config);\n\n            return this;\n        },\n\n        /**\n         * To apply the rule\n         */\n        apply: function () {\n            this.rules[this.name](this.$target, this.$owner, this.data);\n        }\n    });\n});\n","Magento_Paypal/js/rules.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiClass',\n    'Magento_Ui/js/modal/alert'\n], function (Class, alert) {\n    'use strict';\n\n    /**\n     * Check is solution enabled\n     *\n     * @param {*} solution\n     * @param {String} enabler\n     * @returns {Boolean}\n     */\n    var isSolutionEnabled = function (solution, enabler) {\n            return solution.find(enabler).val() === '1';\n        },\n\n        /**\n         * Check is solution has related solutions enabled\n         *\n         * @param {Object} data\n         * @returns {Boolean}\n         */\n        hasRelationsEnabled = function (data) {\n            var name;\n\n            for (name in data.argument) {\n                if (\n                    data.solutionsElements[name] &&\n                    isSolutionEnabled(data.solutionsElements[name], data.enableButton)\n                ) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Set solution select-enabler to certain option\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         * @param {Boolean} enabled\n         */\n        setSolutionSelectEnabled = function (solution, enabler, enabled) {\n            enabled = !(enabled || typeof enabled === 'undefined') ? '0' : '1';\n\n            solution.find(enabler + ' option[value=' + enabled + ']')\n            .prop('selected', true);\n        },\n\n        /**\n         * Set solution property 'disabled' value\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         * @param {Boolean} enabled\n         */\n        setSolutionPropEnabled = function (solution, enabler, enabled) {\n            enabled = !(enabled || typeof enabled === 'undefined');\n\n            solution.find(enabler).prop('disabled', enabled);\n        },\n\n        /**\n         * Set/unset solution select-enabler label\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         * @param {Boolean} enabled\n         */\n        setSolutionMarkEnabled = function (solution, enabler, enabled) {\n            var solutionEnabler = solution.find('label[for=\"' + solution.find(enabler).attr('id') + '\"]');\n\n            enabled || typeof enabled === 'undefined' ?\n                solutionEnabler.addClass('enabled') :\n                solutionEnabler.removeClass('enabled');\n        },\n\n        /**\n         * Set/unset solution section label\n         *\n         * @param {*} solution\n         * @param {Boolean} enabled\n         */\n        setSolutionSectionMarkEnabled = function (solution, enabled) {\n            var solutionSection = solution.find('.section-config');\n\n            enabled || typeof enabled === 'undefined' ?\n                solutionSection.addClass('enabled') :\n                solutionSection.removeClass('enabled');\n        },\n\n        /**\n         * Set/unset solution section inner labels\n         *\n         * @param {*} solution\n         * @param {Boolean} enabled\n         */\n        setSolutionLabelsMarkEnabled = function (solution, enabled) {\n            var solutionLabels = solution.find('label.enabled');\n\n            enabled || typeof enabled === 'undefined' ?\n                solutionLabels.addClass('enabled') :\n                solutionLabels.removeClass('enabled');\n        },\n\n        /**\n         * Set/unset solution usedefault checkbox\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         * @param {Boolean} checked\n         */\n        setSolutionUsedefaultEnabled = function (solution, enabler, checked) {\n            checked = !(checked || typeof checked === 'undefined');\n\n            solution.find('input[id=\"' + solution.find(enabler).attr('id') + '_inherit\"]')\n            .prop('checked', checked);\n        },\n\n        /**\n         * Set solution as disabled\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         */\n        disableSolution = function (solution, enabler) {\n            setSolutionUsedefaultEnabled(solution, enabler);\n            setSolutionMarkEnabled(solution, enabler, false);\n            setSolutionSelectEnabled(solution, enabler, false);\n            setSolutionPropEnabled(solution, enabler, false);\n        },\n\n        /**\n         * Set solution as enabled\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         */\n        enableSolution = function (solution, enabler) {\n            setSolutionUsedefaultEnabled(solution, enabler);\n            setSolutionPropEnabled(solution, enabler);\n            setSolutionSelectEnabled(solution, enabler);\n            setSolutionMarkEnabled(solution, enabler);\n        },\n\n        /**\n         * Lock/unlock solution configuration button\n         *\n         * @param {*} solution\n         * @param {String} buttonConfiguration\n         * @param {Boolean} unlock\n         */\n        setSolutionConfigurationUnlock = function (solution, buttonConfiguration, unlock) {\n            var solutionConfiguration = solution.find(buttonConfiguration);\n\n            unlock || typeof unlock === 'undefined' ?\n                solutionConfiguration.removeClass('disabled').prop('disabled', false) :\n                solutionConfiguration.addClass('disabled').attr('disabled', 'disabled');\n        },\n\n        /**\n         * Forward solution select-enabler changes\n         *\n         * @param {*} solution\n         * @param {String} enabler\n         */\n        forwardSolutionChange = function (solution, enabler) {\n            solution.find(enabler).change();\n        },\n\n        /**\n         * Show/hide dependent fields\n         *\n         * @param {*} solution\n         * @param {String} identifier\n         * @param {Boolean} show\n         */\n        showDependsField = function (solution, identifier, show) {\n            show = show || typeof show === 'undefined';\n\n            solution.find(identifier).toggle(show);\n            solution.find(identifier).closest('tr').toggle(show);\n            solution.find(identifier).attr('disabled', !show);\n        };\n\n    return Class.extend({\n        defaults: {\n            /**\n             * Payment conflicts checker\n             */\n            executed: false\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        simpleDisable: function ($target, $owner, data) {\n            setSolutionSelectEnabled($target, data.enableButton, false);\n            setSolutionLabelsMarkEnabled($target, false);\n            setSolutionSectionMarkEnabled($target, false);\n        },\n\n        /**\n         * @param {*} $target\n         */\n        simpleMarkEnable: function ($target) {\n            setSolutionSectionMarkEnabled($target);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        disable: function ($target, $owner, data) {\n            this.simpleDisable($target, $owner, data);\n            forwardSolutionChange($target, data.enableButton);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalExpressDisable: function ($target, $owner, data) {\n            setSolutionSelectEnabled($target, data.enableButton, false);\n            setSolutionLabelsMarkEnabled($target, false);\n            forwardSolutionChange($target, data.enableButton);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalExpressLockConfiguration: function ($target, $owner, data) {\n            setSolutionConfigurationUnlock($target, data.buttonConfiguration, false);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalExpressLockConfigurationConditional: function ($target, $owner, data) {\n            if (\n                !isSolutionEnabled($target, data.enableInContextPayPal) &&\n                hasRelationsEnabled(data)\n            ) {\n                this.paypalExpressLockConfiguration($target, $owner, data);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalExpressMarkDisable: function ($target, $owner, data) {\n            if (!hasRelationsEnabled(data)) {\n                this.simpleDisable($target, $owner, data);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalExpressUnlockConfiguration: function ($target, $owner, data) {\n            if (!hasRelationsEnabled(data)) {\n                setSolutionConfigurationUnlock($target, data.buttonConfiguration);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalBmlDisable: function ($target, $owner, data) {\n            disableSolution($target, data.enableBmlPayPal);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalBmlDisableConditional: function ($target, $owner, data) {\n            if (!isSolutionEnabled($target, data.enableButton)) {\n                this.paypalBmlDisable($target, $owner, data);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalBmlEnable: function ($target, $owner, data) {\n            enableSolution($target, data.enableBmlPayPal);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressDisable: function ($target, $owner, data) {\n            disableSolution($target, data.enableExpress);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressDisableConditional: function ($target, $owner, data) {\n            if (\n                !isSolutionEnabled($target, data.enableButton) ||\n                hasRelationsEnabled(data)\n            ) {\n                this.payflowExpressDisable($target, $owner, data);\n                forwardSolutionChange($target, data.enableExpress);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressEnable: function ($target, $owner, data) {\n            enableSolution($target, data.enableExpress);\n            forwardSolutionChange($target, data.enableExpress);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressEnableConditional: function ($target, $owner, data) {\n            if (hasRelationsEnabled(data)) {\n                setSolutionPropEnabled($target, data.enableExpress, false);\n                setSolutionSelectEnabled($target, data.enableExpress);\n                setSolutionMarkEnabled($target, data.enableExpress);\n            } else {\n                disableSolution($target, data.enableExpress);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressLockConditional: function ($target, $owner, data) {\n            if (!isSolutionEnabled($target, data.enableButton)) {\n                setSolutionPropEnabled($target, data.enableExpress, false);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressUsedefaultDisable: function ($target, $owner, data) {\n            setSolutionUsedefaultEnabled($target, data.enableExpress, false);\n            this.payflowExpressEnable($target, $owner, data);\n            forwardSolutionChange($target, data.enableExpress);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowExpressUsedefaultEnable: function ($target, $owner, data) {\n            setSolutionUsedefaultEnabled($target, data.enableExpress);\n            this.payflowExpressDisable($target, $owner, data);\n            forwardSolutionChange($target, data.enableExpress);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowBmlDisable: function ($target, $owner, data) {\n            disableSolution($target, data.enableBml);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowBmlDisableConditional: function ($target, $owner, data) {\n            if (\n                !isSolutionEnabled($target, data.enableButton) ||\n                hasRelationsEnabled(data)\n            ) {\n                this.payflowBmlDisable($target, $owner, data);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowBmlDisableConditionalExpress: function ($target, $owner, data) {\n            if (!isSolutionEnabled($target, data.enableExpress)) {\n                this.payflowBmlDisable($target, $owner, data);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowBmlEnable: function ($target, $owner, data) {\n            enableSolution($target, data.enableBml);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowBmlEnableConditional: function ($target, $owner, data) {\n            if (hasRelationsEnabled(data)) {\n                setSolutionPropEnabled($target, data.enableBml, false);\n                setSolutionSelectEnabled($target, data.enableBml);\n                setSolutionMarkEnabled($target, data.enableBml);\n            } else {\n                disableSolution($target, data.enableBml);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowBmlLockConditional: function ($target, $owner, data) {\n            if (!isSolutionEnabled($target, data.enableButton)) {\n                setSolutionPropEnabled($target, data.enableBml, false);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextEnable: function ($target, $owner, data) {\n            enableSolution($target, data.enableInContextPayPal);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextDisable: function ($target, $owner, data) {\n            disableSolution($target, data.enableInContextPayPal);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextShowMerchantId: function ($target, $owner, data) {\n            showDependsField($target, data.dependsMerchantId);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextHideMerchantId: function ($target, $owner, data) {\n            showDependsField($target, data.dependsMerchantId, false);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowShowSortOrder: function ($target, $owner, data) {\n            showDependsField($target, data.dependsBmlSortOrder);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        payflowHideSortOrder: function ($target, $owner, data) {\n            showDependsField($target, data.dependsBmlSortOrder, false);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalShowSortOrder: function ($target, $owner, data) {\n            showDependsField($target, data.dependsBmlApiSortOrder);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        paypalHideSortOrder: function ($target, $owner, data) {\n            showDependsField($target, data.dependsBmlApiSortOrder, false);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextActivate: function ($target, $owner, data) {\n            setSolutionMarkEnabled($target, data.enableInContextPayPal);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextDeactivate: function ($target, $owner, data) {\n            setSolutionMarkEnabled($target, data.enableInContextPayPal, false);\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        inContextDisableConditional: function ($target, $owner, data) {\n            if (!isSolutionEnabled($target, data.enableButton)) {\n                this.inContextDisable($target, $owner, data);\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        conflict: function ($target, $owner, data) {\n            var newLine = String.fromCharCode(10, 13);\n\n            if (\n                isSolutionEnabled($owner, data.enableButton) &&\n                hasRelationsEnabled(data) &&\n                !this.executed\n            ) {\n                this.executed = true;\n                alert({\n                    content: 'The following error(s) occurred:' +\n                    newLine +\n                    'Some PayPal solutions conflict.' +\n                    newLine +\n                    'Please re-enable the previously enabled payment solutions.'\n                });\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        removeCreditOption: function ($target, $owner, data) {\n            if ($target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').length > 0) {\n                $target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').remove();\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        addCreditOption: function ($target, $owner, data) {\n            if ($target.find(data.dependsButtonLabel + ' option[value=\"credit\"]').length === 0) {\n                $target.find(data.dependsButtonLabel).append('<option value=\"credit\">Credit</option>');\n            }\n        },\n\n        /**\n         * @param {*} $target\n         * @param {*} $owner\n         * @param {Object} data\n         */\n        removeCreditOptionConditional: function ($target, $owner, data) {\n            if ($target.find(data.dependsDisableFundingOptions + ' option[value=\"CREDIT\"]').length === 0 ||\n                $target.find(data.dependsDisableFundingOptions + ' option[value=\"CREDIT\"]:selected').length > 0\n            ) {\n                this.removeCreditOption($target, $owner, data);\n            }\n        }\n    });\n});\n","Magento_Paypal/js/solution.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'uiClass',\n    'Magento_Paypal/js/rule',\n    'mageUtils',\n    'underscore'\n], function ($, Class, Rule, utils, _) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n\n            /**\n             * The event corresponding to the state change\n             */\n            systemEvent: 'change',\n\n            /**\n             * The rules applied after the page is loaded\n             */\n            afterLoadRules: [],\n\n            /**\n             * An attribute of the element responsible for the activation of the payment method (data attribute)\n             */\n            enableButton:   '[data-enable=\"payment\"]',\n\n            /**\n             * An attribute of the element responsible for the activation of the Payflow Express (data attribute)\n             */\n            enableExpress:  '[data-enable=\"express\"]',\n\n            /**\n             * An attribute of the element responsible for the activation of the\n             * PayPal Express In-Context Checkout Experience (data attribute)\n             */\n            enableInContextPayPal: '[data-enable=\"in-context-api\"]',\n\n            /**\n             * An attribute of the element responsible for the activation of the Payflow Bml (data attribute)\n             */\n            enableBml:      '[data-enable=\"bml\"]',\n\n            /**\n             * An attribute of the element responsible for the activation of the PayPal Bml (data attribute)\n             */\n            enableBmlPayPal:      '[data-enable=\"bml-api\"]',\n\n            /**\n             * An attribute of the element responsible for the visibility of the PayPal Merchant Id (data attribute)\n             */\n            dependsMerchantId:  '[data-enable=\"merchant-id\"]',\n\n            /**\n             * An attribute of the element responsible for the visibility of the Payflow Bml Sort Order (data attribute)\n             */\n            dependsBmlSortOrder:    '[data-enable=\"bml-sort-order\"]',\n\n            /**\n             * An attribute of the element responsible for the visibility of the PayPal Bml Sort Order (data attribute)\n             */\n            dependsBmlApiSortOrder:    '[data-enable=\"bml-api-sort-order\"]',\n\n            /**\n             * An attribute of the element responsible for the visibility of the\n             * button Label credit option (data attribute)\n             */\n            dependsButtonLabel: '[data-enable=\"button-label\"]',\n\n            /**\n             * An attribute of the element responsible for the visibility of the\n             * button Label credit option on load (data attribute)\n             */\n            dependsDisableFundingOptions: '[data-enable=\"disable-funding-options\"]',\n\n            /**\n             * Templates element selectors\n             */\n            templates: {\n                elementSelector: 'div.section-config tr[id$=\"${ $.identifier }\"]:first'\n            }\n        },\n\n        /**\n         * Constructor\n         *\n         * @param {Object} config\n         * @param {String} identifier\n         * @returns {exports.initialize}\n         */\n        initialize: function (config, identifier) {\n            this.initConfig(config);\n            this.$self = this.createElement(identifier);\n\n            return this;\n        },\n\n        /**\n         * Initialization events\n         *\n         * @returns {exports.initEvents}\n         */\n        initEvents: function () {\n            _.each(this.config.events, function (elementEvents, selector) {\n\n                var solution = this,\n                    selectorButton = solution.$self.find(selector),\n                    $self = solution.$self,\n                    events = elementEvents;\n\n                selectorButton.on(solution.systemEvent, function () {\n                    _.each(events, function (elementEvent, name) {\n\n                        var predicate = elementEvent.predicate,\n                            result = true,\n\n                            /**\n                             * @param {Function} functionPredicate\n                             */\n                            predicateCallback = function (functionPredicate) {\n                                result = functionPredicate(solution, predicate.message, predicate.argument);\n\n                                if (result) {\n                                    $self.trigger(name);\n                                } else {\n                                    $self.trigger(predicate.event);\n                                }\n                            };\n\n                        if (solution.getValue($(this)) === elementEvent.value ||\n                            $(this).prop('multiple') && solution.checkMultiselectValue($(this), elementEvent)\n                        ) {\n                            if (predicate.name) {\n                                require([\n                                    'Magento_Paypal/js/predicate/' + predicate.name\n                                ], predicateCallback);\n                            } else {\n                                $self.trigger(name);\n                            }\n                        }\n                    }, this);\n                });\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * @param {Object} $element\n         * @returns {*}\n         */\n        getValue: function ($element) {\n            if ($element.is(':checkbox')) {\n                return $element.prop('checked') ? '1' : '0';\n            }\n\n            return $element.val();\n        },\n\n        /**\n         * Check multiselect value based on include value\n         *\n         * @param {Object} $element\n         * @param {Object} elementEvent\n         * @returns {Boolean}\n         */\n        checkMultiselectValue: function ($element, elementEvent) {\n            var isValueSelected = $.inArray(elementEvent.value, $element.val()) >= 0;\n\n            if (elementEvent.include) {\n                isValueSelected = (isValueSelected ? 'true' : 'false') === elementEvent.include;\n            }\n\n            return isValueSelected;\n        },\n\n        /**\n         * Adding event listeners\n         *\n         * @returns {exports.addListeners}\n         */\n        addListeners: function () {\n\n            _.each(this.config.relations, function (rules, targetName) {\n\n                var $target = this.createElement(targetName);\n\n                _.each(rules, function (instances, instanceName) {\n\n                    _.each(instances, function (instance) {\n                        var handler = new Rule({\n                            name: instanceName,\n                            $target: $target,\n                            $owner: this.$self,\n                            data: {\n                                buttonConfiguration: this.buttonConfiguration,\n                                enableButton: this.enableButton,\n                                enableExpress: this.enableExpress,\n                                enableInContextPayPal: this.enableInContextPayPal,\n                                enableBml: this.enableBml,\n                                enableBmlPayPal: this.enableBmlPayPal,\n                                dependsMerchantId: this.dependsMerchantId,\n                                dependsBmlSortOrder: this.dependsBmlSortOrder,\n                                dependsBmlApiSortOrder: this.dependsBmlApiSortOrder,\n                                dependsButtonLabel: this.dependsButtonLabel,\n                                dependsDisableFundingOptions: this.dependsDisableFundingOptions,\n                                solutionsElements: this.solutionsElements,\n                                argument: instance.argument\n                            }\n                        });\n\n                        if (instance.event === ':load') {\n                            this.afterLoadRules.push(handler);\n\n                            return;\n                        }\n\n                        this.$self.on(instance.event, _.bind(handler.apply, handler));\n                    }, this);\n                }, this);\n            }, this);\n\n            return this;\n        },\n\n        /**\n         * Create a jQuery element according to selector\n         *\n         * @param {String} identifier\n         * @returns {*}\n         */\n        createElement: function (identifier) {\n            if (identifier === ':self') {\n                return this.$self;\n            }\n\n            return $(utils.template(this.templates.elementSelector, {\n                'identifier': identifier\n            }));\n        },\n\n        /**\n         * Assign solutions elements\n         *\n         * @param {Object} elements\n         * @returns {exports.setSolutionsElements}\n         */\n        setSolutionsElements: function (elements) {\n            this.solutionsElements = elements;\n\n            return this;\n        }\n    });\n});\n","Magento_Paypal/js/solutions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'uiClass',\n    'Magento_Paypal/js/solution',\n    'underscore'\n], function ($, Class, Solution, _) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n\n            /**\n             * Initialized solutions\n             */\n            solutions: {},\n\n            /**\n             * The elements of created solutions\n             */\n            solutionsElements: {},\n\n            /**\n             * The selector element responsible for configuration of payment method (CSS class)\n             */\n            buttonConfiguration: '.button.action-configure'\n        },\n\n        /**\n         * Constructor\n         *\n         * @param {Object} config\n         * @returns {exports.initialize}\n         */\n        initialize: function (config) {\n            this.initConfig(config)\n                .initSolutions();\n\n            return this;\n        },\n\n        /**\n         * Initialization and configuration solutions\n         *\n         * @returns {exports.initSolutions}\n         */\n        initSolutions: function () {\n            _.each(this.config.solutions, this.addSolution, this);\n            this.initializeSolutions()\n                .wipeButtonsConfiguration();\n            _.each(this.solutions, this.applicationRules);\n\n            return this;\n        },\n\n        /**\n         * The creation and addition of the solution according to the configuration\n         *\n         * @param {Object} solution\n         * @param {String} identifier\n         */\n        addSolution: function (solution, identifier) {\n            this.solutions[identifier] = new Solution({\n                config: solution,\n                buttonConfiguration: this.buttonConfiguration\n            }, identifier);\n            this.solutionsElements[identifier] = this.solutions[identifier].$self;\n        },\n\n        /**\n         * Wiping buttons configuration of the payment method\n         */\n        wipeButtonsConfiguration: function () {\n            $(this.buttonConfiguration).removeClass('disabled')\n                .prop('disabled', false);\n        },\n\n        /**\n         * Application of the rules\n         *\n         * @param {Object} solution\n         */\n        applicationRules: function (solution) {\n            _.each(solution.afterLoadRules, function (rule) {\n                rule.apply();\n            });\n        },\n\n        /**\n         * Initialize solutions\n         *\n         * @returns {exports.initializeSolutions}\n         */\n        initializeSolutions: function () {\n            _.each(this.solutions, function (solution) {\n                solution.setSolutionsElements(this.solutionsElements)\n                    .initEvents()\n                    .addListeners();\n            }, this);\n\n            return this;\n        }\n    });\n});\n","Magento_Paypal/js/payflowpro/vault.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n\ndefine([\n    'jquery',\n    'uiComponent'\n], function ($, Class) {\n    'use strict';\n\n    return Class.extend({\n        defaults: {\n            $selector: null,\n            selector: 'edit_form'\n        },\n\n        /**\n         * Set list of observable attributes\n         * @returns {exports.initObservable}\n         */\n        initObservable: function () {\n            var self = this;\n\n            self.$selector = $('#' + self.selector);\n            this._super();\n\n            this.initEventHandlers();\n\n            return this;\n        },\n\n        /**\n         * Get payment code\n         * @returns {String}\n         */\n        getCode: function () {\n            return 'payflowpro';\n        },\n\n        /**\n         * Init event handlers\n         */\n        initEventHandlers: function () {\n            $('#' + this.container).find('[name=\"payment[token_switcher]\"]')\n                .on('click', this.setPaymentDetails.bind(this));\n        },\n\n        /**\n         * Store payment details\n         */\n        setPaymentDetails: function () {\n            this.$selector.find('[name=\"payment[public_hash]\"]').val(this.publicHash);\n        }\n    });\n});\n","Magento_Paypal/js/predicate/confirm.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['underscore'], function (_) {\n    'use strict';\n\n    return function (solution, message, argument) {\n        var isConfirm = false;\n\n        _.every(argument, function (name) {\n            if (solution.solutionsElements[name] &&\n                solution.solutionsElements[name].find(solution.enableButton).val() == 1 //eslint-disable-line eqeqeq\n            ) {\n                isConfirm = true;\n\n                return !isConfirm;\n            }\n\n            return !isConfirm;\n        }, this);\n\n        if (isConfirm) {\n            return confirm(message); //eslint-disable-line no-alert\n        }\n\n        return true;\n    };\n});\n","Magento_VersionsCms/extender.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_VersionsCms/page/js/form',\n    'Magento_VersionsCms/page/js/validation'\n]);\n","Magento_VersionsCms/page/js/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'mage/backend/form'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.form', $.mage.form, {\n        options: {\n            handlersData: {\n                preview: {\n                    target: '_blank'\n                },\n                saveAndPublish: {\n                    action: {\n                        args: {\n                            back: 'publish'\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Process preview action before form submit.\n         * @param {String} handlerName\n         * @protected\n         */\n        _beforeSubmit: function (handlerName) {\n            if (handlerName === 'preview' && this.options.handlersData[handlerName].action) {\n                this.element.prop(this._processData(this.options.handlersData[handlerName]));\n            } else {\n                this._superApply(arguments);\n            }\n        }\n    });\n});\n","Magento_VersionsCms/page/js/validation.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'mage/validation'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.validation', $.mage.validation, {\n        options: {\n            ignore: 'form form input, form form select, form form textarea'\n        }\n    });\n});\n","Magento_AdminAdobeIms/postcss.config.js":"module.exports = {\n    plugins: [\n        require('postcss-import'),\n        require('postcss-varfallback'),\n        require('postcss-dropunusedvars'),\n        require('cssnano')\n    ]\n};\n","Magento_AdminAdobeIms/js/admin_adobe_ims_load_icons.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_AdminAdobeIms/js/loadicons'\n], function ($, _, loadicons) {\n    'use strict';\n\n    var icons = {},\n\n    loadIcons = {\n        /**\n         * loadicons initialization\n         */\n        init: function () {\n            loadicons(icons.spectrumCssIcons);\n            loadicons(icons.spectrumIcons);\n        },\n\n        /**\n         * @param {Object} iconUrls\n         * @constructor\n         */\n        'Magento_AdminAdobeIms/js/admin_adobe_ims_load_icons': function (iconUrls) {\n            icons = iconUrls;\n            loadIcons.init();\n        }\n    };\n\n    return loadIcons;\n});\n","Magento_AdminAdobeIms/js/adobe-ims-reauth.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiComponent',\n    'jquery',\n    'Magento_AdobeIms/js/action/authorization'\n], function (Component, $, login) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            loginConfig: {\n                url: 'https://ims-na1-stg.adobelogin.com/ims/authorize',\n                callbackParsingParams: {\n                    regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\n                    codeIndex: 1,\n                    messageIndex: 2,\n                    nameIndex: 3,\n                    successCode: 'success',\n                    errorCode: 'error'\n                },\n                popupWindowParams: {\n                    width: 500,\n                    height: 600,\n                    top: 100,\n                    left: 300\n                },\n                popupWindowTimeout: 60000\n            }\n        },\n\n        /**\n         * @override\n         */\n        initialize: function () {\n            this._super();\n            this.login();\n        },\n\n        /**\n         * Open popup for Adobe reauth\n         *\n         * @return {window.Promise}\n         */\n        login: function () {\n            var deferred = $.Deferred(),\n                loginConfig = this.loginConfig;\n\n            $('input.ims_verification').on('click', function () {\n                login(loginConfig)\n                    .then(function (response) {\n                        if (response.isAuthorized === true) {\n                            $('input.ims_verified').val(true);\n                        }\n                        deferred.resolve(response);\n                    })\n                    .fail(function (error) {\n                        deferred.reject(error);\n                    });\n            });\n\n            return deferred.promise();\n        }\n    });\n});\n","Magento_AdminAdobeIms/js/loadicons.js":"/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n// UMD pattern via umdjs\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  }\n  else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like\n    module.exports = factory();\n  }\n  else {\n    // Browser\n    root.loadIcons = factory();\n  }\n}(typeof self !== 'undefined' ? self : this, function() {\n  function handleError(string) {\n    string = 'loadIcons: '+string;\n    var error = new Error(string);\n\n    console.error(error.toString());\n\n    if (typeof callback === 'function') {\n      callback(error);\n    }\n  }\n\n  function injectSVG(svgURL, callback) {\n    var error;\n    // 200 for web servers, 0 for CEP panels\n    if (this.status !== 200 && this.status !== 0) {\n      handleError('Failed to fetch icons, server returned ' + this.status);\n      return;\n    }\n\n    // Parse the SVG\n    var parser = new DOMParser();\n    try {\n      var doc = parser.parseFromString(this.responseText, 'image/svg+xml');\n      var svg = doc.firstChild;\n    }\n    catch (err) {\n      handleError('Error parsing SVG: ' + err);\n      return;\n    }\n\n    // Make sure a real SVG was returned\n    if (svg && svg.tagName === 'svg') {\n      // Hide the element\n      svg.style.display = 'none';\n\n      svg.setAttribute('data-url', svgURL);\n\n      // Insert it into the head\n      document.head.insertBefore(svg, null);\n\n      // Pass the SVG to the callback\n      if (typeof callback === 'function') {\n        callback(null, svg);\n      }\n    }\n    else {\n      handleError('Parsed SVG document contained something other than an SVG');\n    }\n  }\n\n  function loadIcons(svgURL, callback) {\n    // Request the SVG sprite\n    var req = new XMLHttpRequest();\n    req.open('GET', svgURL, true);\n    req.addEventListener('load', injectSVG.bind(req, svgURL, callback));\n    req.addEventListener('error', function(event) {\n      handleError('Request failed');\n    });\n    req.send();\n  }\n\n  return loadIcons;\n}));\n","Magento_AdvancedCheckout/addbysku.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Add By SKU class\n *\n * @method submitConfigured()\n * @method removeAllFailed()\n */\n/* global AddBySku, productConfigure, parseNumber, FORM_KEY */\n/* eslint-disable strict */\ndefine([\n    'prototype',\n    'mage/translate',\n    'Magento_Catalog/catalog/product/composite/configure',\n    'Magento_Catalog/js/price-utils'\n], function (prototype, translate, configure, priceUtils) {\n\n    window.AddBySku = Class.create();\n\n    AddBySku.prototype = {\n        /**\n         * Constructor\n         *\n         * @param {*} order - Instance of AdminOrder\n         * @param {Object} data - Array (see initialize())\n         */\n        initialize: function (order, data) {\n            var originConfiguredCheck, originRequestConfiguration;\n\n            if (!data) {\n                data = {};\n            }\n            this.lastId = 0;\n            this.configuredSkus = [];\n            this.configurableItems = {};\n            this.dataContainerId = data.dataContainerId;\n            this.deleteButtonHtml = data.deleteButtonHtml;\n            this.order = order;\n            this.listType = data.listType;\n            this.errorGridId = data.errorGridId;\n            this.fileFieldName = data.fileFieldName;\n            this.fileUploadUrl = data.fileUploadUrl;\n            this.fileUploadedParamName = data.fileUploaded;\n\n            // Changing original productConfigure object for SKU items needs\n            productConfigure.skuObject = this;\n            originConfiguredCheck = productConfigure.itemConfigured;\n\n            /**\n             * @param {*} listType\n             * @param {*} itemId\n             * @return {*}\n             */\n            productConfigure.itemConfigured = function (listType, itemId) {\n                var indexOfItemId;\n\n                if (listType != this.skuObject.listType) { //eslint-disable-line eqeqeq\n                    return originConfiguredCheck.apply(this, [listType, itemId]);\n                }\n\n                indexOfItemId = this.skuObject.configuredSkus.indexOf(itemId);\n\n                if (indexOfItemId !== -1) {\n                    if (!originConfiguredCheck.apply(this, [listType, itemId])) {\n                        this.skuObject.configuredSkus.splice(indexOfItemId, 1);\n\n                        return false;\n                    }\n\n                    return true;\n                }\n\n                return false;\n            };\n            originRequestConfiguration = productConfigure._requestItemConfiguration;\n\n            /**\n             * @param {*} listType\n             * @param {*} itemId\n             * @return {*}\n             * @private\n             */\n            productConfigure._requestItemConfiguration = function (listType, itemId) {\n                if (listType == this.skuObject.listType) { //eslint-disable-line eqeqeq\n                    itemId = this.skuObject.configurableItems[itemId];\n                }\n\n                return originRequestConfiguration.apply(this, [listType, itemId]);\n            };\n\n            /**\n             * Abstract admin sales instance.\n             *\n             * @param {Object} addBySkuObject\n             */\n            function adminSalesInstance(addBySkuObject) {\n                var fields, i;\n\n                this.skuInstance = addBySkuObject;\n                this.order = addBySkuObject.order;\n\n                /**\n                 * Submit configured.\n                 */\n                this.submitConfigured = function () {};\n\n                /**\n                 * Update error grid.\n                 */\n                this.updateErrorGrid = function () {};\n\n                /**\n                 * On submit sku form\n                 */\n                this.onSubmitSkuForm = function () {};\n                fields = $$(\n                    '#' + addBySkuObject.dataContainerId + ' input[name=\"sku\"]',\n                    '#' + addBySkuObject.dataContainerId + ' input[name=\"qty\"]'\n                );\n\n                for (i = 0; i < fields.length; i++) {\n                    Event.observe(fields[i], 'keypress', addBySkuObject.formKeyPress.bind(addBySkuObject));\n                }\n            }\n\n            /* eslint-disable */\n            /* jscs:disable */\n            // admin sales instance for 'Manage shopping cart'\n            adminCheckout.prototype = new adminSalesInstance(this);\n            adminCheckout.prototype.constructor = adminCheckout;\n            function adminCheckout()\n            {\n                this.controllerRequestParameterNames = {customerId: 'customer', storeId: 'store'};\n            }\n\n            /* eslint-enable */\n            /* jscs:enable */\n\n            /**\n             * Submit configured.\n             */\n            adminCheckout.prototype.submitConfigured = function () {\n                // Save original source grids configuration to be restored later\n                var oldSourceGrids = this.order.sourceGrids,\n                    parentResponseHandler;\n\n                // Leave only error grid (don't submit information from other grids right now)\n                this.order.sourceGrids = {\n                    'sku_errors': this.skuInstance.errorSourceGrid\n                };\n                // Save old response handler function to override it\n                parentResponseHandler = this.order.loadAreaResponseHandler;\n\n                /**\n                 * @param {Object} response\n                 */\n                this.order.loadAreaResponseHandler = function (response) {\n                    if (!response.errors) {\n                        // If response is empty loadAreaResponseHandler() won't update the area\n                        response.errors = '<span></span>';\n                    }\n                    // call origin response handler function\n                    parentResponseHandler.call(this, response);\n                };\n                this.order.productGridAddSelected('sku');\n                this.order.sourceGrids = oldSourceGrids;\n            };\n\n            /**\n             * @param {Object} params\n             */\n            adminCheckout.prototype.updateErrorGrid = function (params) {\n                var oldLoadingAreas = this.order.loadingAreas,\n                    url;\n\n                // We need to override this field, otherwise layout is going to be broken\n                this.order.loadingAreas = 'errors';\n                url = this.order.loadBaseUrl + 'block/' + this.skuInstance.listType;\n\n                if (!params.json) {\n                    params.json = true;\n                }\n                new Ajax.Request(url, {\n                    parameters: this.order.prepareParams(params),\n                    loaderArea: 'html-body',\n                    onSuccess: function (transport) {\n                        var response = transport.responseText.evalJSON();\n\n                        if (!response.errors) {\n                            // If response is empty loadAreaResponseHandler() won't update the area\n                            response.errors = '<span></span>';\n                        }\n                        this.loadAreaResponseHandler(response);\n                    }.bind(this.order),\n                    onComplete: function () {\n                        this.loadingAreas = oldLoadingAreas;\n                    }.bind(this.order)\n                });\n            };\n\n            /* eslint-disable */\n            /* jscs:disable */\n            // admin sales instance for order creation\n            adminOrder.prototype = new adminSalesInstance(this);\n            adminOrder.prototype.constructor = adminOrder;\n            /**\n             * Admin order.\n             */\n            function adminOrder() {\n                var skuAreaId = this.order.getAreaId('additional_area');\n\n                this.controllerRequestParameterNames = {\n                    customerId: 'customerId', storeId: 'storeId'\n                };\n                this.order.itemsArea.skuButton = new ControlButton(jQuery.mage.__('Add Products By SKU'));\n                this.order.itemsArea.skuButton.onClick = function () {\n                    $(skuAreaId).show();\n                    var el = this;\n                    window.setTimeout(function () {\n                        el.remove();\n                    }, 10);\n                };\n                this.order.itemsArea.onLoad = this.order.itemsArea.onLoad.wrap(function(proceed) {\n                    proceed();\n                    if (!$(skuAreaId).visible()) {\n                        this.addControlButton(this.skuButton);\n                    }\n                });\n                this.order.dataArea.onLoad();\n            }\n\n            /* eslint-enable */\n            /* jscs:enable */\n            /**\n             * Submit configured\n             */\n            adminOrder.prototype.submitConfigured = function () {\n                var area = ['errors', 'search', 'items', 'shipping_method', 'totals', 'giftmessage','billing_method'],\n                    table = $('sku_errors_table'),\n                    elements = table.select('input[type=checkbox][name=sku_errors]:checked'),\n                    fieldsPrepare = {};\n\n                fieldsPrepare['from_error_grid'] = '1';\n                elements.each(function (elem) {\n                    var tr;\n\n                    if (!elem.value || elem.value == 'on') { //eslint-disable-line eqeqeq\n                        return;\n                    }\n                    tr = elem.up('tr');\n\n                    if (tr) {\n                        (function (fieldNames, parent, id) {\n                            var i, el, paramKey;\n\n                            if (typeof fieldNames == 'string') {\n                                fieldNames = [fieldNames];\n                            }\n\n                            for (i = 0; i < fieldNames.length; i++) {\n                                el = parent.select('input[name=' + fieldNames[i] + ']');\n                                paramKey = 'add_by_sku[' + id + '][' + fieldNames[i] + ']';\n\n                                if (el.length) {\n                                    fieldsPrepare[paramKey] = el[0].value;\n                                }\n                            }\n                        })(['qty', 'sku'], tr, elem.value);\n                    }\n                });\n                this.order.productConfigureSubmit('errors', area, fieldsPrepare, this.skuInstance.configuredSkus);\n                this.skuInstance.configuredSkus = [];\n            };\n\n            /**\n             * @param {Object} params\n             */\n            adminOrder.prototype.updateErrorGrid = function (params) {\n                this.order.loadArea('errors', true, params);\n            };\n\n            /**\n             * On submit sku form.\n             */\n            adminOrder.prototype.onSubmitSkuForm = function () {\n                this.order.additionalAreaButton && Element.show(this.order.additionalAreaButton);\n                this.order.itemsArea.addControlButton(this.order.itemsArea.skuButton);\n            };\n\n            // Strategy\n            if (this.order instanceof (window.AdminOrder || Function)) {\n                this._provider = new adminOrder(); //jscs:ignore requireCapitalizedConstructors\n            } else {\n                this._provider = new adminCheckout(); //jscs:ignore requireCapitalizedConstructors\n            }\n            this.controllerRequestParameterNames = this._provider.controllerRequestParameterNames;\n        },\n\n        /**\n         * @param {Object} obj\n         * @return {Boolean}\n         */\n        removeFailedItem: function (obj) {\n            var sku;\n\n            try {\n                sku = obj.up('tr').select('td')[0].select('input[name=\"sku\"]')[0].value;\n                this._provider.updateErrorGrid({\n                    'remove_sku': sku\n                });\n            } catch (e) {\n                return false;\n            }\n        },\n\n        /**\n         * remove all failed.\n         */\n        removeAllFailed: function () {\n            this._provider.updateErrorGrid({\n                'sku_remove_failed': '1'\n            });\n        },\n\n        /**\n         * Submit configured.\n         */\n        submitConfigured: function () {\n            this._provider.submitConfigured();\n        },\n\n        /**\n         * Delete element from queue\n         *\n         * @param {Object} obj - Element to remove\n         */\n        del: function (obj) {\n            var tr = obj.up('tr'),\n                itemId, newElement;\n\n            if ($('id_' + tr.id)) {\n                itemId = $('id_' + tr.id).value;\n                newElement = document.createElement('input');\n                newElement.type = 'hidden';\n                newElement.value = itemId;\n                newElement.name = 'deleteSku[]';\n                $(this.dataContainerId).appendChild(newElement);\n            }\n            tr.remove();\n        },\n\n        /**\n         * Submit selected CSV file (if any)\n         */\n        submitSkuForm: function () {\n            var $form, $file, requestParams, sku, i;\n\n            this._provider.onSubmitSkuForm();\n\n            // Hide 'add by SKU' area on order creation page (not available on manage shopping cart page)\n            this.order.hideArea && this.order.hideArea('additional_area');\n            $form = new Element('form', {\n                'action': this.fileUploadUrl,\n                'method': 'post',\n                'enctype': 'multipart/form-data'\n            });\n\n            $form.insert(new Element('input', {\n                'type': 'hidden',\n                'name': this.fileUploadedParamName,\n                'value': '0'\n            }));\n            $file = Element.select('body', 'input[name=\"' + this.fileFieldName + '\"]')[0];\n\n            if ($file.value) {\n                // Inserting element to other place removes\n                // it from the old one. Creating new file input element on same place\n                // to avoid confusing effect that it has disappeared.\n                $file.up().insert(new Element('input', {\n                    'type': 'file',\n                    'name': this.fileFieldName\n                }));\n                // We need to insert same file input element into the form. Simple copy of name/value doesn't work.\n                $form.insert($file);\n                $form[this.fileUploadedParamName].value = '1';\n            }\n\n            // sku form rows\n            requestParams = {};\n            sku = '';\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            $('sku_table').select('input[type=text]').each(function (elem) {\n                var qty = 0,\n                    paramKey;\n\n                if (elem.name == 'sku') { //eslint-disable-line eqeqeq\n                    sku = elem.value;\n                } else if (elem.name == 'qty') { //eslint-disable-line eqeqeq\n                    qty = elem.value;\n                } else {\n                    return;\n                }\n\n                if (sku != '') { //eslint-disable-line eqeqeq\n                    paramKey = 'add_by_sku[' + sku + '][qty]';\n\n                    if (paramKey in requestParams) {\n                        requestParams[paramKey] = parseNumber(requestParams[paramKey]) + parseNumber(qty);\n                    } else {\n                        requestParams[paramKey] = qty;\n                    }\n                }\n            });\n\n            if (!Object.keys(requestParams).length && !$file.value) {\n                return false;\n            }\n\n            for (i in requestParams) { //eslint-disable-line guard-for-in\n                $form.insert(new Element('input', {\n                    'type': 'hidden',\n                    'name': i,\n                    'value': requestParams[i]\n                }));\n            }\n\n            // general fields\n            $form.insert(new Element('input', {\n                'type': 'hidden',\n                'name': this.controllerRequestParameterNames.customerId,\n                'value': this.order.customerId\n            }));\n            $form.insert(new Element('input', {\n                'type': 'hidden',\n                'name': this.controllerRequestParameterNames.storeId,\n                'value': this.order.storeId\n            }));\n            $form.insert(new Element('input', {\n                'type': 'hidden',\n                'name': 'quote_id',\n                'value': this.order.quoteId\n            }));\n            $form.insert(new Element('input', {\n                'type': 'hidden',\n                'name': 'form_key',\n                'value': FORM_KEY\n            }));\n\n            // For IE we must make the form part of the DOM, otherwise browser refuses to submit it\n            Element.select(document, 'body')[0].insert($form);\n            $form.submit(); //eslint-disable-line jquery-no-input-event-shorthand\n\n            // Show loader\n            jQuery($form).trigger('processStart');\n\n            return true;\n        },\n\n        /**\n         * Configure a product\n         *\n         * @param {*} id - Product ID\n         */\n        configure: function (id, sku) {\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            var productRow = $('sku_errors_table').select('div[id=sku_' + sku + ']')[0],\n                noticeElement = productRow.select('.message-notice'),\n                productQtyElement = productRow.up('tr').select('input[name=qty]')[0],\n                productPriceElement = productRow.up('tr').select('td.col-price')[0];\n\n            if (typeof this.configurableItems[sku] === 'undefined') {\n                this.configurableItems[sku] = id;\n            }\n\n            // Don't process configured element by addBySku() observer method (it won't be serialized by serialize())\n            productConfigure.setConfirmCallback(this.listType, function () {\n                var $qty, $qtyElements, optionPrice, productPrice = productPriceElement.innerText;\n\n                // It is vital to push string element, check this line in configure.js:\n                // this.itemsFilter[listType].indexOf(itemId) != -1\n                productConfigure.skuObject.configuredSkus.push(sku.toString());\n\n                if (noticeElement.length) {\n                    // Remove message saying product requires configuration\n                    noticeElement[0].remove();\n                }\n                $qty = productConfigure.getCurrentConfirmedQtyElement();\n                optionPrice = productConfigure.getCurrentConfirmedSelectElement();\n                // eslint-disable-next-line jquery-no-input-event-shorthand\n                $qtyElements = $('super-product-table') ? $('super-product-table').select('input.qty') : [];\n\n                if (optionPrice.length !== undefined &&\n                    optionPrice[optionPrice.length - 1] !== undefined &&\n                    optionPrice[optionPrice.length - 1].hasAttribute('price')\n                ) {\n                    productPrice = priceUtils.formatPrice(\n                        optionPrice[optionPrice.length - 1].readAttribute('price'),\n                        window.ProductConfigure.spConfig.config.priceFormat\n                    );\n                }\n\n                if ($qty) { // Product set does not have this\n                    // Synchronize qtys between configure window and grid\n                    productQtyElement.value = $qty.value;\n                    productPriceElement.innerText = productPrice;\n                } else if ($(productConfigure.confirmedCurrentId)) {\n                    productQtyElement.value = '';\n                    productPriceElement.value = productPriceElement.innerText;\n\n                    $qtyElements.forEach(function (element) {\n                        if (parseFloat(element.value) > 0) {\n                            productQtyElement.value = 1;\n\n                            return;\n                        }\n                    });\n                }\n            });\n            productConfigure.showItemConfiguration(this.listType, sku);\n            productConfigure.setShowWindowCallback(this.listType, function () {\n                // sync qty of grid and qty of popup\n                var qty = productQtyElement.value,\n                    formCurrentQty;\n\n                if (qty && !isNaN(qty)) {\n                    formCurrentQty = productConfigure.getCurrentFormQtyElement();\n\n                    if (formCurrentQty) {\n                        formCurrentQty.value = qty;\n                    }\n                }\n            });\n        },\n\n        /**\n         * Intercept click on \"Add to cart\" button and submit sku instead of executing original action\n         */\n        observeAddToCart: function () {\n            var that = this;\n\n            this.addToCartButtonEvents = [];\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            $('products_search').select('button.button-to-cart').each(function (button) {\n                var originalOnclick;\n\n                // Save original event\n                that.addToCartButtonEvents[button.id] = button.onclick;\n                originalOnclick = button.onclick;\n\n                /**\n                 * Submit CSV file or perform an original event\n                 */\n                button.onclick = function () {\n                    that.submitSkuForm() || originalOnclick();\n                    that.clearAddForm();\n                };\n            });\n        },\n\n        /**\n         * Return add form to untouched state\n         */\n        clearAddForm: function () {\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            var $rows = $(this.dataContainerId).select('tr'),\n                rowNum = $rows.length,\n                i;\n\n            for (i = 1; i < rowNum; i++) {\n                // Remove all rows except the first\n                $rows[i].remove();\n            }\n            // First row input fields: set empty SKU and qty\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            $rows[0].select('input[name=\"sku\"]')[0].value = '';\n            // eslint-disable-next-line jquery-no-input-event-shorthand\n            $rows[0].select('input[name=\"qty\"]')[0].value = '';\n        },\n\n        /**\n         * Add parameters for error source grid (see adminCheckout.submitConfigured() described in constructor)\n         *\n         * @param {Object} params\n         */\n        addErrorSourceGrid: function (params) {\n            this.errorSourceGrid = params;\n        },\n\n        /**\n         * @param {Object} event\n         * @return {Boolean}\n         */\n        formKeyPress: function (event) {\n            if (event.keyCode == Event.KEY_RETURN) { //eslint-disable-line eqeqeq\n                this.submitSkuForm();\n            }\n\n            return false;\n        }\n    };\n});\n","Magento_AdvancedCheckout/shopping_cart.js":"/**\n * Scripts for admin shopping cart management\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/modal/alert',\n    'jquery',\n    'prototype',\n    'Magento_Catalog/catalog/product/composite/configure'\n], function (alert, jQuery) {\n\nwindow.AdminCheckout = new Class.create();\n\nAdminCheckout.prototype = {\n    initialize: function(data)\n    {\n        this.checkboxes     = $H({});\n        this.loadBaseUrl    = false;\n        this.gridProducts   = $H({});\n        this.quoteAddFields = {};\n        this.sourceGrids    = {};\n\n        this.actionUrls     = data.action_urls ? data.action_urls : {};\n        this.messages       = data.messages ? data.messages : {};\n        this.customerId     = data.customer_id ? data.customer_id : false;\n        this.storeId        = data.store_id ? data.store_id : false;\n        this.currencySymbol = data.currency_symbol ? data.currency_symbol : '';\n        this.productPriceBase = {};\n        this.sourceNoClean  = $H({});\n        jQuery(document).trigger('adminCheckout:inited');\n        jQuery(document).data('adminCheckoutInited', true);\n    },\n\n    getActionUrl: function (action)\n    {\n        return this.actionUrls[action];\n    },\n\n    getMessage: function (id)\n    {\n        return this.messages[id];\n    },\n\n    setLoadBaseUrl : function(url)\n    {\n        this.loadBaseUrl = url;\n    },\n\n    setCurrencySymbol : function(symbol){\n        this.currencySymbol = symbol;\n    },\n\n    onAjaxSuccess: function(transport)\n    {\n        if (transport.responseText.isJSON()) {\n            var response = transport.responseText.evalJSON()\n            if (response.error) {\n                throw response;\n            } else if (response.url) {\n                setLocation(response.url);\n             }\n        }\n    },\n\n    getContext: function(elementName)\n    {\n        return (this.checkboxes.get(elementName) || this.checkboxes.set(elementName, $H({})));\n    },\n\n    resetSource: function()\n    {\n        this.checkboxes =  $H({});\n        $('products_search_accordion').select('input.checkbox').each(function(e) {\n            if (e.checked) {\n                e.checked = false;\n                this.setCheckboxChecked(e, false);\n            }\n        }.bind(this));\n    },\n\n    reloadItems: function(container)\n    {\n        new Ajax.Request(this.getActionUrl('cart'),\n            {\n                onSuccess: function(transport) {\n                    try {\n                        this.onAjaxSuccess(transport);\n                        $('checkout_items').update(transport.responseText);\n                    } catch (e) {\n                        var message = e.error ? e.error : e.message;\n                        alert({\n                            content: message\n                        });\n                    }\n                }.bind(this)\n            });\n    },\n\n    searchProducts: function()\n    {\n        productsGrid.reloadParams = {source: Object.toJSON(this.checkboxes)};\n        productsGrid.doFilter();\n    },\n\n    addToCart: function()\n    {\n        this.productGridAddSelected();\n    },\n\n    updateItems: function(auxiliaryParams)\n    {\n        this.itemsUpdate(auxiliaryParams);\n    },\n\n    applyCoupon: function(ccode)\n    {\n        if (ccode == undefined || !ccode.blank()) {\n            ccode = ccode == undefined ? '' : ccode;\n            new Ajax.Request(this.getActionUrl('applyCoupon'),\n                {\n                    parameters: {code: ccode},\n                    onSuccess: function(transport) {\n                        try {\n                            this.onAjaxSuccess(transport);\n                            this.reloadItems();\n                            $('coupon_container').update(transport.responseText);\n                        } catch (e) {\n                            var message = e.error ? e.error : e.message;\n                            alert({\n                                content: message\n                            });\n                        }\n                    }.bind(this)\n                });\n       }\n    },\n\n    reloadCoupon: function()\n    {\n        new Ajax.Request(this.getActionUrl('coupon'),\n            {\n                onSuccess: function(transport) {\n                    try {\n                        this.onAjaxSuccess(transport);\n                        $('coupon_container').update(transport.responseText);\n                    } catch (e) {\n                        var message = e.error ? e.error : e.message;\n                        alert({\n                            content: message\n                        });\n                    }\n                }.bind(this)\n            });\n    },\n\n    /**\n    * Left for compatibility of js.\n    * Adviced to use productGridRowClick() for more powerful product management.\n    */\n    gridRowClick: function(grid, event)\n    {\n        var trElement = Event.findElement(event, 'tr');\n        var isInput = Event.element(event).tagName.toLowerCase() == 'input';\n        if (trElement) {\n            var checkbox = Element.select(trElement, 'input');\n            if (checkbox[0]) {\n                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\n                grid.setCheckboxChecked(checkbox[0], checked);\n            }\n        }\n    },\n\n    /**\n    * Left for compatibility of js.\n    * Adviced to use productGridCheckboxCheck() for more powerful product management.\n    */\n    gridCheckboxCheck: function(grid, element, checked)\n    {\n        this.setCheckboxChecked(element, checked);\n    },\n\n    setCheckboxChecked: function(element, checked)\n    {\n        if (checked) {\n            var qty = 1;\n            if(element.qty) {\n                element.qty.disabled = false;\n                if (!element.qty.value) {\n                    element.qty.value = 1;\n                }\n                qty = element.qty.value;\n                this.getContext(element.name).set(element.value, qty);\n            }\n        } else {\n            if(element.qty){\n                element.qty.disabled = true;\n            }\n            this.getContext(element.name).unset(element.value);\n        }\n    },\n\n    /**\n     * Left for compatibility of js.\n     * Adviced to use productGridRowInit() for more powerful product management.\n     */\n    gridRowInit: function(grid, row)\n    {\n        var checkbox = $(row).down('input[type=\"checkbox\"]');\n        if(!checkbox) {\n            return;\n        }\n        var context = this.getContext(checkbox.name);\n        var found = false;\n        if (context && context.get(checkbox.value)) {\n            checkbox.checked = true;\n            found = true;\n        }\n        var qty = $(row).down('.input-text');\n        if(!qty) {\n            return;\n        }\n        checkbox.qty = qty;\n        qty.checkboxElement = checkbox;\n        qty.disabled = true;\n        if (found) {\n            qty.disabled = false;\n            qty.value = context.get(checkbox.value);\n        }\n        Event.observe(qty,'keyup', this.qtyChanged.bind(this));\n        Event.observe(qty,'change',this.qtyChanged.bind(this));\n    },\n\n    qtyChanged : function(event){\n        var element = Event.element(event);\n        if (element && element.checkboxElement && element.checkboxElement.checked){\n            this.getContext(element.checkboxElement.name).set(element.checkboxElement.value, element.value);\n        }\n    },\n\n    serializeData: function(container)\n    {\n        var fields = $(container).select('input', 'select');\n        var data = Form.serializeElements(fields, true);\n        return $H(data);\n    },\n\n    prepareParams : function(params){\n        if (!params) {\n            params = {};\n        }\n        if (!params.customer) {\n            params.customer = this.customerId;\n        }\n        if (!params.store) {\n            params.store = this.storeId;\n        }\n        if (!params.form_key) {\n            params.form_key = FORM_KEY;\n        }\n\n        return params;\n    },\n\n    addSourceGrid: function (info) {\n        this.sourceGrids[info.htmlId] = info;\n        this.saveDefaultQtysInSource(info.htmlId);\n    },\n\n    productConfigureSubmit: function(listType, area, fieldsPrepare, itemsFilter) {\n        // prepare loading areas and build url\n        this.loadingAreas = area;\n        var url = this.loadBaseUrl + 'block/' + area + '?isAjax=true';\n\n        // prepare additional fields\n        fieldsPrepare = this.prepareParams(fieldsPrepare);\n        fieldsPrepare.json = 1;\n\n        // create fields\n        var fields = [];\n        for (var name in fieldsPrepare) {\n            fields.push(new Element('input', {type: 'hidden', name: name, value: fieldsPrepare[name]}));\n        }\n        productConfigure.addFields(fields);\n\n        // filter items\n        productConfigure.itemsFilter = $H({});\n        if (itemsFilter) {\n            if (itemsFilter instanceof Hash) {\n                itemsFilter.each(function (item) {\n                    productConfigure.addItemsFilter(item.key, item.value);\n                });\n            } else {\n                productConfigure.addItemsFilter(listType, itemsFilter);\n            }\n        }\n\n        // configure and run submitting\n        if (listType instanceof Array) {\n            var clearSources = true;\n            var listType = productConfigure.addComplexListType(listType, url);\n        } else {\n            var clearSources = false;\n            productConfigure.addListType(listType, {urlSubmit: url});\n        }\n        productConfigure.setOnLoadIFrameCallback(listType, function(response) {\n            if (clearSources) {\n                this.loadAreaResponseHandler(response);\n                this.clearSources();\n            } else {\n                setLocation(window.location.href);\n            }\n        }.bind(this));\n\n        productConfigure.submit(listType);\n    },\n\n    productGridAddSelected: function (additionalFields) {\n        if (!additionalFields) {\n            additionalFields = [];\n        }\n        if (typeof additionalFields == 'string') {\n            additionalFields = [additionalFields];\n        }\n        // Scan through all grids and add checked products them to submitted list types\n        var sources = $H({});\n        for (var sourceId in this.sourceGrids) {\n            var table = $(sourceId + '_table');\n            if (!table) {\n                continue;\n            }\n\n            var items = [];\n            var elements = table.select('input[type=checkbox][name=' + sourceId + ']:checked');\n            if (!elements.length) {\n                // Try to get another type of inputs: maybe it's a dynamic table?\n                elements = table.select('input[type=text][name=' + sourceId + ']');\n            }\n            elements.each(function (elem) {\n                if (!elem.value || (elem.value == 'on')) {\n                    return;\n                }\n                var itemInfo = {};\n                itemInfo.id = elem.value;\n\n                var tr = elem.up('tr');\n                if (tr) {\n                    var qty = tr.select('input[name=qty]');\n                    if (qty.length) {\n                        itemInfo.qty = qty[0].value;\n                    }\n                    for (var i = 0; i < additionalFields.length; i++) {\n                        var field = tr.select('input[name=\"' + additionalFields[i] + '\"]');\n                        if (field.length) {\n                            itemInfo[additionalFields[i]] = field[0].value;\n                        }\n                    }\n                }\n\n                items.push(itemInfo);\n            });\n\n            if (!items.length) {\n                continue;\n            }\n            sources.set(sourceId, items);\n        }\n        if (!sources.values().length) {\n            alert({\n                content: this.getMessage('chooseProducts')\n            });\n\n            return;\n        }\n\n        // Prepare additional fields and filtered items\n        var fieldsPrepare = {};\n        var itemsFilter = $H({});\n        var listTypes = [];\n        sources.each(function (item) {\n            var sourceId = item.key;\n            var items = item.value;\n            var sourceGrid = this.sourceGrids[sourceId];\n            var listType = sourceGrid.listType;\n\n            var itemIds = [];\n            for (var i = 0, len = items.length; i < len; i++) {\n                var item = items[i];\n                itemIds.push(item.id);\n\n                var paramKey = 'list[' + listType + '][item][' + item.id + '][qty]';\n                fieldsPrepare[paramKey] = item.qty;\n                for (var j = 0; j < additionalFields.length; j++) {\n                    var fieldName = additionalFields[j];\n                    paramKey = 'list[' + listType + '][item][' + item.id + '][' + fieldName + ']';\n                    fieldsPrepare[paramKey] = item[fieldName] ? item[fieldName] : '';\n                }\n\n                if (!productConfigure.itemConfigured(listType, item.id)) {\n                    var paramKey = 'list[' + listType + '][item][' + item.id + '][_config_absent]';\n                    fieldsPrepare[paramKey] = 1;\n                }\n            }\n            itemsFilter.set(listType, itemIds);\n\n            listTypes.push(listType);\n        }.bind(this));\n        this.productConfigureSubmit(listTypes, ['items', 'errors'], fieldsPrepare, itemsFilter);\n    },\n\n    productGridRowClick: function(grid, event){\n        var trElement = Event.findElement(event, 'tr');\n        var qtyElement = trElement.select('input[name=\"qty\"]')[0];\n        var eventElement = Event.element(event);\n        var isInputCheckbox = eventElement.tagName == 'INPUT' && eventElement.type == 'checkbox';\n        var isInputQty = eventElement.tagName == 'INPUT' && eventElement.name == 'qty';\n        if (trElement && !isInputQty) {\n            var checkbox = Element.select(trElement, 'input[type=\"checkbox\"]')[0];\n            var confLink = Element.select(trElement, 'a')[0];\n            var priceCol = Element.select(trElement, '.price')[0];\n            if (checkbox) {\n                // processing non composite product\n                if (confLink.readAttribute('disabled')) {\n                    var checked = isInputCheckbox ? checkbox.checked : !checkbox.checked;\n                    grid.setCheckboxChecked(checkbox, checked);\n                // processing composite product\n                } else if (isInputCheckbox && !checkbox.checked) {\n                    grid.setCheckboxChecked(checkbox, false);\n                // processing composite product\n                } else if (!isInputCheckbox || (isInputCheckbox && checkbox.checked)) {\n                    var listType = confLink.readAttribute('list_type');\n                    var itemId = confLink.readAttribute('item_id');\n                    if (!itemId) {\n                        itemId = confLink.readAttribute('product_id');\n                    }\n                    if (typeof this.productPriceBase[itemId] == 'undefined') {\n                        var priceBase = 0;\n                        if( (typeof priceCol != 'undefined') && (priceCol)) {\n                            priceBase = priceCol.innerHTML.match(/.*?([0-9\\.,]+)/);\n                        }\n                        if (priceBase && (priceBase.length >= 1)) {\n                            priceBase = priceBase[1].replace(/,/g, '');\n                        } else {\n                            priceBase = 0;\n                        }\n                        if (!priceBase) {\n                            this.productPriceBase[itemId] = 0;\n                        } else {\n                            this.productPriceBase[itemId] = parseFloat(priceBase);\n                        }\n                    }\n                    productConfigure.setConfirmCallback(listType, function() {\n                        // sync qty of popup and qty of grid\n                        var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                        if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                            qtyElement.value = confirmedCurrentQty.value;\n                        }\n                        // calc and set product price\n                        var productPrice = parseFloat(this._calcProductPrice() + this.productPriceBase[itemId]);\n                        if(typeof priceCol != 'undefined' && priceCol) {\n                            priceCol.innerHTML = this.currencySymbol + (+(Math.round(productPrice + \"e+2\") + \"e-2\")).toFixed(2);\n                        }\n                        // and set checkbox checked\n                        grid.setCheckboxChecked(checkbox, true);\n                    }.bind(this));\n                    productConfigure.setCancelCallback(listType, function() {\n                        if (!$(productConfigure.confirmedCurrentId) || !$(productConfigure.confirmedCurrentId).innerHTML) {\n                            grid.setCheckboxChecked(checkbox, false);\n                        }\n                    });\n                    productConfigure.setShowWindowCallback(listType, function() {\n                        // sync qty of grid and qty of popup\n                        var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                        if (formCurrentQty && qtyElement && (qtyElement.value != '') && !isNaN(qtyElement.value)) {\n                            var value = qtyElement.value;\n                            if (value == '0') {\n                                value = 1;\n                            }\n                            formCurrentQty.value = value;\n                        }\n                    }.bind(this));\n                    productConfigure.showItemConfiguration(listType, itemId);\n                }\n            }\n        }\n    },\n\n    /**\n     * Calc product price through its options\n     */\n    _calcProductPrice: function () {\n        var productPrice = 0;\n        var optQty = 1;\n        var getPriceFields = function (elms) {\n            var productPrice = 0;\n            var getPrice = function (elm) {\n                var optQty = 1;\n                if (elm.hasAttribute('qtyId')) {\n                    if (!$(elm.getAttribute('qtyId')).value) {\n                        return 0;\n                    } else {\n                        optQty = parseFloat($(elm.getAttribute('qtyId')).value);\n                    }\n                }\n                if (elm.hasAttribute('price') && !elm.disabled) {\n                    return parseFloat(elm.readAttribute('price')) * optQty;\n                }\n                return 0;\n            };\n            for(var i = 0; i < elms.length; i++) {\n                if (elms[i].type == 'select-one' || elms[i].type == 'select-multiple') {\n                    for(var ii = 0; ii < elms[i].options.length; ii++) {\n                        if (elms[i].options[ii].selected) {\n                            productPrice += getPrice(elms[i].options[ii]);\n                        }\n                    }\n                }\n                else if (((elms[i].type == 'checkbox' || elms[i].type == 'radio') && elms[i].checked)\n                        || ((elms[i].type == 'file' || elms[i].type == 'text' || elms[i].type == 'textarea' || elms[i].type == 'hidden')\n                            && Form.Element.getValue(elms[i]))\n                ) {\n                    productPrice += getPrice(elms[i]);\n                }\n            }\n            return productPrice;\n        }.bind(this);\n        productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('input'));\n        productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('select'));\n        productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('textarea'));\n        return productPrice;\n    },\n\n    productGridRowInit : function(grid, row){\n        var checkbox = $(row).select('.checkbox')[0];\n        var inputs = $(row).select('.input-text');\n        if (checkbox && inputs.length > 0) {\n            checkbox.inputElements = inputs;\n            for (var i = 0; i < inputs.length; i++) {\n                var input = inputs[i];\n                input.checkboxElement = checkbox;\n\n                var product = this.gridProducts.get(checkbox.value);\n                if (product) {\n                    var defaultValue = product[input.name];\n                    if (defaultValue) {\n                        if (input.name == 'giftmessage') {\n                            input.checked = true;\n                        } else {\n                            input.value = defaultValue;\n                        }\n                    }\n                }\n\n                input.disabled = !checkbox.checked || input.hasClassName('input-inactive');\n\n                Event.observe(input,'keyup', this.productGridRowInputChange.bind(this));\n                Event.observe(input,'change',this.productGridRowInputChange.bind(this));\n            }\n        }\n    },\n\n    productGridRowInputChange : function(event){\n        var element = Event.element(event);\n        if (element && element.checkboxElement && element.checkboxElement.checked){\n            if (element.name!='giftmessage' || element.checked) {\n                this.gridProducts.get(element.checkboxElement.value)[element.name] = element.value;\n            } else if (element.name=='giftmessage' && this.gridProducts.get(element.checkboxElement.value)[element.name]) {\n                delete(this.gridProducts.get(element.checkboxElement.value)[element.name]);\n            }\n        }\n    },\n\n    productGridCheckboxCheck : function(grid, element, checked){\n        if (checked) {\n            if (element.inputElements) {\n                this.gridProducts.set(element.value, {});\n                var product = this.gridProducts.get(element.value);\n                for (var i = 0; i < element.inputElements.length; i++) {\n                    var input = element.inputElements[i];\n                    if (!input.hasClassName('input-inactive')) {\n                        input.disabled = false;\n                        if (input.name == 'qty' && !input.value) {\n                            input.value = 1;\n                        }\n                    }\n\n                    if (input.checked || input.name != 'giftmessage') {\n                        product[input.name] = input.value;\n                    } else if (product[input.name]) {\n                        delete(product[input.name]);\n                    }\n                }\n            }\n        } else {\n            if (element.inputElements) {\n                for(var i = 0; i < element.inputElements.length; i++) {\n                    element.inputElements[i].disabled = true;\n                }\n            }\n            this.gridProducts.unset(element.value);\n        }\n        grid.reloadParams = {'products[]':this.gridProducts.keys()};\n    },\n\n    loadAreaResponseHandler : function (response){\n        if (response.error) {\n            alert({\n                content: response.message\n            });\n        }\n        if(response.ajaxExpired && response.ajaxRedirect) {\n            setLocation(response.ajaxRedirect);\n        }\n        if (!this.loadingAreas) {\n            this.loadingAreas = [];\n        }\n        if (typeof this.loadingAreas == 'string') {\n            this.loadingAreas = [this.loadingAreas];\n        }\n        if (this.loadingAreas.indexOf('message') == -1) {\n            this.loadingAreas.push('message');\n        }\n        for (var i=0; i < this.loadingAreas.length; i++) {\n            var id = this.loadingAreas[i];\n            if($(this.getAreaId(id))) {\n                if ('message' == id || response[id]) {\n                    $(this.getAreaId(id)).update(response[id] ? response[id] : '');\n                }\n            }\n        }\n    },\n\n    getAreaId : function(area){\n        return 'checkout_' + area;\n    },\n\n    itemsUpdate : function(auxiliaryParams) {\n        var area = ['items'];\n        // prepare additional fields\n        var fieldsPrepare = {update_items: 1};\n        var info = $('order-items_grid').select('input', 'select', 'textarea');\n        for (var i = 0; i < info.length; i++) {\n            if(!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\n                fieldsPrepare[info[i].name] = info[i].getValue();\n            }\n        }\n        if (auxiliaryParams instanceof Object) {\n            for (var paramName in auxiliaryParams) {\n                fieldsPrepare[paramName] = String(auxiliaryParams[paramName]);\n            }\n        }\n        fieldsPrepare = Object.extend(fieldsPrepare, this.quoteAddFields);\n        this.productConfigureSubmit('checkoutItemsGrid', area, fieldsPrepare);\n        this.quoteAddFields = {};\n    },\n\n    showQuoteItemConfiguration: function(itemId){\n        var listType    = 'checkoutItemsGrid';\n        var qtyElement  = $('order-items_grid').select('input[name=\"item\\['+itemId+'\\]\\[qty\\]\"]')[0];\n        productConfigure.setConfirmCallback(listType, function() {\n            // sync qty of popup and qty of grid\n            var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n            if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                qtyElement.value = confirmedCurrentQty.value;\n            }\n            this.quoteAddFields['item['+itemId+'][configured]'] = 1;\n        }.bind(this));\n\n        productConfigure.setShowWindowCallback(listType, function() {\n            // sync qty of grid and qty of popup\n            var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n            if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                formCurrentQty.value = qtyElement.value;\n            }\n        }.bind(this));\n\n        checkoutItemsGridcartControl.configureItem(itemId);\n    },\n\n    clearSources: function () {\n        for (var sourceId in this.sourceGrids) {\n            if (this.sourceNoClean.get(sourceId)) {\n                continue;\n            }\n            var sourceGrid = this.sourceGrids[sourceId];\n            var table = $(sourceId + '_table');\n            if (!table) {\n                continue;\n            }\n\n            var items = [];\n            table.select('input[type=checkbox][name=' + sourceId + ']').each(function(elem) {\n                elem.checked = false;\n            });\n\n            table.select('input[type=text][name=qty]').each(function(elem) {\n                elem.value = elem.defaultValue || '';\n            });\n        }\n    },\n\n    saveDefaultQtysInSource: function (sourceId) {\n        var sourceGrid = this.sourceGrids[sourceId];\n        var table = $(sourceId + '_table');\n        if (!table) {\n            return;\n        }\n\n        table.select('input[type=text][name=qty]').each(function(elem) {\n            elem.defaultValue = elem.value;\n        });\n    },\n\n    /**\n     * Prevents grid inputs to be cleared after successful submission\n     * @param sourceId\n     */\n    addNoCleanSource: function (sourceId)\n    {\n        this.sourceNoClean.set(sourceId, true);\n    }\n};\n\n});\n","Magento_AdvancedCheckout/js/sku/order-errors.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery'\n], function (Component, $) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            failedItems: '[data-role=\"message-notice\"]',\n            skuAttentionNum: '#sku-attention-num',\n            actionPrimary: '[data-role=\"action\"]',\n            errorMessage: '[data-role=\"error-title\"]'\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            this._super();\n            $(this.actionPrimary).on('click', this.updateErrorMessage.bind(this));\n        },\n\n        /**\n         * Updates count of errors or remove the error message\n         */\n        updateErrorMessage: function () {\n            var length = $(this.failedItems).length;\n\n            if (length) {\n                $(this.skuAttentionNum).html(length);\n            } else {\n                $(this.errorMessage).remove();\n            }\n        }\n    });\n});\n","Magento_InventoryAdminUi/js/form/element/region.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/region'\n], function (Region) {\n    'use strict';\n\n    return Region.extend({\n        defaults: {\n            regionScope: 'data.general.region'\n        },\n\n        /**\n         * Set region to source form\n         *\n         * @param {String} value - region\n         */\n        setDifferedFromDefault: function (value) {\n            this._super();\n\n            if (parseFloat(value)) {\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\n            }\n        }\n    });\n});\n","Magento_InventoryAdminUi/js/stock/grid/cell/assigned-sources.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventoryAdminUi/stock/grid/cell/assigned-sources-cell.html',\n            itemsToDisplay: 5\n        },\n\n        /**\n         *\n         * @param {Array} record\n         * @returns {Array}\n         */\n        getTooltipData: function (record) {\n            return record[this.index].map(function (source) {\n                return {\n                    sourceCode: source.sourceCode,\n                    name: source.name\n                };\n            });\n        },\n\n        /**\n         * @param {Object} record - Record object\n         * @returns {Array} Result array\n         */\n        getSourcesAssignedToStockOrderedByPriority: function (record) {\n            return this.getTooltipData(record).slice(0, this.itemsToDisplay);\n        }\n    });\n});\n","Magento_InventoryAdminUi/js/stock/grid/dynamic-rows/assigned-sources.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid'\n], function (_, dynamicRowsGrid) {\n    'use strict';\n\n    return dynamicRowsGrid.extend({\n        defaults: {\n            cacheGridDataIndex: []\n        },\n\n        /**\n         * Performance optimization of setting initial property to records data of only first page\n         *\n         * @returns {Object} Chainable.\n         */\n        setInitialProperty: function () {\n            var startIndex,\n                stopIndex;\n\n            if (_.isArray(this.recordData())) {\n                startIndex = (~~this.currentPage() - 1) * this.pageSize;\n                stopIndex = startIndex + parseInt(this.pageSize, 10);\n                this.recordData.each(function (data, index) {\n                    if (index < stopIndex) {\n                        this.source.set(this.dataScope + '.' + this.index + '.' + index + '.initialize', true);\n                    }\n                }, this);\n            }\n\n            return this;\n        },\n\n        /**\n         * Performance optimization of checking changed records\n         * skip when checks are not necessary\n         *\n         * @param {Array} data - array with records data\n         * @returns {Array} Changed records\n         */\n        _checkGridData: function (data) {\n            var cacheLength = this.cacheGridData.length,\n                curData = data.length,\n                changes = [],\n                dataIndex = [],\n                changesIndex = [];\n\n            if (cacheLength === curData || cacheLength > curData) {\n                return [];\n            }\n\n            if (!cacheLength) {\n                return data;\n            }\n            data.forEach(function (record, index) {\n                dataIndex[index] = record[this.map[this.identificationDRProperty]];\n            }, this);\n            changesIndex = _.difference(dataIndex, this.cacheGridDataIndex);\n            changesIndex.forEach(function (changeIndex) {\n                data.forEach(function (record, index) {\n                    if (changeIndex === record[this.map[this.identificationDRProperty]]) {\n                        changes.push(data[index]);\n                    }\n                }, this);\n            }, this);\n\n            return changes;\n        },\n\n        /**\n         * Performance optimization of processing insert data\n         *\n         * @param {Object} data\n         */\n        processingInsertData: function (data) {\n            this._super(data);\n            data.forEach(function (record, index) {\n                this.cacheGridDataIndex[index] = record[this.map[this.identificationDRProperty]];\n            }, this);\n        }\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/attribute/edit/inventory/toggle/toggle-editability-all.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    $('[data-role=toggle-editability-all]').on('change', function () {\n        var toggler = $(this),\n            field = toggler.parents('.field'),\n            someEditable = $('input[type!=\"checkbox\"], select, textarea', field),\n            someEditableCheckboxes = $('input[type=\"checkbox\"]', field).not(toggler);\n\n        if (someEditableCheckboxes.length) {\n            someEditable.prop('disabled', !toggler.prop('checked') || someEditableCheckboxes.prop('checked'));\n            someEditableCheckboxes.prop('disabled', !toggler.prop('checked'));\n        } else {\n            someEditable.prop('disabled', !toggler.prop('checked'));\n        }\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/attribute/edit/inventory/toggle/toggle-editability.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    $('[data-role=toggle-editability]').on('change', function () {\n        var useConfigSettings = $(this),\n            field = useConfigSettings.parents('.field'),\n            someEditable = $('input[type!=\"checkbox\"], select, textarea', field);\n\n        someEditable.prop('disabled', useConfigSettings.prop('checked'));\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/form/qty.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_CatalogInventory/js/components/qty-validator-changer'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            links: {\n                value: false\n            }\n        },\n\n        /** @inheritdoc */\n        getInitialValue: function () {\n            var values = [this.source.get(this.dataScope), this.default],\n                value;\n\n            values.some(function (v) {\n                if (v !== null && v !== undefined) {\n                    value = v;\n\n                    return true;\n                }\n\n                return false;\n            });\n\n            return this.normalizeData(value);\n        },\n\n        /** @inheritdoc */\n        setDifferedFromDefault: function () {\n            var initialValue;\n\n            this._super();\n            initialValue = this.source.data.product['current_product_id'] !== null ? this.initialValue : 0;\n\n            if (this.value() &&\n                parseFloat(initialValue) !== parseFloat(this.value())\n            ) {\n                this.source.set(this.dataScope, this.value());\n            } else {\n                this.source.remove(this.dataScope);\n            }\n        }\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/form/source-items.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/fieldset',\n    'uiRegistry',\n    'underscore'\n], function (Fieldset, registry, _) {\n    'use strict';\n\n    return Fieldset.extend({\n        defaults: {\n            advancedInventoryButtonIndex: '',\n            imports: {\n                onStockChange: '${ $.provider }:data.product.stock_data.manage_stock'\n            }\n        },\n\n        /**\n         * \"Advanced Inventory\" button should stay active in any case.\n         *\n         * @param {Integer} canManageStock\n         */\n        onStockChange: function (canManageStock) {\n            var advancedInventoryButton = registry.get('index = ' + this.advancedInventoryButtonIndex);\n\n            if (canManageStock === 0) {\n                if (!_.isUndefined(advancedInventoryButton)) {\n                    advancedInventoryButton.disabled(false);\n                }\n            }\n        }\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/form/stock-status.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            links: {\n                linkedValue: false\n            }\n        },\n\n        /** @inheritdoc */\n        getInitialValue: function () {\n            var values = [this.source.get(this.dataScope), this.default],\n                value;\n\n            values.some(function (v) {\n                if (v !== null && v !== undefined) {\n                    value = v;\n\n                    return true;\n                }\n\n                return false;\n            });\n\n            return this.normalizeData(value);\n        },\n\n        /** @inheritdoc */\n        setDifferedFromDefault: function () {\n            this._super();\n\n            if (parseFloat(this.initialValue) !== parseFloat(this.value())) {\n                this.source.set(this.dataScope, this.value());\n            } else {\n                this.source.remove(this.dataScope);\n            }\n        }\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/form/sources/qty.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_CatalogInventory/js/components/qty-validator-changer'\n], function (Validator) {\n    'use strict';\n\n    return Validator.extend({\n\n        /**\n         * Set default value for source quantity, depends on 'Use Decimal\" value.\n         *\n         * @param {Integer} isDecimal\n         * @returns void\n         */\n        setDefaultValue: function (isDecimal) {\n            if (!this.value()) {\n                isDecimal ? this.value('0.0') : this.value('0');\n            }\n        }\n    });\n});\n","Magento_InventoryCatalogAdminUi/js/product/grid/cell/quantity-per-source.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventoryCatalogAdminUi/product/grid/cell/source-items.html',\n            itemsToDisplay: 5\n        },\n\n        /**\n         * Get source items data (source name and qty)\n         *\n         * @param {Object} record - Record object\n         * @returns {Array} Result array\n         */\n        getSourceItemsData: function (record) {\n            return record[this.index] ? record[this.index] : [];\n        },\n\n        /**\n         * @param {Object} record - Record object\n         * @returns {Array} Result array\n         */\n        getSourceItemsDataCut: function (record) {\n            return this.getSourceItemsData(record).slice(0, this.itemsToDisplay);\n        }\n    });\n});\n","Magento_Rma/details-validator.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n(function (factory) {\n    'use strict';\n\n    if (typeof define !== 'undefined' && define.amd) {\n        define([\n            'jquery',\n            'mage/backend/validation',\n            'mage/mage',\n            'mage/translate',\n            'Magento_Rma/rma'\n        ], factory);\n    } else {\n        factory(jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    var rma = window.rma;\n\n    if (rma === undefined) {\n        return;\n    }\n\n    /* eslint-disable max-nested-callbacks */\n    rma.addLoadProductsCallback(function () {\n        $('[class^=\"rma-action-links-\"]').each(function (el, val) {\n            var className = false;\n\n            $(val).attr('class').split(' ').each(function (element) {\n                if (element.search(/rma-action-links-/i) !== -1) {\n                    className = element;\n                }\n            });\n            $.validator.addMethod(\n                className,\n                function (v, elem) {\n                    var isValid = true,\n                        columnId = $(elem).parents().children('[id^=itemDiv_]').attr('id');\n\n                    $('#' + columnId).find('.mage-error').each(function (element, value) {\n                        if ($(value).css('display') != 'none') { //eslint-disable-line eqeqeq\n                            isValid = false;\n                        }\n                    });\n\n                    return isValid;\n                },\n                $.mage.__('Click Details for more required fields.')\n            );\n        });\n    });\n\n    /* eslint-enable max-nested-callbacks */\n}));\n","Magento_Rma/rma.js":"/**\n * Rma controls for admin area\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    \"mage/translate\",\n    \"jquery\",\n    \"prototype\",\n    \"Magento_Shipping/order/packaging\",\n    \"Magento_Rma/validation\",\n    \"Magento_Ui/js/modal/modal\"\n], function($t,jQuery){\n\nwindow.AdminRma = new Class.create();\n\nAdminRma.prototype = {\n    initialize : function(data){\n        this.newRmaItemId           = 0;\n        this.loadAttributesUrl      = false;\n        this.loadBundleUrl          = false;\n        this.loadOrderId            = false;\n        this.loadSplitLineUrl       = false;\n        this.loadShippingMethodsUrl = false;\n        this.loadPslUrl             = false;\n        this.deleteLineLabel        = false;\n        this.windowMask             = $('popup-window-mask');\n        this.bundleArray            = {};\n        this.formId                 = false;\n        this.shippingMethod         = false;\n        this.gridProducts           = $H({});\n        this.grid                   = false;\n        this.itemDivPrefix          = 'itemDiv_';\n        this.formKey                = false;\n        this.loadProductsCallback = function () {};\n    },\n\n    addLoadProductsCallback: function (func) {\n        this.loadProductsCallback = func;\n    },\n\n    callLoadProductsCallback: function () {\n        this.loadProductsCallback();\n    },\n\n    getItemDivPrefix: function() {\n        return this.itemDivPrefix\n    },\n\n    getRowIdByClick: function(event) {\n        var trElement = $(event.srcElement) == undefined ? Event.findElement(event, 'tr')\n            : $(event.srcElement).up('tr');\n        this.formId = trElement.up('form').id;\n        return trElement.down('input.rowId').value;\n    },\n\n    itemDetailsRowClick: function(event, forceDivId){\n        var divId, itemId;\n        if (typeof event === 'string') {\n            divId = event;\n            event = forceDivId;\n        } else {\n            itemId = this.getRowIdByClick(event);\n            divId = this.getItemDivPrefix() + itemId;\n        }\n\n        if (event.target && event.target.getAttribute('disabled')) {\n            event.stopPropagation;\n            return;\n        }\n        if (!$(divId)) {\n            this.getAjaxData(itemId);\n        } else {\n            this.initDetails(event.currentTarget, divId);\n            this.showPopup(divId);\n        }\n    },\n\n    itemReasonOtherRowClick: function(event){\n        var divId = 'rma_reason_container';\n        var itemId = this.getRowIdByClick(event);\n        $$('input[type=\"hidden\"]').each(function(element){\n            if (element.name == 'items[' + itemId + '][reason_other]') {\n                $(divId).down('div#rma_reason_content').innerHTML = element.value.escapeHTML();\n            }\n        });\n\n        jQuery('#' + divId).modal({\n                type: 'popup',\n                title: $t(\"Reason to Return\")\n            }\n        );\n        this.showPopup(divId);\n    },\n\n    getLoadAttributesLink: function(itemId) {\n        return this.loadAttributesUrl + 'item_id/' + itemId + '?isAjax=true';\n    },\n\n    nameTransformation: function(element, itemId) {\n        //We must provide the following transformation\n        //name  -> item[9][name]\n        //name[key]  ->  item[9][name][key]\n        var arrayDivider = element.name.indexOf('[');\n        if (arrayDivider == -1) {\n            arrayDivider = element.name.length;\n        }\n\n        return 'items[' + itemId + '][' + element.name.slice(0,arrayDivider) + ']' + element.name.slice(arrayDivider);\n    },\n\n    getAjaxData : function(itemId, notShowPopUp) {\n        var url = this.getLoadAttributesLink(itemId);\n\n        new Ajax.Request(url, {\n            method: 'get',\n            onSuccess: function(transport) {\n                var response = transport.responseText;\n                var divId = this.getItemDivPrefix() + itemId;\n                this.addPopupDiv(response, divId, itemId, notShowPopUp);\n                var realThis = this;\n                $(divId).descendants().each(function(element){\n                    if ((element.tagName.toLowerCase() == 'input') || (element.tagName.toLowerCase() == 'select') || (element.tagName.toLowerCase() == 'textarea')) {\n                        if ((element.tagName.toLowerCase() == 'input') && (element.type == 'file')) {\n                            element.name = element.name + '_' + itemId;\n                        } else {\n                            element.name = realThis.nameTransformation(element, itemId);\n                        }\n                    }\n                });\n\n                this.addPopupDivButtonsBindings(divId);\n                if (!notShowPopUp) {\n                    this.showPopup(divId);\n                }\n            }.bind(this)\n        });\n    },\n\n    addPopupDiv: function(response, divId, itemId, notShowPopUp) {\n        var parentTd = $('h' + itemId) ? $('h' + itemId).up('td') : $('id_' + itemId).childElements().last();\n        var elem = new Element('div', {id: divId}).update(response);\n        var wrapper = new Element('div');\n\n        parentTd.insert({\n            top: wrapper.addClassName('rma-popup-wrapper')\n        });\n        parentTd.insert({\n            top: elem.addClassName('rma-popup')\n        });\n        if (notShowPopUp) {\n            this.hidePopups();\n        }\n    },\n\n    addPopupDivButtonsBindings: function(divId) {\n        Event.observe($(divId).down('button.ok_button'), 'click', this.okButtonClick.bind(this, divId));\n        Event.observe($(divId).down('button.cancel_button'), 'click', this.cancelButtonClick.bind(this));\n    },\n\n    okButtonClick: function(divId) {\n        var itemId = divId.replace(this.getItemDivPrefix(), ''),\n            parentTd = $('h' + itemId) ? $('h' + itemId).up('td') : $('id_'+itemId).childElements().last();\n\n        parentTd.descendants().each(function(element) {\n            if (element.hasClassName('attrsValues')) {\n                element.remove()\n            }\n        })\n        this.hidePopups();\n    },\n\n    cancelButtonClick: function(itemId) {\n        this.hidePopups();\n    },\n\n    showPopup: function(divId) {\n        jQuery('#' + divId).modal('openModal');\n    },\n\n    /**\n     * Init modal object if wasn't be initialized before.\n     * @param {Object} targetElement\n     * @param {String} divId\n     */\n    initDetails: function (targetElement, divId) {\n        var buttonsBlock, buttons, button, options, isSubFormValid;\n        var popupBlock = jQuery('#' + divId);\n        var parentBlock = jQuery(targetElement).parent('td');\n\n        if (!parentBlock.find('.rma_form_rma_item_details_modal').length) {\n            popupBlock.find('.popup-window-title').hide();\n            buttonsBlock = popupBlock.find('.popup-window-buttons-set').first();\n            buttonsBlock.hide();\n            buttons = [];\n\n            buttonsBlock.find('button').each(function () {\n                button = jQuery(this);\n\n                if (button.hasClass('ok_button')) {\n                    buttons.push({\n                        text: button.find('span').first().html(),\n                        'class': 'action-primary',\n\n                        /**\n                         * Define actions on click\n                         */\n                        click: function () {\n                            isSubFormValid = true;\n                            popupBlock.find('[class*=\"admin__control-\"]')\n                                .each(function () {\n                                    isSubFormValid = jQuery.validator.validateSingleElement(this) && isSubFormValid;\n                                });\n\n                            if (isSubFormValid) {\n                                this.closeModal();\n                            }\n                        }\n                    });\n                } else if (button.hasClass('cancel_button')) {\n                    buttons.push({\n                        text: button.find('span').first().html(),\n                        'class': 'action-secondary',\n\n                        /**\n                         * Define actions on click\n                         */\n                        click: function () {\n                            popupBlock.find('[class*=\"admin__control-\"]').each(function () {\n                                jQuery(this).val(null);\n                            });\n                            this.closeModal();\n                        }\n                    });\n                }\n            });\n\n            options = {\n                type: 'popup',\n                title: popupBlock.find('.popup-window-title .title').first().html(),\n                modalClass: 'rma_form_rma_item_details_modal',\n                buttons: buttons,\n                appendTo: parentBlock.find('.rma-popup-wrapper')\n            };\n\n            popupBlock.modal(options);\n        }\n    },\n\n    hidePopups: function() {\n        $$('.rma-popup input[type=checkbox]').each(function(checkbox) {\n            checkbox.removeAttribute('checked');\n        });\n        $$('.rma-popup [name=items_selector]').each(function(input) {\n            input.checked = false;\n        });\n        if ($('details_container')) {\n            $('details_container').childElements().each(Element.hide);\n        }\n        $$('.rma-popup').each(Element.hide);\n        $('popup-window-mask').hide();\n    },\n\n    itemSplitLineRowClick : function(event) {\n        var itemId = this.getRowIdByClick(event),\n            url = this.loadSplitLineUrl + 'item_id/' + itemId + '?isAjax=true',\n            divId = 'grid_result_' + itemId;\n\n        if ($(divId)) {\n            this.splitLine(this, divId, itemId)\n        } else {\n            new Ajax.Request(url, {\n                onSuccess: function(transport) {\n                    var response = transport.responseText;\n                    $('details_container').insert({\n                        top: new Element('div', {id: divId, style: 'display:none'}).update(response)\n                    });\n                    $(divId).select('input[type=\"file\"]').each(function(file) {\n                        file.name = file.name + '_' + itemId;\n                    });\n                    this.splitLine(this, divId, itemId);\n                }.bind(this)\n            });\n        }\n    },\n\n    splitLine: function(obj, divId, itemId) {\n        var hiddenForItem = $('rma_info_tabs_items_section_content').select('#h' + itemId)[0];\n        if (!hiddenForItem) {\n            return false;\n        }\n\n        var timeSuffix = new Date().getTime(),\n            trSplit = hiddenForItem.up('tr'),\n            trAdded = new Element('tr', {id: 'new_tr_' + timeSuffix,\n                'class': trSplit.hasClassName('even') ? '_clickable' : '_clickable even'\n            });\n\n        trSplit.id = 'old_tr_' + timeSuffix;\n\n        // replace <script to avoid evalScripts() execution, <tr>.innerHTML assignment does not work in IE8 properly\n        var escapedHTML = $(divId).down('tbody').down('tr').innerHTML.replace(/<(\\/?)script/g, '&lt;$1script');\n        trSplit.update(escapedHTML);\n        trSplit.insert({after: trAdded.insert(escapedHTML)});\n\n        trAdded.descendants().each(function(element){\n            if (element.tagName.toLowerCase() == 'input' || element.tagName.toLowerCase() == 'select') {\n                element.name = element.name.replace('[' + itemId + ']', '[' + itemId + '_' + timeSuffix + ']');\n                if (element.id == 'h' + itemId) {\n                    element.id = 'h' + itemId + '_' + timeSuffix;\n                }\n                if (element.type != 'hidden') {\n                    element.value = '';\n                }\n            }\n            if (element.tagName.toLowerCase() == 'a' && element.hasClassName('action-item-split-line')) {\n                var deleteLink = new Element('a', {href: '#', 'class': 'action-item-delete-line'})\n                    .insert(\"<span>\" + obj.deleteLineLabel + \"</span>\");\n                element.replace(deleteLink);\n            }\n        })\n\n        var detailsDivId = this.getItemDivPrefix() + itemId;\n        var newDetailsDivId = detailsDivId + '_' + timeSuffix;\n        if (!$(detailsDivId)) {\n            var url = this.getLoadAttributesLink(itemId);\n\n            new Ajax.Request(url, {\n                method: 'get',\n                onSuccess: function(transport) {\n                    var response = transport.responseText;\n                    this.addPopupDiv(response, detailsDivId, itemId);\n                    this.hidePopups();\n                    var realThis = this;\n                    $(detailsDivId).descendants().each(function(element){\n                        if (element.tagName.toLowerCase() == 'input'\n                            || element.tagName.toLowerCase() == 'select'\n                            || element.tagName.toLowerCase() == 'textarea'\n                        ) {\n                            if (!(element.tagName.toLowerCase() == 'input' && element.type == 'file')) {\n                                element.name = realThis.nameTransformation(element, itemId);\n                            }\n                        }\n                    });\n                    this.copyDetailsData(detailsDivId, newDetailsDivId, itemId, timeSuffix);\n                    $(detailsDivId).select('input[type=\"file\"]').each(function(file) {\n                        file.name = file.name + '_' + itemId;\n                    });\n                    $(newDetailsDivId).select('input[type=\"file\"]').each(function(file) {\n                        file.name = file.name + '_' + itemId + '_' + timeSuffix;\n                    });\n                    this.addPopupDivButtonsBindings(detailsDivId);\n                    this.addPopupDivButtonsBindings(newDetailsDivId);\n                }.bind(this)\n            });\n        } else {\n            this.copyDetailsData(detailsDivId, newDetailsDivId, itemId, timeSuffix);\n            $(newDetailsDivId).select('input[type=\"file\"]').each(function(file) {\n                file.name = file.name + '_' + itemId + '_' + timeSuffix;\n            })\n        }\n\n        Event.observe(trSplit.down('a.action-item-details'), 'click', this.itemDetailsRowClick.bind(this));\n        Event.observe(trSplit.down('a.action-item-split-line'), 'click', this.itemSplitLineRowClick.bind(this));\n        Event.observe(trAdded.down('a.action-item-details'), 'click', this.itemDetailsRowClick.bind(this, newDetailsDivId));\n        Event.observe(trAdded.down('a.action-item-delete-line'), 'click', this.deleteRowById.bind(this, trAdded.id, newDetailsDivId));\n\n        var obj = this;\n        $$('select.reason').findAll(function(obj) {\n           return (obj.name == 'items[' + itemId + '][reason]'\n               || obj.name == 'items[' + itemId + '_' + timeSuffix + '][reason]');\n        }).each(function (elem) {\n            obj.showOtherOption(elem);\n            Event.observe(elem, 'change', obj.showOtherOption.bind(obj, elem));\n        });\n    },\n\n    copyDetailsData: function(detailsDivId, newDetailsDivId, itemId, timeSuffix) {\n        var parentTd = $('h' + itemId) ? $('h' + itemId + '_' + timeSuffix).up('td')\n            : $('id_'+itemId + '_' + timeSuffix).childElements().last(),\n            newDiv = new Element('div', {id: newDetailsDivId, 'class': $(detailsDivId).className});\n\n        newDiv.innerHTML = $(detailsDivId).innerHTML; // not update() to avoid evalScripts() execution\n        parentTd.insert({top: newDiv});\n\n        $(newDetailsDivId).descendants().each(function(element){\n            if ((element.tagName.toLowerCase() == 'input') || (element.tagName.toLowerCase() == 'select')) {\n                element.name = element.name.replace('[' + itemId + ']', '[' + itemId + '_' + timeSuffix + ']');\n                if (element.type.toLowerCase() != 'hidden' && element.type.toLowerCase() != 'text' && element.tagName.toLowerCase() != 'select') {\n                    element.value = '';\n                }\n            }\n        })\n\n        this.addPopupDivButtonsBindings(detailsDivId);\n        this.addPopupDivButtonsBindings(newDetailsDivId);\n        this.okButtonClick(newDetailsDivId)\n    },\n\n    deleteRowById : function(rowId, divId){\n        $(rowId).remove();\n        if ($(divId)) {\n            $(divId).remove();\n        }\n    },\n\n    setLoadAttributesUrl : function(url){\n        this.loadAttributesUrl  = url;\n    },\n\n    setLoadBundleUrl : function(url){\n        this.loadBundleUrl      = url;\n    },\n\n    setLoadSplitLineUrl : function(url){\n        this.loadSplitLineUrl = url;\n    },\n\n    setDeleteLineLabel : function(label){\n        this.deleteLineLabel = label;\n    },\n\n    setLoadOrderId : function(id){\n        this.loadOrderId = id;\n    },\n\n    addProduct : function(event){\n        this.gridProducts = $H({});\n        this.grid.reloadParams = {'products[]':this.gridProducts.keys()};\n        Element.hide('rma-items-block');\n        Element.show('select-order-items-block');\n    },\n\n    addSelectedProduct : function(event) {\n        this.grid.resetFilter(this.doAddSelectedProduct.bind(this));\n    },\n\n    doAddSelectedProduct : function(event) {\n        var items = $$('#order_items_grid_table .checkbox');\n        var selected_items = [];\n        var _rma = this;\n        items.each(function(e) {\n            if (e.type == 'checkbox' && e.checked == true) {\n                selected_items.push(e);\n            }\n        });\n        var tableRma = $('rma_items_grid_table');\n        var tableRmaBody = tableRma.down('tbody.newRma');\n        var className = true;\n        if (!tableRmaBody) {\n            tableRmaBody = tableRma.down('tbody');\n            tableRmaBody.hide();\n        } else {\n            className = !tableRmaBody.childElements().last().hasClassName('even');\n        }\n        if (selected_items.length) {\n            selected_items.each(function(e){\n                if (e.type == 'checkbox' && e.value) {\n                    _rma.addOrderItemToRmaGrid(e, className);\n                    className = !className;\n                    e.checked = false;\n                }\n            });\n        }\n\n        Element.hide('select-order-items-block');\n        Element.show('rma-items-block');\n        this.callLoadProductsCallback();\n    },\n\n    addOrderItemToRmaGrid : function (idElement, className) {\n        if(!idElement) return false;\n        var self = this;\n        var url = this.getLoadAttributesLink(this.newRmaItemId);\n        var hasUserAttributes = false;\n\n        //if (this.bundleArray[idElement.value] !== undefined) {\n        //    var obj = this.bundleArray[idElement.value];\n        //    for(var key in obj) {\n        //        this.addOrderItemToGrid(obj[key], className);\n        //    }\n        //} else {\n        //    var orderItem = this.getOrderItem(idElement);\n        //    this.addOrderItemToGrid(orderItem, className);\n        //}\n\n        new Ajax.Request(url, {\n            method: 'get',\n            onSuccess: function(transport) {\n                var response = transport.responseText;\n               if (response.length !== 0) {\n                    hasUserAttributes = true;\n                }\n                if (self.bundleArray[idElement.value] !== undefined) {\n                    var obj = self.bundleArray[idElement.value];\n                    for(var key in obj) {\n                        self.addOrderItemToGrid(obj[key], className, hasUserAttributes);\n                    }\n                } else {\n                    var orderItem = self.getOrderItem(idElement);\n                    self.addOrderItemToGrid(orderItem, className, hasUserAttributes);\n                }\n            }\n        });\n    },\n\n    addOrderItemToGrid: function (orderItem, className, hasUserAttributes) {\n        var fieldsProduct = [\n            'product_name',\n            'product_sku',\n            'qty_ordered',\n            'qty_requested',\n            'reason',\n            'condition',\n            'resolution'\n        ];\n        var tableRma = $('rma_items_grid_table');\n\n        var newRmaItemId = \"new\" + this.newRmaItemId;\n\n        var tbody = tableRma.down('tbody.newRma');\n        if (!tbody) {\n            tbody = new Element('tbody').addClassName('newRma');\n        }\n\n        var row = new Element('tr', {id: 'id_' + newRmaItemId, 'class': className ? 'even' : 'odd'});\n\n        fieldsProduct.each(function(el,i) {\n            var column = new Element('td',{class:'col-'+ el});\n            var data = '';\n            if (orderItem[el]) {\n                data = orderItem[el];\n            } else {\n                data = $('rma_properties_' + el);\n                if (data) {\n                    data = $(data).cloneNode(true);\n                    data.name = 'items[' + newRmaItemId + '][' + data.name + ']';\n                    data.id   = data.id + '_' + newRmaItemId;\n                    if ($$('th.data-grid-th.required.col-'+ el).size() === 1) {\n                        data.addClassName('required-entry');\n                    }\n                }\n            }\n            column.insert(data);\n            //adding reason other\n            if (el == 'reason') {\n                Event.observe($(data), 'change', rma.reasonChanged.bind(rma));\n                var data_other = $('rma_properties_reason_other');\n                data_other = $(data_other).cloneNode(true);\n                data_other.name   = 'items[' + newRmaItemId + '][' + data_other.name + ']';\n                data_other.setStyle({display:'none'});\n                data_other.disabled = 'disabled';\n                column.insert(data_other)\n            }\n            row.insert(column);\n        });\n        var column = new Element('td',{class:'col-actions'});\n        var deleteLink = new Element('a', {href:'#'});\n        Event.observe(deleteLink, 'click', this.deleteRow.bind(this));\n        deleteLink.insert($$('label[for=\"rma_properties_delete_link\"]').first().innerHTML);\n        column.insert(deleteLink);\n\n        var detailsLink = new Element('a', {href:'#'});\n        if (hasUserAttributes) {\n            Event.observe(detailsLink, 'click', this.addDetails.bind(this));\n        } else {\n            detailsLink.setAttribute('disabled', 'disabled');\n            detailsLink.addClassName('disabled');\n        }\n        detailsLink.insert($$('label[for=\"rma_properties_add_details_link\"]').first().innerHTML);\n        column.insert(detailsLink);\n        column.insert('<input type=\"hidden\" name=\"items[' + newRmaItemId + '][order_item_id]\" class=\"rma-action-links-' + orderItem['item_id'] + ' required\" value=\"'+orderItem['item_id']+'\"/>');\n        row.insert(column);\n        tableRma.insert(tbody.insert(row));\n\n        this.getAjaxData(newRmaItemId, true);\n        this.callLoadProductsCallback();\n        this.newRmaItemId++;\n    },\n\n    addProductRowCallback: function(grid, event) {\n        var trElement = Event.findElement(event, 'tr');\n        var isInput = Event.element(event).tagName == 'INPUT';\n        if (trElement) {\n            var checkbox = Element.select(trElement, 'input');\n            if (checkbox[0]) {\n                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;\n                grid.setCheckboxChecked(checkbox[0], checked);\n            }\n            var link = Element.select(trElement, 'a[class=\"product_to_add\"]');\n            if (link[0]) {\n                rma.showBundleItems(event)\n            }\n        }\n    },\n\n    addProductCheckboxCheckCallback: function(grid, element, checked){\n        if (checked) {\n            this.gridProducts.set(element.value, {});\n        } else {\n            this.gridProducts.unset(element.value);\n        }\n        grid.reloadParams = {'products[]':this.gridProducts.keys()};\n        this.grid = grid;\n    },\n\n    reasonChanged: function(event) {\n        var select = event.findElement('select')\n        if (select.value === 'other') {\n            select.next('input').show();\n            select.next('input').disabled = '';\n        } else {\n            select.next('input').hide();\n            select.next('input').disabled = 'disabled';\n        }\n    },\n\n    getOrderItem: function (idElement) {\n        var data = Array();\n        var rowOrder = jQuery(idElement).parents('tr:first');\n        data['item_id'] = idElement.value;\n        data['product_name'] = jQuery('.col-product_name', rowOrder).text().trim().escapeHTML();\n        data['product_sku'] = jQuery('.col-sku', rowOrder).text().trim().escapeHTML();\n        data['qty_ordered'] = jQuery('.col-qty', rowOrder).text().trim();\n        return data;\n    },\n\n    deleteRow: function (event) {\n        var tableRmaBody = event.findElement('a').up(2);\n        event.findElement('a').up(1).remove();\n        this.bundleArray = {};\n        if (!tableRmaBody.down()) {\n            tableRmaBody.remove();\n            $('rma_items_grid_table').down('tbody').show();\n        }\n    },\n\n    addDetails: function (event) {\n        var tr = event.findElement('a').up(1);\n        var itemId = tr.id.split('_')[1];\n        var divId = this.getItemDivPrefix() + itemId;\n        var itemCalculated;\n        var popupBlock = jQuery('#' + divId);\n\n        if (!$(divId)) {\n            itemCalculated = $$('input[name=\"items[' + itemId + '][order_item_id]\"]')[0].value;\n            this.loadAttributesUrl = this.loadAttributesUrl + 'product_id/' + itemCalculated + '/';\n            this.getAjaxData(itemId);\n        } else if (popupBlock.length) {\n            this.initDetails(event.currentTarget, divId);\n            this.showPopup(divId);\n\n        }\n    },\n\n    showBundleItems : function(event){\n        var trElement = Event.findElement(event, 'tr');\n\n        if (!trElement) {\n            return false;\n        }\n        var checkbox = Element.select(trElement, 'input');\n        if (checkbox[0]) {\n            var itemId = checkbox[0].value;\n        }\n\n        if (trElement.select(':checked').length <= 0) {\n            if (this.bundleArray[itemId]) {\n                delete this.bundleArray[itemId];\n            }\n            return false;\n        }\n\n        var divId   = 'bundleDiv_' + itemId;\n        var orderId = this.loadOrderId;\n        if (!$(divId)) {\n            this.getBundleAjaxData(itemId, orderId);\n        } else {\n            this.showBundlePopup(divId);\n        }\n    },\n\n    getBundleAjaxData : function(itemId, orderId) {\n        var url = this.loadBundleUrl + 'item_id/' + itemId + '/order_id/' + orderId + '?isAjax=true';\n\n        new Ajax.Request(url, {\n            onSuccess: function(transport) {\n                var response = transport.responseText;\n                this.addBundlePopupDiv(response, itemId);\n            }.bind(this)\n        });\n    },\n\n    addBundlePopupDiv: function(response, itemId){\n        var divId = 'bundleDiv_' + itemId;\n        $('details_container').insert({\n            top: new Element('div', {id: divId}).update(response)\n        });\n        $(divId).addClassName('rma-popup');\n\n        Event.observe($('rma_bundle_cancel_button_'+itemId), 'click', this.bundlePreviousStateReturns.bind(this, itemId));\n        Event.observe($('rma_bundle_ok_button_'+itemId), 'click', this.bundleStoreState.bind(this, itemId));\n        Event.observe($('all_items_'+itemId), 'click', this.checkAllItems.bind(this, itemId));\n\n        var a = this;\n        $$('.checkbox_rma_bundle_item_'+itemId).each(function(cb){\n            Event.observe(cb, 'click', a.checkIndividualItems.bind(a, itemId));\n        });\n        this.showPopup(divId);\n    },\n\n    showBundlePopup: function(divId) {\n        var itemId = divId.split('_')[1];\n\n        $$('.checkbox_rma_bundle_item_'+itemId).each(function(checkbox) {\n            checkbox.checked = false;\n        });\n        if (this.bundleArray[itemId]) {\n            var obj = this.bundleArray[itemId];\n            for(var key in obj) {\n                for(var k in obj[key]) {\n                    var cb = obj[key];\n                    if (k == 'item_id') {\n                        $('checkbox_rma_bundle_item_id_'+itemId+'_'+cb[k]).checked = \"checked\";\n                    }\n                }\n            }\n        }\n\n        this.showPopup(divId);\n    },\n\n    bundleStoreState: function(itemId) {\n        var parent  = itemId;\n        var ba      = {};\n        var i       = 0;\n\n        $$('.checkbox_rma_bundle_item_'+itemId).each(function(checkbox) {\n            if (checkbox.checked) {\n                var child   = checkbox.value;\n                var name    = $('checkbox_rma_bundle_item_name_'+parent+'_'+child).value;\n                var sku     = $('checkbox_rma_bundle_item_sku_'+parent+'_'+child).value;\n                var qty     = $('checkbox_rma_bundle_item_qty_'+parent+'_'+child).value;\n                ba[i] = {\n                    'item_id': child,\n                    'product_name': name,\n                    'product_sku': sku,\n                    'qty_ordered': qty\n                };\n                i++;\n            }\n        });\n        this.bundleArray[itemId] = ba;\n\n        if (i > 0) {\n            $$('input[value=\"'+itemId+'\"]')[0].checked = \"checked\";\n        } else {\n            $$('input[value=\"'+itemId+'\"]')[0].checked = false;\n            delete this.bundleArray[itemId];\n            this.addProductCheckboxCheckCallback(this.grid, $$('input[value=\"'+itemId+'\"]')[0], false)\n        }\n\n        this.hidePopups();\n    },\n\n    bundlePreviousStateReturns: function(itemId) {\n        if (this.bundleArray[itemId] !== undefined) {\n            $$('input[value=\"'+itemId+'\"]')[0].checked = \"checked\";\n        } else {\n            $$('input[value=\"'+itemId+'\"]')[0].checked = false;\n            this.addProductCheckboxCheckCallback(this.grid, $$('input[value=\"'+itemId+'\"]')[0], false)\n        }\n\n        this.hidePopups();\n    },\n\n    checkAllItems: function(itemId) {\n        $$('.checkbox_rma_bundle_item_'+itemId).each(function(checkbox) {\n            checkbox.checked = \"checked\";\n        });\n    },\n\n    checkIndividualItems: function(itemId) {\n        $('individual_items_'+itemId).checked = \"checked\";\n    },\n\n    setLoadShippingMethodsUrl: function(url) {\n        this.loadShippingMethodsUrl  = url;\n    },\n\n    setLoadPslUrl: function(url) {\n        this.loadPslUrl  = url;\n    },\n\n    setFormKey: function(formKey) {\n        this.formKey = formKey;\n    },\n\n    showShippingMethods: function() {\n        var parentDiv   = $('get-psl');\n        var divId       = 'get-shipping-method';\n\n        if ($(divId)) {\n            this.showPopup(divId);\n        } else {\n            var ajaxSettings = {\n                url: this.loadShippingMethodsUrl,\n                showLoader: true,\n                data: {form_key: this.formKey},\n                success: function(data, textStatus, transport) {\n                    var response = transport.responseText;\n                    if (data.error) {\n                        window.location.reload();\n                    } else {\n                        parentDiv.insert({\n                            after: new Element('div', {id: divId}).update(response).addClassName('rma-popup')\n                        });\n                        jQuery('#' + divId).modal({\n                                type: 'popup',\n                                title: $t('Shipping Information'),\n                                buttons: [{\n                                    text: $t('Ok'),\n                                    'attr': {'disabled':'disabled', 'data-action':'save-shipping-method'},\n                                    'class': 'action-primary _disabled',\n                                    click: function () {\n                                        rma.showLabelPopup(jQuery('input[name=shipping_method]:checked').val());\n                                        this.closeModal();\n                                    }\n                                }, {\n                                    text: $t('Cancel'),\n                                    'class': 'action-secondary',\n                                    click: function () {\n                                        this.closeModal();\n                                    }\n                                }]\n                            }\n                        );\n                        this.showPopup(divId);\n                        $$(\"input[id^='s_method_']\").each(function(element) {\n                            $(element).on(\"click\", function () {\n                                $$('[data-action=save-shipping-method]')[0]\n                                    .enable()\n                                    .removeClassName('_disabled');\n                            });\n                        });\n                    }\n                }.bind(this)\n            };\n            jQuery.ajax(ajaxSettings);\n        }\n    },\n\n    showLabelPopup: function(method) {\n        var url = this.loadPslUrl + 'method/' + method + '?isAjax=true';\n        var ajaxSettings = {\n            url: url,\n            showLoader:true,\n            data: {form_key: this.formKey},\n            success: function(data, textStatus, transport) {\n                var response = transport.responseText;\n                $('get-psl').update(response);\n                this.showWindow(method);\n            }.bind(this)\n        };\n        jQuery.ajax(ajaxSettings);\n    },\n\n    cancelPack: function() {\n        rma.window.trigger('closeModal');\n        packaging.cancelPackaging();\n        this.showShippingMethods();\n    },\n\n    showWindow: function(method) {\n        url = this.loadPslUrl + 'method/' + method + '/data/1?isAjax=true';\n        var rma = this;\n        new Ajax.Request(url, {\n            onSuccess: function(transport) {\n                var response = transport.responseText.isJSON() ? transport.responseText.evalJSON()\n                    : transport.responseText;\n\n                window.packaging = new Packaging(response);\n                rma.window = jQuery('#packaging_window').modal({\n                        type: 'slide',\n                        title: $t('Create Packages'),\n                        closed: function(event, modal) {\n                            modal.modal.remove();\n                        },\n                        buttons: [{\n                            text: $t('Cancel'),\n                            'class': 'action-secondary',\n                            click: function () {\n                                this.closeModal();\n                            }\n                        }, {\n                            text: $t('Save'),\n                            'attr': {'disabled':'disabled', 'data-action':'save-packages'},\n                            'class': 'action-primary _disabled',\n                            click: function () {\n                                packaging.confirmPackaging();\n                            }\n                        }, {\n                            text: $t('Add Package'),\n                            'attr': {'data-action':'add-packages'},\n                            'class': 'action-secondary',\n                            click: function () {\n                                packaging.newPackage();\n                            }\n                        }]\n                    }\n                );\n\n                packaging.showWindow();\n\n                this.shippingMethod = $('h_method_'+method).cleanWhitespace().innerHTML.evalJSON();\n\n                packaging.paramsCreateLabelRequest['code']          = this.shippingMethod.Code;\n                packaging.paramsCreateLabelRequest['carrier_title'] = this.shippingMethod.CarrierTitle;\n                packaging.paramsCreateLabelRequest['method_title']  = this.shippingMethod.MethodTitle;\n                packaging.paramsCreateLabelRequest['price']         = this.shippingMethod.PriceOriginal;\n\n                packaging.setConfirmPackagingCallback(function(){\n                    packaging.sendCreateLabelRequest();\n                });\n                packaging.setLabelCreatedCallback(function(response){\n                    setLocation(packaging.thisPage);\n                });\n\n                $('package_template').insert({\n                    after: new Element('div', {id: 'shipping_information'}).insert(packaging.shippingInformation)\n                });\n\n                $('get-shipping-method-carrier-title').insert(this.shippingMethod.CarrierTitle);\n                $('get-shipping-method-method-title').insert(this.shippingMethod.MethodTitle);\n                $('get-shipping-method-shipping-price').insert(this.shippingMethod.Price);\n\n                Event.observe($('get-shipping-method-show-shipping-methods'), 'click', rma.cancelPack.bind(rma));\n                jQuery(document).trigger('packaging:inited');\n                jQuery(document).data('packagingInited', true);\n            }\n        });\n    },\n\n    showOtherOption: function(element)\n    {\n        var inputEl = element.next('input[type=\"text\"]');\n        if (element.value == 'other') {\n            if(inputEl) {\n                inputEl.enable();\n                inputEl.show();\n            }\n        } else {\n            if(inputEl) {\n                inputEl.hide();\n                inputEl.disable();\n            }\n        }\n    }\n};\n\n});\n","Magento_Rma/validation.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n(function (factory) {\n    'use strict';\n\n    if (typeof define !== 'undefined' && define.amd) {\n        define([\n            'jquery',\n            'jquery/ui',\n            'mage/backend/validation'\n        ], factory);\n    } else {\n        factory(jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    /**\n     * @return {*}\n     */\n    $.validator.prototype.checkForm = function () {\n        var lastElements = [],\n            i, elements, className, j;\n\n        this.prepareForm();\n\n        for (i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {\n            className = $(elements[i]).attr('class');\n\n            if (className.search(/rma-action-links-/i) !== -1) {\n                lastElements.push(elements[i]);\n                continue; //jscs:ignore disallowKeywords\n            }\n            this.check(elements[i]);\n        }\n        this.showErrors();\n\n        for (j = 0; lastElements[j]; j++) {\n            this.check(lastElements[j]);\n        }\n\n        return this.valid();\n    };\n}));\n","Magento_Rma/js/components/use-config-settings/single-checkbox.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (Component) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            disableIsReturnable: false,\n            listens: {\n                disabled: 'toggleDisableIsReturnable',\n                checked: 'toggleDisableIsReturnable onCheckedChanged'\n            }\n        },\n\n        /**\n         * Handle checked and disabled changes to calculate disableIsReturnable value\n         */\n        toggleDisableIsReturnable: function () {\n            this.disableIsReturnable(this.checked() || this.disabled());\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            this._super()\n                .observe('disableIsReturnable');\n\n            return this;\n        }\n    });\n});\n","Magento_AdminGws/permissions/rolesedit/validation-rules.js":"/**\n * AdminGws client side validation rules\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\n/* eslint-disable strict */\ndefine([\n    'jquery',\n    'mage/backend/validation'\n], function ($) {\n\n    $.validator.addMethod('validate-one-gws-store', function () {\n        if ($('#gws_is_all').val() == 1) { //eslint-disable-line eqeqeq\n            return true; // not touching valid intentionally\n        }\n\n        return $('.validate-one-gws-store:checked').length;\n    }, 'Please select one of the options.');\n\n    $.widget('mage.validation', $.mage.validation, {\n        options: {\n            /**\n             * @param {jQuery} error\n             * @param {jQuery} element\n             */\n            errorPlacement: function (error, element) {\n                if (element.is('[name=\"gws_store_groups[]\"]')) {\n                    error.insertAfter($('#gws_container').last());\n                } else {\n                    error.insertAfter(element);\n                }\n            }\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/container.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiElement',\n    'jquery'\n], function (Element, $) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            containerSelector: '.media-gallery-container',\n            masonryComponentPath: 'media_gallery_listing.media_gallery_listing.media_gallery_columns',\n            modules: {\n                masonry: '${ $.masonryComponentPath }'\n            }\n        },\n\n        /**\n         * Init component\n         *\n         * @return {exports}\n         */\n        initialize: function () {\n            this._super();\n\n            $(this.containerSelector).applyBindings();\n\n            return this;\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/image-uploader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/lib/validation/validator',\n    'mage/translate',\n    'jquery/file-uploader'\n], function (Component, $, _, validator, $t) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            imageUploadInputSelector: '#image-uploader-form',\n            directoriesPath: 'media_gallery_listing.media_gallery_listing.media_gallery_directories',\n            actionsPath: 'media_gallery_listing.media_gallery_listing.media_gallery_columns.thumbnail_url',\n            messagesPath: 'media_gallery_listing.media_gallery_listing.messages',\n            imageUploadUrl: '',\n            acceptFileTypes: '',\n            allowedExtensions: '',\n            maxFileSize: '',\n            maxFileNameLength: 90,\n            loader: false,\n            modules: {\n                directories: '${ $.directoriesPath }',\n                actions: '${ $.actionsPath }',\n                mediaGridMessages: '${ $.messagesPath }',\n                sortBy: '${ $.sortByName }',\n                listingPaging: '${ $.listingPagingName }'\n            }\n        },\n\n        /**\n         * Init component\n         *\n         * @return {exports}\n         */\n        initialize: function () {\n            this._super().observe(\n                [\n                    'loader',\n                    'count'\n                ]\n            );\n\n            return this;\n        },\n\n        /**\n         * Initializes file upload library\n         */\n        initializeFileUpload: function () {\n            $(this.imageUploadInputSelector).fileupload({\n                url: this.imageUploadUrl,\n                acceptFileTypes: this.acceptFileTypes,\n                allowedExtensions: this.allowedExtensions,\n                maxFileSize: this.maxFileSize,\n\n                /**\n                 * Extending the form data\n                 *\n                 * @param {Object} form\n                 * @returns {Array}\n                 */\n                formData: function (form) {\n                    return form.serializeArray().concat(\n                        [{\n                            name: 'isAjax',\n                            value: true\n                        },\n                        {\n                            name: 'form_key',\n                            value: window.FORM_KEY\n                        },\n                        {\n                            name: 'target_folder',\n                            value: this.getTargetFolder()\n                        }]\n                    );\n                }.bind(this),\n\n                add: function (e, data) {\n                    if (!this.isSizeExceeded(data.files[0]).passed) {\n                        this.addValidationErrorMessage(\n                            $t('Cannot upload \"%1\". File exceeds maximum file size limit.')\n                                .replace('%1', data.files[0].name)\n                        );\n\n                        return;\n                    } else if (!this.isFileNameLengthExceeded(data.files[0]).passed) {\n                        this.addValidationErrorMessage(\n                            $t('Cannot upload \"%1\". Filename is too long, must be 90 characters or less.')\n                                .replace('%1', data.files[0].name)\n                        );\n\n                        return;\n                    }\n\n                    this.showLoader();\n                    this.count(1);\n                    data.submit();\n                }.bind(this),\n\n                stop: function () {\n                    this.openNewestImages();\n                    this.mediaGridMessages().scheduleCleanup();\n                }.bind(this),\n\n                start: function () {\n                    this.mediaGridMessages().clear();\n                }.bind(this),\n\n                done: function (e, data) {\n                    var response = data.jqXHR.responseJSON;\n\n                    if (!response) {\n                        this.showErrorMessage(data, $t('Could not upload the asset.'));\n\n                        return;\n                    }\n\n                    if (!response.success) {\n                        this.showErrorMessage(data, response.message);\n\n                        return;\n                    }\n                    this.showSuccessMessage(data);\n                    this.hideLoader();\n                    this.actions().reloadGrid();\n                }.bind(this)\n            });\n        },\n\n        /**\n         * Add error message after validation error.\n         *\n         * @param {String} message\n         */\n        addValidationErrorMessage: function (message) {\n            this.mediaGridMessages().add('error', message);\n\n            this.count() < 2 || this.mediaGridMessages().scheduleCleanup();\n        },\n\n        /**\n         * Checks if size of provided file exceeds\n         * defined in configuration size limits.\n         *\n         * @param {Object} file - File to be checked.\n         * @returns {Boolean}\n         */\n        isSizeExceeded: function (file) {\n            return validator('validate-max-size', file.size, this.maxFileSize);\n        },\n\n        /**\n         * Checks if name length of provided file exceeds\n         * defined in configuration size limits.\n         *\n         * @param {Object} file - File to be checked.\n         * @returns {Boolean}\n         */\n        isFileNameLengthExceeded: function (file) {\n            return validator('max_text_length', file.name, this.maxFileNameLength);\n        },\n\n        /**\n         * Go to recently uploaded images if at least one uploaded successfully\n         */\n        openNewestImages: function () {\n            this.mediaGridMessages().get().each(function (message) {\n                if (message.code === 'success') {\n                    this.actions().deselectImage();\n                    this.sortBy().selectDefaultOption();\n                    this.listingPaging().goFirst();\n\n                    return false;\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Show error meassages with file name.\n         *\n         * @param {Object} data\n         * @param {String} message\n         */\n        showErrorMessage: function (data, message) {\n            data.files.each(function (file) {\n                this.mediaGridMessages().add(\n                    'error',\n                    file.name + ': ' + $t(message)\n                );\n            }.bind(this));\n\n            this.hideLoader();\n        },\n\n        /**\n         * Show success message, and files counts\n         */\n        showSuccessMessage: function () {\n            this.mediaGridMessages().messages.remove(function (item) {\n                return item.code === 'success';\n            });\n            this.mediaGridMessages().add('success', $t('Assets have been successfully uploaded!'));\n            this.count(this.count() + 1);\n\n        },\n\n        /**\n         * Gets Media Gallery selected folder\n         *\n         * @returns {String}\n         */\n        getTargetFolder: function () {\n\n            if (_.isUndefined(this.directories().activeNode()) ||\n                _.isNull(this.directories().activeNode())) {\n                return '/';\n            }\n\n            return this.directories().activeNode();\n        },\n\n        /**\n         * Shows spinner loader\n         */\n        showLoader: function () {\n            this.loader(true);\n        },\n\n        /**\n         * Hides spinner loader\n         */\n        hideLoader: function () {\n            this.loader(false);\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_MediaGalleryUi/js/action/getDetails',\n    'Magento_MediaGalleryUi/js/action/deleteImages',\n    'mage/translate'\n], function ($, _, getDetails, deleteImages, $t) {\n    'use strict';\n\n    return {\n\n        /**\n         * Get information about image use\n         *\n         * @param {Array} recordsIds\n         * @param {String} imageDetailsUrl\n         * @param {String} deleteImageUrl\n         */\n        deleteImageAction: function (recordsIds, imageDetailsUrl, deleteImageUrl) {\n            var confirmationContent = $t('%1Are you sure you want to delete \"%2\" image(s)?')\n                .replace('%2', Object.keys(recordsIds).length),\n                deferred = $.Deferred();\n\n            getDetails(imageDetailsUrl, recordsIds).then(function (images) {\n                        confirmationContent = confirmationContent.replace(\n                            '%1',\n                            this.getRecordRelatedContentMessage(images) + ' '\n                        );\n                    }.bind(this)).fail(function () {\n                        confirmationContent = confirmationContent.replace('%1', '');\n                    }).always(function () {\n                        deleteImages(recordsIds, deleteImageUrl, confirmationContent).then(function (status) {\n                            deferred.resolve(status);\n                        }).fail(function (error) {\n                            deferred.reject(error);\n                        });\n                    });\n\n            return deferred.promise();\n        },\n\n        /**\n         * Get information about image use\n         *\n         * @param {Object|String} images\n         * @return {String}\n         */\n        getRecordRelatedContentMessage: function (images) {\n            var usedInMessage = $t('The selected assets are used in the content of the following entities: '),\n                usedIn = {};\n\n            $.each(images, function (key, image) {\n                $.each(image.details, function (sectionIndex, section) {\n                    if (section.title === 'Used In' && _.isObject(section) && !_.isEmpty(section.value)) {\n                        $.each(section.value, function (entityTypeIndex, entityTypeData) {\n                            usedIn[entityTypeData.name] = entityTypeData.name in usedIn ?\n                                usedIn[entityTypeData.name] + entityTypeData.number :\n                                entityTypeData.number;\n                        });\n                    }\n                });\n            });\n\n            if (_.isEmpty(usedIn)) {\n                return '';\n            }\n\n            return usedInMessage + this.usedInObjectToString(usedIn);\n        },\n\n        /**\n         * Fromats usedIn object to string\n         *\n         * @param {Object} usedIn\n         * @return {String}\n         */\n        usedInObjectToString: function (usedIn) {\n            var entities = [];\n\n            $.each(usedIn, function (entityName, number) {\n                entities.push(entityName + '(' + number + ')');\n            });\n\n            return entities.join(', ') + '.';\n        }\n    };\n});\n","Magento_MediaGalleryUi/js/action/deleteImages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'mage/url',\n    'Magento_MediaGalleryUi/js/grid/messages',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, _, urlBuilder, messages, confirmation, $t) {\n    'use strict';\n\n    return function (ids, deleteUrl, confirmationContent) {\n        var deferred = $.Deferred(),\n               title = $t('Delete assets'),\n               cancelText = $t('Cancel'),\n               deleteImageText = $t('Delete');\n\n        /**\n         * Send deletion request with redords ids\n         *\n         * @param {Array} recordIds\n         * @param {String} serviceUrl\n         */\n        function sendRequest(recordIds, serviceUrl) {\n\n            $.ajax({\n                type: 'POST',\n                url: serviceUrl,\n                dataType: 'json',\n                showLoader: true,\n                data: {\n                    'form_key': window.FORM_KEY,\n                    'ids': recordIds\n                },\n                context: this,\n\n                /**\n                 * Success handler for deleting image\n                 *\n                 * @param {Object} response\n                 */\n                success: function (response) {\n                    var message = !_.isUndefined(response.message) ? response.message : null;\n\n                    if (!response.success) {\n                        message = message || $t('There was an error on attempt to delete the images.');\n                        $(window).trigger('fileDeleted.enhancedMediaGallery', {\n                            reload: false,\n                            message: message,\n                            code: 'error'\n                        });\n\n                        deferred.reject(message);\n                    }\n\n                    message = message || $t('You have successfully removed the images.');\n                    $(window).trigger('fileDeleted.enhancedMediaGallery', {\n                        reload: true,\n                        message: message,\n                        code: 'success'\n                    });\n                    deferred.resolve(message);\n                },\n\n                /**\n                 * Error handler for deleting image\n                 *\n                 * @param {Object} response\n                 */\n                error: function (response) {\n                    var message;\n\n                    if (typeof response.responseJSON === 'undefined' ||\n                        typeof response.responseJSON.message === 'undefined'\n                    ) {\n                        message = $t('There was an error on attempt to delete the image.');\n                    } else {\n                        message = response.responseJSON.message;\n                    }\n\n                    $(window).trigger('fileDeleted.enhancedMediaGallery', {\n                        reload: false,\n                        message: message,\n                        code: 'error'\n                    });\n                    deferred.reject(message);\n                }\n            });\n        }\n\n        confirmation({\n            title: title,\n            modalClass: 'media-gallery-delete-image-action',\n            content: confirmationContent,\n            buttons: [\n                {\n                    text: cancelText,\n                    class: 'action-secondary action-dismiss',\n\n                    /**\n                     * Close modal\n                     */\n                    click: function () {\n                        this.closeModal();\n                        deferred.resolve({\n                            status: 'canceled'\n                        });\n                    }\n                },\n                {\n                    text: deleteImageText,\n                    class: 'action-primary action-accept',\n\n                    /**\n                     * Delete Image and close modal\n                     */\n                    click: function () {\n                        sendRequest(ids, deleteUrl);\n                        this.closeModal();\n                    }\n                }\n            ]\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_MediaGalleryUi/js/action/getDetails.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/translate'\n], function ($, $t) {\n    'use strict';\n\n    return function (imageDetailsUrl, imageIds) {\n        var deferred = $.Deferred(),\n            message;\n\n        $.ajax({\n            type: 'GET',\n            url: imageDetailsUrl,\n            dataType: 'json',\n            showLoader: true,\n            data: {\n                'ids': imageIds\n            },\n            context: this,\n\n            /**\n             * Resolve with image details if success, reject with response message othervise\n             *\n             * @param {Object} response\n             */\n            success: function (response) {\n                if (response.success) {\n                    deferred.resolve(response.imageDetails);\n\n                    return;\n                }\n\n                deferred.reject(response.message);\n            },\n\n            /**\n             * Extract the message and reject\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n\n                if (typeof response.responseJSON === 'undefined' ||\n                    typeof response.responseJSON.message === 'undefined'\n                ) {\n                    message = $t('Could not retrieve image details.');\n                } else {\n                    message = response.responseJSON.message;\n                }\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_MediaGalleryUi/js/action/saveDetails.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/translate'\n], function ($, $t) {\n    'use strict';\n\n    return function (saveImageDetailsUrl, data) {\n        var deferred = $.Deferred(),\n            message;\n\n        $.ajax({\n            type: 'POST',\n            url: saveImageDetailsUrl,\n            dataType: 'json',\n            showLoader: true,\n            data: data,\n\n            /**\n             * Resolve with image details if success, reject with response message otherwise\n             *\n             * @param {Object} response\n             */\n            success: function (response) {\n                if (response.success) {\n                    deferred.resolve(response.message);\n\n                    return;\n                }\n\n                deferred.reject(response.message);\n            },\n\n            /**\n             * Extract the message and reject\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n                if (typeof response.responseJSON === 'undefined' ||\n                    typeof response.responseJSON.message === 'undefined'\n                ) {\n                    message = $t('Could not save image details.');\n                } else {\n                    message = response.responseJSON.message;\n                }\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_MediaGalleryUi/js/directory/directories.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.g\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'uiComponent',\n    'Magento_Ui/js/modal/confirm',\n    'Magento_Ui/js/modal/alert',\n    'underscore',\n    'Magento_Ui/js/modal/prompt',\n    'Magento_MediaGalleryUi/js/directory/actions/createDirectory',\n    'Magento_MediaGalleryUi/js/directory/actions/deleteDirectory',\n    'mage/translate',\n    'validation'\n], function ($, Component, confirm, uiAlert, _, prompt, createDirectory, deleteDirectory, $t) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            allowedActions: [],\n            directoryTreeSelector: '#media-gallery-directory-tree',\n            deleteButtonSelector: '#delete_folder',\n            createFolderButtonSelector: '#create_folder',\n            messageDelay: 5,\n            selectedFolder: null,\n            messagesName: 'media_gallery_listing.media_gallery_listing.messages',\n            modules: {\n                directoryTree: '${ $.parentName }.media_gallery_directories',\n                messages: '${ $.messagesName }'\n            }\n        },\n\n        /**\n         * Initializes media gallery directories component.\n         *\n         * @returns {Sticky} Chainable.\n         */\n        initialize: function () {\n            this._super().observe(['selectedFolder']);\n            this._addValidation();\n            this.initEvents();\n\n            return this;\n        },\n\n        /**\n          * Initialize directories events\n          */\n        initEvents: function () {\n            $(this.deleteButtonSelector).on('delete_folder', function () {\n                this.deleteFolder();\n            }.bind(this));\n\n            $(this.createFolderButtonSelector).on('create_folder', function () {\n                this.createFolder();\n            }.bind(this));\n        },\n\n        /**\n         * Show confirmation popup and create folder based on user input\n         */\n        createFolder: function () {\n            this.getPrompt({\n                title: $t('New Folder Name:'),\n                content: '',\n                actions: {\n                    /**\n                     * Confirm action\n                     */\n                    confirm: function (folderName) {\n                        createDirectory(\n                            this.directoryTree().createDirectoryUrl,\n                            [this.getNewFolderPath(folderName)]\n                        ).then(function () {\n                            this.directoryTree().reloadJsTree().then(function () {\n                                this.directoryTree().locateNode(this.getNewFolderPath(folderName));\n                            }.bind(this));\n                        }.bind(this)).fail(function (error) {\n                            uiAlert({\n                                content: error\n                            });\n                        });\n                    }.bind(this)\n                },\n                buttons: [{\n                    text: $t('Cancel'),\n                    class: 'action-secondary action-dismiss',\n\n                    /**\n                     * Close modal\n                     */\n                    click: function () {\n                        this.closeModal();\n                    }\n                }, {\n                    text: $t('Confirm'),\n                    class: 'action-primary action-accept'\n                }]\n            });\n        },\n\n        /**\n         * Return configured path for folder creation.\n         *\n         * @param {String} folderName\n         * @returns {String}\n         */\n        getNewFolderPath: function (folderName) {\n            if (_.isUndefined(this.selectedFolder()) || _.isNull(this.selectedFolder())) {\n                return folderName;\n            }\n\n            return this.selectedFolder() + '/' + folderName;\n        },\n\n        /**\n          * Return configured prompt with input field\n          */\n        getPrompt: function (data) {\n                prompt({\n                    title: $t(data.title),\n                    content:  $t(data.content),\n                    modalClass: 'media-gallery-folder-prompt',\n                    validation: true,\n                    validationRules: ['required-entry', 'validate-filename'],\n                    attributesField: {\n                        name: 'folder_name',\n                        'data-validate': '{required:true, validate-filename}',\n                        maxlength: '128'\n                    },\n                    attributesForm: {\n                        novalidate: 'novalidate',\n                        action: ''\n                    },\n                    context: this,\n                    actions: data.actions,\n                    buttons: data.buttons\n                });\n            },\n\n        /**\n          * Confirmation popup for delete folder action.\n          */\n        deleteFolder: function () {\n            confirm({\n                title: $t('Are you sure you want to delete this folder?'),\n                modalClass: 'delete-folder-confirmation-popup',\n                content: $t('The following folder is going to be deleted: %1')\n                    .replace('%1', this.selectedFolder()),\n                actions: {\n\n                    /**\n                      * Delete folder on button click\n                      */\n                    confirm: function () {\n                        deleteDirectory(\n                            this.directoryTree().deleteDirectoryUrl,\n                            this.selectedFolder()\n                        ).then(function () {\n                            this.directoryTree().removeNode();\n                            this.directoryTree().selectStorageRoot();\n                            $(window).trigger('folderDeleted.enhancedMediaGallery');\n                        }.bind(this)).fail(function (error) {\n                            uiAlert({\n                                content: error\n                            });\n                        });\n                    }.bind(this)\n                }\n            });\n        },\n\n        /**\n         * Set inactive all nodes, adds disable state to Delete Folder Button\n         */\n        setInActive: function () {\n            this.selectedFolder(null);\n            $(this.deleteButtonSelector).attr('disabled', true).addClass('disabled');\n        },\n\n        /**\n         * Set active node, remove disable state from Delete Forlder button\n         *\n         * @param {String} folderId\n         */\n        setActive: function (folderId) {\n            if (!this.allowedActions.includes('delete_folder')) {\n                return;\n            }\n\n            this.selectedFolder(folderId);\n            $(this.deleteButtonSelector).prop('disabled', false).removeClass('disabled');\n        },\n\n        /**\n         * @private\n         */\n        _addValidation: function () {\n            $.validator.addMethod(\n                'validate-filename', function (value) {\n                    return $.mage.isEmptyNoTrim(value) || /^[a-z0-9\\-\\_]+$/si.test(value);\n                },\n                $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), underscore (_) or hyphen (-) in this field. No spaces or other characters are allowed.')); //eslint-disable-line max-len\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/directory/directoryTree.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global Base64 */\ndefine([\n    'jquery',\n    'uiComponent',\n    'uiLayout',\n    'underscore',\n    'Magento_MediaGalleryUi/js/directory/actions/createDirectory',\n    'jquery/jstree/jquery.jstree',\n    'Magento_Ui/js/lib/view/utils/async',\n    'Magento_MediaGalleryUi/js/directory/directories'\n], function ($, Component, layout, _, createDirectory) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            allowedActions: [],\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\n            bookmarkProvider: 'componentType = bookmark, ns = ${ $.ns }',\n            directoryTreeSelector: '#media-gallery-directory-tree',\n            getDirectoryTreeUrl: 'media_gallery/directories/gettree',\n            createDirectoryUrl: 'media_gallery/directories/create',\n            deleteDirectoryUrl: 'media_gallery/directories/delete',\n            jsTreeReloaded: null,\n            modules: {\n                bookmarks: '${ $.bookmarkProvider }',\n                directories: '${ $.name }_directories',\n                filterChips: '${ $.filterChipsProvider }'\n            },\n            listens: {\n                '${ $.provider }:params.filters.path': 'updateSelectedDirectory'\n            },\n            viewConfig: [{\n                component: 'Magento_MediaGalleryUi/js/directory/directories',\n                name: '${ $.name }_directories',\n                allowedActions: '${ $.allowedActions }'\n            }]\n        },\n\n        /**\n         * Initializes media gallery directories component.\n         *\n         * @returns {Sticky} Chainable.\n         */\n        initialize: function () {\n            this._super().observe(['activeNode']).initView();\n\n            $.async(\n                this.directoryTreeSelector,\n                this,\n                function () {\n                    this.initJsTreeEvents();\n                    this.renderDirectoryTree().then(function () {\n                        this.initEvents();\n                    }.bind(this));\n                }.bind(this)\n            );\n\n            return this;\n        },\n\n        /**\n         * Render directory tree component.\n         */\n        renderDirectoryTree: function () {\n            return this.getJsonTree().then(function (data) {\n                this.createFolderIfNotExists(data).then(function (isFolderCreated) {\n                    if (isFolderCreated) {\n                        this.getJsonTree().then(function (newData) {\n                            this.createTree(newData);\n                        }.bind(this));\n                    } else {\n                        this.createTree(data);\n                    }\n                }.bind(this));\n            }.bind(this));\n        },\n\n        /**\n         * Set jstree reloaded\n         *\n         * @param {Boolean} value\n         */\n        setJsTreeReloaded: function (value) {\n            this.jsTreeReloaded = value;\n        },\n\n        /**\n         * Create folder by provided current_tree_path param\n         *\n         * @param {Array} directories\n         */\n        createFolderIfNotExists: function (directories) {\n            var requestedDirectory = this.getRequestedDirectory(),\n                deferred = $.Deferred(),\n                pathArray;\n\n            if (_.isNull(requestedDirectory)) {\n                deferred.resolve(false);\n\n                return deferred.promise();\n            }\n\n            if (this.isDirectoryExist(directories, requestedDirectory)) {\n                deferred.resolve(false);\n\n                return deferred.promise();\n            }\n\n            pathArray = this.convertPathToPathsArray(requestedDirectory);\n\n            $.each(pathArray, function (i, val) {\n                if (this.isDirectoryExist(directories, val)) {\n                    pathArray.splice(i, 1);\n                }\n            }.bind(this));\n\n            createDirectory(\n                this.createDirectoryUrl,\n                pathArray\n            ).then(function () {\n                deferred.resolve(true);\n            });\n\n            return deferred.promise();\n        },\n\n        /**\n         * Verify if directory exists in array\n         *\n         * @param {Array} directories\n         * @param {String} directoryId\n         */\n        isDirectoryExist: function (directories, directoryId) {\n            var found = false;\n\n            /**\n             * Recursive search in array\n             *\n             * @param {Array} data\n             * @param {String} id\n             */\n            function recurse(data, id) {\n                var i;\n\n                for (i = 0; i < data.length; i++) {\n                    if (data[i].id === id) {\n                        found = data[i];\n                        break;\n                    } else if (data[i].children && data[i].children.length) {\n                        recurse(data[i].children, id);\n                    }\n                }\n            }\n\n            recurse(directories, directoryId);\n\n            return found;\n        },\n\n        /**\n         * Convert path string to path array e.g 'path1/path2' -> ['path1', 'path1/path2']\n         *\n         * @param {String} path\n         */\n        convertPathToPathsArray: function (path) {\n            var pathsArray = [],\n                pathString = '',\n                paths = path.split('/');\n\n            $.each(paths, function (i, val) {\n                pathString += i >= 1 ? val : val + '/';\n                pathsArray.push(i >= 1 ? pathString : val);\n            });\n\n            return pathsArray;\n        },\n\n        /**\n         * Initialize child components\n         *\n         * @returns {Object}\n         */\n        initView: function () {\n            layout(this.viewConfig);\n\n            return this;\n        },\n\n        /**\n         * Wait for condition then call provided callback\n         */\n        waitForCondition: function (condition, callback) {\n            if (condition()) {\n                setTimeout(function () {\n                    this.waitForCondition(condition, callback);\n                }.bind(this), 100);\n            } else {\n                callback();\n            }\n        },\n\n        /**\n         * Remove ability to multiple select on nodes\n         */\n        disableMultiselectBehavior: function () {\n            $.jstree.defaults.core.multiple = false;\n        },\n\n        /**\n         *  Handle jstree events\n         */\n        initEvents: function () {\n            this.disableMultiselectBehavior();\n\n            $(window).on('reload.MediaGallery', function () {\n                this.getJsonTree().then(function (data) {\n                    this.createFolderIfNotExists(data).then(function (isCreated) {\n                        if (isCreated) {\n                            this.renderDirectoryTree().then(function () {\n                                this.setJsTreeReloaded(true);\n                                this.initJsTreeEvents();\n                            }.bind(this));\n                        } else {\n                            this.updateSelectedDirectory();\n                        }\n                    }.bind(this));\n                }.bind(this));\n            }.bind(this));\n        },\n\n        /**\n         * Fire event for jstree component\n         */\n        initJsTreeEvents: function () {\n            $(this.directoryTreeSelector).on('select_node.jstree', function (element, data) {\n                this.setActiveNodeFilter(data.node.id);\n                this.setJsTreeReloaded(false);\n            }.bind(this));\n\n            $(this.directoryTreeSelector).on('loaded.jstree', function () {\n                this.updateSelectedDirectory();\n            }.bind(this));\n        },\n\n        /**\n         * Verify directory filter on init event, select folder per directory filter state\n         */\n        updateSelectedDirectory: function () {\n            var currentFilterPath = this.filterChips().filters.path,\n                requestedDirectory = this.getRequestedDirectory(),\n                currentTreePath;\n\n            if (_.isUndefined(currentFilterPath)) {\n                this.clearFiltersHandle();\n\n                return;\n            }\n\n            if (!_.isUndefined(this.bookmarks())) {\n                if (!_.size(this.bookmarks().getViewData(this.bookmarks().defaultIndex))) {\n                    setTimeout(function () {\n                        this.updateSelectedDirectory();\n                    }.bind(this), 500);\n\n                    return;\n                }\n            }\n            currentTreePath = this.isFilterApplied(currentFilterPath) || _.isNull(requestedDirectory) ?\n                currentFilterPath : requestedDirectory;\n\n            if (this.folderExistsInTree(currentTreePath)) {\n                this.locateNode(currentTreePath);\n            } else {\n                this.selectStorageRoot();\n            }\n        },\n\n        /**\n         * Verify if directory exists in folder tree\n         *\n         * @param {String} path\n         */\n        folderExistsInTree: function (path) {\n            if (!_.isUndefined(path)) {\n                return $(this.directoryTreeSelector).jstree('get_node', path);\n            }\n\n            return false;\n        },\n\n        /**\n         * Get requested directory from MediabrowserUtility\n         *\n         * @returns {String|null}\n         */\n        getRequestedDirectory: function () {\n            return !_.isUndefined(window.MediabrowserUtility) && window.MediabrowserUtility.pathId !== '' ?\n                Base64.idDecode(window.MediabrowserUtility.pathId) : null;\n        },\n\n        /**\n         * Check if need to select directory by filters state\n         *\n         * @param {String} currentFilterPath\n         */\n        isFilterApplied: function (currentFilterPath) {\n            return !_.isUndefined(currentFilterPath) && currentFilterPath !== '';\n        },\n\n        /**\n         * Locate and higlight node in jstree by path id.\n         *\n         * @param {String} path\n         */\n        locateNode: function (path) {\n            if ($(this.directoryTreeSelector).jstree('is_selected', path)) {\n                return;\n            }\n            $(this.directoryTreeSelector).jstree('deselect_node',\n                $(this.directoryTreeSelector).jstree('get_selected')\n            );\n            $(this.directoryTreeSelector).jstree('open_node', path);\n            $(this.directoryTreeSelector).jstree('select_node', path, true);\n\n        },\n\n        /**\n         * Clear filters\n         */\n        clearFiltersHandle: function () {\n            $(this.directoryTreeSelector).jstree('deselect_all');\n            this.activeNode(null);\n            this.directories().setInActive();\n        },\n\n        /**\n         * Set active node filter, or deselect if the same node clicked\n         *\n         * @param {String} nodePath\n         */\n        setActiveNodeFilter: function (nodePath) {\n            if (this.activeNode() === nodePath && !this.jsTreeReloaded) {\n                this.selectStorageRoot();\n            } else {\n                this.selectFolder(nodePath);\n            }\n        },\n\n        /**\n         * Remove folders selection -> select storage root\n         */\n        selectStorageRoot: function () {\n            var filters = {},\n                applied = this.filterChips().get('applied');\n\n            $(this.directoryTreeSelector).jstree('deselect_all');\n\n            filters = $.extend(true, filters, applied);\n            delete filters.path;\n            this.filterChips().set('applied', filters);\n            this.activeNode(null);\n            this.waitForCondition(\n                function () {\n                    return _.isUndefined(this.directories());\n                }.bind(this),\n                function () {\n                    this.directories().setInActive();\n                }.bind(this)\n            );\n        },\n\n        /**\n         * Set selected folder\n         *\n         * @param {String} path\n         */\n        selectFolder: function (path) {\n            this.activeNode(path);\n\n            this.waitForCondition(\n                function () {\n                    return _.isUndefined(this.directories());\n                }.bind(this),\n                function () {\n                    this.directories().setActive(path);\n                }.bind(this)\n            );\n\n            this.applyFilter(path);\n        },\n\n        /**\n         * Remove active node from directory tree, and select next\n         */\n        removeNode: function () {\n            $(this.directoryTreeSelector).jstree('delete_node',\n                $(this.directoryTreeSelector).jstree('get_selected')\n            );\n        },\n\n        /**\n         * Apply folder filter by path\n         *\n         * @param {String} path\n         */\n        applyFilter: function (path) {\n            var filters = {},\n                applied = this.filterChips().get('applied');\n\n            filters = $.extend(true, filters, applied);\n            filters.path = path;\n            this.filterChips().set('applied', filters);\n        },\n\n        /**\n         * Reload jstree and update jstree events\n         */\n        reloadJsTree: function () {\n            var deferred = $.Deferred();\n\n            this.getJsonTree().then(function (data) {\n                $(this.directoryTreeSelector).jstree(true).settings.core.data = data;\n                $(this.directoryTreeSelector).jstree(true).refresh(false, true);\n                this.setJsTreeReloaded(true);\n                deferred.resolve();\n            }.bind(this));\n\n            return deferred.promise();\n        },\n\n        /**\n         * Get json data for jstree\n         */\n        getJsonTree: function () {\n            var deferred = $.Deferred();\n\n            $.ajax({\n                url: this.getDirectoryTreeUrl,\n                type: 'GET',\n                dataType: 'json',\n\n                /**\n                 * Success handler for request\n                 *\n                 * @param {Object} data\n                 */\n                success: function (data) {\n                    deferred.resolve(data);\n                },\n\n                /**\n                 * Error handler for request\n                 *\n                 * @param {Object} jqXHR\n                 * @param {String} textStatus\n                 */\n                error: function (jqXHR, textStatus) {\n                    deferred.reject();\n                    throw textStatus;\n                }\n            });\n\n            return deferred.promise();\n        },\n\n        /**\n         * Initialize directory tree\n         *\n         * @param {Array} data\n         */\n        createTree: function (data) {\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            $(this.directoryTreeSelector).jstree({\n                plugins: [],\n                checkbox: {\n                    three_state: false,\n                    cascade: ''\n                },\n                core: {\n                    data: data,\n                    check_callback: true,\n                    themes: {\n                        dots: false\n                    }\n                }\n            });\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/directory/actions/createDirectory.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/translate'\n], function ($, $t) {\n    'use strict';\n\n    return function (createFolderUrl, paths) {\n        var deferred = $.Deferred(),\n            message,\n            data = {\n                paths: paths\n            };\n\n        $.ajax({\n            type: 'POST',\n            url: createFolderUrl,\n            dataType: 'json',\n            showLoader: true,\n            data: data,\n            context: this,\n\n            /**\n             * Resolve  if success, reject with response message othervise\n             *\n             * @param {Object} response\n             */\n            success: function (response) {\n                if (response.success) {\n                    deferred.resolve(response.message);\n\n                    return;\n                }\n\n                deferred.reject(response.message);\n            },\n\n            /**\n             * Extract the message and reject\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n\n                if (typeof response.responseJSON === 'undefined' ||\n                    typeof response.responseJSON.message === 'undefined'\n                ) {\n                    message = $t('Could not create the directory.');\n                } else {\n                    message = response.responseJSON.message;\n                }\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_MediaGalleryUi/js/directory/actions/deleteDirectory.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/translate'\n], function ($, $t) {\n    'use strict';\n\n    return function (deleteFolderUrl, path) {\n        var deferred = $.Deferred(),\n            message;\n\n        $.ajax({\n            type: 'POST',\n            url: deleteFolderUrl,\n            dataType: 'json',\n            showLoader: true,\n            data: {\n                path: path\n            },\n            context: this,\n\n            /**\n             * Resolve  if delete folder success, reject with response message othervise\n             *\n             * @param {Object} response\n             */\n            success: function (response) {\n                if (response.success) {\n                    deferred.resolve(response.message);\n\n                    return;\n                }\n\n                deferred.reject(response.message);\n            },\n\n            /**\n             * Extract the message and reject\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n\n                if (typeof response.responseJSON === 'undefined' ||\n                    typeof response.responseJSON.message === 'undefined'\n                ) {\n                    message = $t('Could not delete the directory.');\n                } else {\n                    message = response.responseJSON.message;\n                }\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_MediaGalleryUi/js/grid/masonry.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/masonry',\n    'jquery'\n], function (Masonry, $) {\n    'use strict';\n\n    return Masonry.extend({\n        defaults: {\n            modules: {\n                provider: '${ $.provider }'\n            }\n        },\n\n        /**\n         * Init component\n         *\n         * @return {Object}\n         */\n        initialize: function () {\n            this._super();\n            this.initEvents();\n\n            return this;\n        },\n\n        /**\n         * Initialize events\n         */\n        initEvents: function () {\n            $(window).on('folderDeleted.enhancedMediaGallery', this.reloadGrid.bind(this));\n        },\n\n        /**\n         * Reload grid\n         */\n        reloadGrid: function () {\n            var provider = this.provider(),\n                dataStorage = provider.storage();\n\n            dataStorage.clearRequests();\n            provider.reload();\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/grid/messages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiElement',\n    'escaper'\n], function (Element, escaper) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            template: 'Magento_MediaGalleryUi/grid/messages',\n            messageDelay: 5,\n            messages: [],\n            allowedTags: ['div', 'span', 'b', 'strong', 'i', 'em', 'u', 'a']\n        },\n\n        /**\n         * Init observable variables\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'messages'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Get messages\n         *\n         * @returns {Array}\n         */\n        get: function () {\n            return this.messages();\n        },\n\n        /**\n         * Add message\n         *\n         * @param {String} type\n         * @param {String} message\n         */\n        add: function (type, message) {\n            this.messages.push({\n                code: type,\n                message: message\n            });\n        },\n\n        /**\n         * Clear messages\n         */\n        clear: function () {\n            this.messages.removeAll();\n        },\n\n        /**\n         * Schedule message cleanup\n         *\n         * @param {Number} delay\n         */\n        scheduleCleanup: function (delay) {\n            // eslint-disable-next-line no-unused-vars\n            var timerId;\n\n            delay = delay || this.messageDelay;\n\n            // eslint-disable-next-line no-unused-vars\n            timerId = setTimeout(function () {\n                clearTimeout(timerId);\n                this.clear();\n            }.bind(this), Number(delay) * 1000);\n        },\n\n        /**\n         * Prepare the given message to be rendered as HTML\n         *\n         * @param {String} message\n         * @return {String}\n         */\n        prepareMessageUnsanitizedHtml: function (message) {\n            return escaper.escapeHtml(message, this.allowedTags);\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/grid/sortBy.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/sortBy'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            columnIndexMap: {}\n        },\n\n        /**\n         * Prepared sort order options\n         */\n        preparedOptions: function (columns) {\n            var index = 0,\n                sortBy;\n\n            if (columns && columns.length > 0) {\n                columns.map(function (column) {\n                    if (column.sortable === true) {\n                        sortBy = column['sort_by'] || {};\n\n                        if (sortBy.excluded) {\n                            return;\n                        }\n\n                        this.options.push({\n                            value: column.index,\n                            label: column.label,\n                            sortByField: sortBy.field,\n                            sortDirection: sortBy.direction\n                        });\n\n                        this.columnIndexMap[column.index] = index++;\n\n                        this.isVisible(true);\n                    } else {\n                        this.isVisible(false);\n                    }\n                }.bind(this));\n            }\n        },\n\n        /**\n         * Apply changes\n         */\n        applyChanges: function () {\n            var column = this.getColumn(this.selectedOption());\n\n            this.applied({\n                field: column.sortByField || this.selectedOption(),\n                direction: column.sortDirection || this.sorting\n            });\n        },\n\n        /**\n         * Get column by index\n         *\n         * @param {String} optionIndex\n         * @returns {Object}\n         */\n        getColumn: function (optionIndex) {\n            return this.options[this.columnIndexMap[optionIndex]];\n        },\n\n        /**\n         * Select default option\n         */\n        selectDefaultOption: function () {\n            this.selectedOption(this.options[0].value);\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/grid/columns/image.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/grid/columns/column',\n    'uiLayout',\n    'underscore'\n], function ($, Column, layout, _) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_MediaGalleryUi/grid/columns/image',\n            messageContentSelector: 'ul.messages',\n            mediaGalleryContainerSelector: '.media-gallery-container',\n            deleteImageUrl: 'media_gallery/image/delete',\n            addSelectedBtnSelector: '#add_selected',\n            deleteSelectedBtnSelector: '#delete_selected',\n            gridSelector: '[data-id=\"media-gallery-masonry-grid\"]',\n            selected: null,\n            allowedActions: [],\n            fields: {\n                id: 'id',\n                url: 'url',\n                alt: 'name'\n            },\n            modules: {\n                actions: '${ $.name }_actions',\n                provider: '${ $.provider }',\n                messages: '${ $.messagesName }',\n                massaction: '${ $.massactionComponentName }'\n            },\n            imports: {\n                activeDirectory: '${ $.mediaGalleryDirectoryComponent }:activeNode'\n            },\n            listens: {\n                activeDirectory: 'selectDirectoryHandle',\n                '${ $.massactionComponentName }:massActionMode': 'updateSelected'\n            },\n            viewConfig: [\n                {\n                    component: 'Magento_MediaGalleryUi/js/grid/columns/image/actions',\n                    name: '${ $.name }_actions',\n                    imageModelName: '${ $.name }',\n                    allowedActions: '${ $.allowedActions }'\n                }\n            ]\n        },\n\n        /**\n         * Initialize the component\n         *\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n            this.initView();\n            $(window).on('fileDeleted.enhancedMediaGallery', this.reloadMediaGrid.bind(this));\n            $(window).on('reload.MediaGallery', this.reloadGrid.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Init observable variables\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'selected'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Is massaction mode active.\n         */\n        isMassActionMode: function () {\n            return this.massaction().massActionMode();\n        },\n\n        /**\n         * Returns url to given record.\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {String}\n         */\n        getUrl: function (record) {\n            return record[this.fields.url];\n        },\n\n        /**\n         * Returns id to given record.\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {Number}\n         */\n        getId: function (record) {\n            return record[this.fields.id];\n        },\n\n        /**\n         * Update selected items per massaction mode.\n         */\n        updateSelected: function () {\n            this.selected({});\n            this.hideAddSelectedAndDeleteButon();\n        },\n\n        /**\n         * Returns name to given record.\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {String}\n         */\n        getImageAlt: function (record) {\n            return record[this.fields.alt];\n        },\n\n        /**\n         * Check if the record is currently selected\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {Boolean}\n         */\n        isSelected: function (record) {\n            if (_.isNull(this.selected())) {\n                return false;\n            }\n\n            if (this.massaction().massActionMode()) {\n                return this.selected()[record.id];\n            }\n\n            return this.getId(this.selected()) === this.getId(record);\n        },\n\n        /**\n         * Click on image\n         *\n         * @param {Object} record\n         * @param {Boolean} collapsibleOpened\n         */\n        clickOnImage: function (record, collapsibleOpened) {\n            if (!collapsibleOpened) {\n                this.select(record);\n            }\n        },\n\n        /**\n         * Click on three-dots\n         *\n         * @param {Object} record\n         * @param {Boolean} collapsibleOpened\n         */\n        clickOnThreeDots: function (record, collapsibleOpened) {\n            if (!this.isSelected(record) || collapsibleOpened) {\n                this.select(record);\n            }\n        },\n\n        /**\n         * Handle checkbox click.\n         */\n        checkboxClick: function (record) {\n            var items = this.selected();\n\n            if (this.selected()[record.id])  {\n                delete items[record.id];\n                this.selected(items);\n            } else {\n                items[record.id] = record.id;\n                this.selected(items);\n            }\n\n            return true;\n        },\n\n        /**\n         * Set the record as selected\n         */\n        select: function (record) {\n            if (this.massaction().massActionMode()) {\n                return this.checkboxClick(record);\n            }\n\n            this.isSelected(record) ? this.selected(null) : this.selected(record);\n            this.toggleAddSelectedButton();\n\n            return true;\n        },\n\n        /**\n         * Deselect the record\n         */\n        deselectImage: function () {\n            this.selected(null);\n            this.toggleAddSelectedButton();\n        },\n\n        /**\n         * Get the selected record\n         * @returns {Object}\n         */\n        getSelected: function () {\n            return this.selected();\n        },\n\n        /**\n         * Initialize child components\n         *\n         * @returns {Object}\n         */\n        initView: function () {\n            layout(this.viewConfig);\n\n            return this;\n        },\n\n        /**\n         * Toggle add selected button\n         */\n        toggleAddSelectedButton: function () {\n            if (this.selected() === null) {\n                this.hideAddSelectedAndDeleteButon();\n\n                return;\n            }\n\n            if (this.allowedActions.includes('insert')) {\n                $(this.addSelectedBtnSelector).removeClass('no-display');\n            }\n\n            if (this.allowedActions.includes('delete')) {\n                $(this.deleteSelectedBtnSelector).removeClass('no-display');\n            }\n        },\n\n        /**\n         * Hide add selected and Delete button\n         */\n        hideAddSelectedAndDeleteButon: function () {\n            $(this.addSelectedBtnSelector).addClass('no-display');\n            $(this.deleteSelectedBtnSelector).addClass('no-display');\n        },\n\n        /**\n         * @param {jQuery.event} e\n         * @param {Object} data\n         */\n        reloadMediaGrid: function (e, data) {\n            if (data.reload) {\n                this.reloadGrid();\n            }\n\n            if (data.message && data.code) {\n                this.addMessage(data.code, data.message);\n            }\n            this.hideAddSelectedAndDeleteButon();\n        },\n\n        /**\n         * Reload grid\n         */\n        reloadGrid: function () {\n            var provider = this.provider(),\n                dataStorage = provider.storage();\n\n            dataStorage.clearRequests();\n            provider.reload();\n        },\n\n        /**\n         * Add message\n         *\n         * @param {String} code\n         * @param {String} message\n         */\n        addMessage: function (code, message) {\n            this.messages().add(code, message);\n            this.closeContextMenu();\n            this.scrollToMessageContent();\n            this.messages().scheduleCleanup();\n        },\n\n        /**\n         * Listener to select directory event\n         *\n         * @param {String} path\n         */\n        selectDirectoryHandle: function (path) {\n            if (this.selected() &&\n                this.selected().directory !== path  &&\n                !this.massaction().massActionMode()) {\n                this.deselectImage();\n            }\n        },\n\n        /**\n         * Action to close the context menu in media gallery.\n         */\n        closeContextMenu: function () {\n            $(this.gridSelector).trigger('click');\n        },\n\n        /**\n         * Scroll to the top of media gallery page\n         */\n        scrollToMessageContent: function () {\n            var scrollTargetElement = $(this.messageContentSelector),\n                scrollTargetContainer = $(this.mediaGalleryContainerSelector);\n\n            scrollTargetContainer.find(scrollTargetElement).get(0).scrollIntoView({\n                behavior: 'smooth',\n                block: 'center',\n                inline: 'nearest'\n            });\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/grid/columns/image/actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation',\n    'Magento_MediaGalleryUi/js/grid/columns/image/insertImageAction',\n    'mage/translate',\n    'Magento_Ui/js/lib/view/utils/async'\n], function ($, _, Component, deleteImageWithDetailConfirmation, image, $t) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_MediaGalleryUi/grid/columns/image/actions',\n            mediaGalleryImageDetailsName: 'mediaGalleryImageDetails',\n            mediaGalleryEditDetailsName: 'mediaGalleryEditDetails',\n            allowedActions: [],\n            actionsList: [\n                {\n                    name: 'image-details',\n                    title: $t('View Details'),\n                    classes: 'action-menu-item',\n                    handler: 'viewImageDetails'\n                },\n                {\n                    name: 'edit',\n                    title: $t('Edit'),\n                    classes: 'action-menu-item',\n                    handler: 'editImageDetails'\n                },\n                {\n                    name: 'delete',\n                    title: $t('Delete'),\n                    classes: 'action-menu-item media-gallery-delete-assets',\n                    handler: 'deleteImageAction'\n                }\n            ],\n            modules: {\n                imageModel: '${ $.imageModelName }',\n                mediaGalleryImageDetails: '${ $.mediaGalleryImageDetailsName }',\n                mediaGalleryEditDetails: '${ $.mediaGalleryEditDetailsName }'\n            }\n        },\n\n        /**\n         * Initialize the component\n         *\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n            this.initEvents();\n\n            this.actionsList = this.actionsList.filter(function (item) {\n                return this.allowedActions.includes(item.name);\n            }.bind(this));\n\n            if (!this.allowedActions.includes('delete')) {\n                $.async('.media-gallery-delete-assets', function () {\n                    $('.media-gallery-delete-assets').off('click').addClass('action-disabled');\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Initialize image action events\n         */\n        initEvents: function () {\n            $(this.imageModel().addSelectedBtnSelector).on('click', function () {\n                image.insertImage(\n                    this.imageModel().getSelected(),\n                    {\n                        onInsertUrl: this.imageModel().onInsertUrl,\n                        storeId: this.imageModel().storeId\n                    }\n                );\n            }.bind(this));\n            $(this.imageModel().deleteSelectedBtnSelector).on('click', function () {\n                this.deleteImageAction(this.imageModel().selected());\n            }.bind(this));\n\n        },\n\n        /**\n         * Delete image action\n         *\n         * @param {Object} record\n         */\n        deleteImageAction: function (record) {\n            var imageDetailsUrl = this.mediaGalleryImageDetails().imageDetailsUrl,\n                deleteImageUrl = this.imageModel().deleteImageUrl;\n\n            deleteImageWithDetailConfirmation.deleteImageAction([record.id], imageDetailsUrl, deleteImageUrl);\n        },\n\n        /**\n         * View image details\n         *\n         * @param {Object} record\n         */\n        viewImageDetails: function (record) {\n            var recordId = this.imageModel().getId(record);\n\n            this.mediaGalleryImageDetails().showImageDetailsById(recordId);\n        },\n\n        /**\n         * Edit image details\n         *\n         * @param {Object} record\n         */\n        editImageDetails: function (record) {\n            var recordId = this.imageModel().getId(record);\n\n            this.mediaGalleryEditDetails().showEditDetailsPanel(recordId);\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/grid/columns/image/insertImageAction.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global FORM_KEY, tinyMceEditors */\ndefine([\n    'jquery',\n    'wysiwygAdapter',\n    'underscore',\n    'mage/translate'\n], function ($, wysiwyg, _, $t) {\n    'use strict';\n\n    return {\n\n        /**\n         * Insert provided image in wysiwyg if enabled, or widget\n         *\n         * @param {Object} record\n         * @param {Object} config\n         * @returns {Boolean}\n         */\n        insertImage: function (record, config) {\n            var targetElement, forceStaticPath;\n\n            if (record === null) {\n                return false;\n            }\n            targetElement = this.getTargetElement(window.MediabrowserUtility.targetElementId);\n\n            if (!targetElement.length) {\n                window.MediabrowserUtility.closeDialog();\n                throw $t('Target element not found for content update');\n            }\n\n            forceStaticPath = typeof targetElement !== 'function' && targetElement.data('force_static_path') ? 1 : 0;\n\n            $.ajax({\n                url: config.onInsertUrl,\n                data: {\n                    filename: record['encoded_id'],\n                    'store_id': config.storeId,\n                    'as_is': typeof targetElement !== 'function' && targetElement.is('textarea') ? 1 : 0,\n                    'force_static_path': forceStaticPath,\n                    'form_key': FORM_KEY\n                },\n                context: this,\n                showLoader: true\n            }).done($.proxy(function (data) {\n                if (typeof targetElement === 'function') {\n                    targetElement(data.content, {text: record['title']});\n                } else if (targetElement.is('textarea')) {\n                    this.insertAtCursor(targetElement.get(0), data.content);\n                    targetElement.focus();\n                    $(targetElement).trigger('change');\n                } else {\n                    targetElement.val(data.content)\n                        .data('size', data.size)\n                        .data('mime-type', data.type)\n                        .trigger('change');\n                }\n            }, this));\n            window.MediabrowserUtility.closeDialog();\n\n            if (typeof targetElement !== 'function') {\n                targetElement.focus();\n                $(targetElement).trigger('change');\n            }\n        },\n\n        /**\n         * Insert image to target instance.\n         *\n         * @param {Object} element\n         * @param {*} value\n         */\n        insertAtCursor: function (element, value) {\n            var sel, startPos, endPos, scrollTop;\n\n            if ('selection' in document) {\n                //For browsers like Internet Explorer\n                element.focus();\n                sel = document.selection.createRange();\n                sel.text = value;\n                element.focus();\n            } else if (element.selectionStart || element.selectionStart == '0') { //eslint-disable-line eqeqeq\n                //For browsers like Firefox and Webkit based\n                startPos = element.selectionStart;\n                endPos = element.selectionEnd;\n                scrollTop = element.scrollTop;\n                element.value = element.value.substring(0, startPos) + value +\n                    element.value.substring(startPos, endPos) + element.value.substring(endPos, element.value.length);\n                element.focus();\n                element.selectionStart = startPos + value.length;\n                element.selectionEnd = startPos + value.length + element.value.substring(startPos, endPos).length;\n                element.scrollTop = scrollTop;\n            } else {\n                element.value += value;\n                element.focus();\n            }\n        },\n\n        /**\n         * Return opener Window object if it exists, not closed and editor is active\n         *\n         * @param {String} targetElementId\n         * return {Object|null}\n         */\n        getMediaBrowserOpener: function (targetElementId) {\n            if (!_.isUndefined(wysiwyg) && wysiwyg.get(targetElementId) && !_.isUndefined(tinyMceEditors)) {\n                return tinyMceEditors.get(targetElementId).getMediaBrowserOpener();\n            }\n\n            return null;\n        },\n\n        /**\n         * Get target element\n         *\n         * @param {String} targetElementId\n         * @returns {*|n.fn.init|jQuery|HTMLElement}\n         */\n        getTargetElement: function (targetElementId) {\n\n            if (!_.isUndefined(wysiwyg) && wysiwyg.get(targetElementId)) {\n                return this.getMediaBrowserOpener(targetElementId) || window;\n            }\n\n            return $('#' + targetElementId);\n        }\n    };\n});\n","Magento_MediaGalleryUi/js/grid/massaction/massactionView.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'uiComponent',\n    'mage/translate',\n    'text!Magento_MediaGalleryUi/template/grid/massactions/massactionButtons.html'\n], function ($, Component, $t, massactionButtons) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            gridSelector: '[data-id=\"media-gallery-masonry-grid\"]',\n            standAloneTitle: 'Manage Gallery',\n            slidePanelTitle: 'Media Gallery',\n            defaultTitle: null,\n            are: null,\n            standAloneArea: 'standalone',\n            slidepanelArea: 'slidepanel',\n            massactionButtonsSelector: '.massaction-buttons',\n            buttonsSelectorStandalone: '.page-actions-buttons',\n            buttonsSelectorSlidePanel: '.page-actions.floating-header',\n            buttons: '.page-main-actions :button',\n            massactionModeTitle: $t('Select Images to Delete')\n        },\n\n        /**\n         * Initializes media gallery massaction component.\n         *\n         * @returns {Sticky} Chainable.\n         */\n        initialize: function () {\n            this._super().observe([\n                'massActionMode'\n            ]);\n\n            return this;\n        },\n\n        /**\n         * Switch massaction view state per active mode.\n         */\n        switchView: function () {\n            this.changePageTitle();\n            this.switchButtons();\n        },\n\n        /**\n         * Hide or show buttons per active mode.\n         */\n        switchButtons: function () {\n            if (this.massActionMode()) {\n                this.activateMassactionButtonView();\n            } else {\n                this.revertButtonsToDefaultView();\n            }\n        },\n\n        /**\n         * Sets buttons to default regular -mode view.\n         */\n        revertButtonsToDefaultView: function () {\n            $(this.buttons).removeClass('no-display');\n            $(this.massactionButtonsSelector).remove();\n        },\n\n        /**\n          * Activate mass action buttons view\n          */\n        activateMassactionButtonView: function () {\n            var buttonsContainer;\n\n            $(this.buttons).addClass('no-display');\n\n            buttonsContainer =  this.area === this.standAloneArea ?\n                this.buttonsSelectorStandalone :\n                this.buttonsSelectorSlidePanel;\n\n            $(buttonsContainer).append(massactionButtons);\n            $(this.massactionButtonsSelector).applyBindings();\n        },\n\n        /**\n         * Change page title per active mode.\n         */\n        changePageTitle: function () {\n            var title = $('h1:contains(' + this.standAloneTitle + ')'),\n                titleSelector;\n\n            if (title.length === 1)  {\n                titleSelector = title;\n                this.area = this.standAloneArea;\n            } else {\n                titleSelector = $('h1:contains(' + this.slidePanelTitle + ')');\n                this.area = this.slidepanelArea;\n            }\n\n            if (this.massActionMode()) {\n                this.defaultTitle = titleSelector.text();\n                titleSelector.text(this.massactionModeTitle);\n            } else {\n                titleSelector = $('h1:contains(' + this.massactionModeTitle + ')');\n                titleSelector.text(this.defaultTitle);\n            }\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/grid/massaction/massactions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'uiComponent',\n    'Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation',\n    'uiLayout',\n    'underscore',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate'\n], function ($, Component, DeleteImages, Layout, _, uiAlert, $t) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            allowedActions: [],\n            deleteButtonSelector: '#delete_selected_massaction',\n            deleteImagesSelector: '#delete_massaction',\n            mediaGalleryImageDetailsName: 'mediaGalleryImageDetails',\n            modules: {\n                massactionView: '${ $.name }_view',\n                imageModel: '${ $.imageModelName }',\n                mediaGalleryImageDetails: '${ $.mediaGalleryImageDetailsName }'\n            },\n            viewConfig: [\n                {\n                    component: 'Magento_MediaGalleryUi/js/grid/massaction/massactionView',\n                    name: '${ $.name }_view'\n                }\n            ],\n            imports: {\n                imageItems: '${ $.mediaGalleryProvider }:data.items'\n            },\n            listens: {\n                imageItems: 'checkButtonVisibility'\n            },\n            exports: {\n                massActionMode: '${ $.name }_view:massActionMode'\n            }\n        },\n\n        /**\n         * Initializes media gallery massaction component.\n         *\n         * @returns {Sticky} Chainable.\n         */\n        initialize: function () {\n            this._super().observe([\n                'massActionMode'\n            ]);\n            this.initView();\n            this.initEvents();\n\n            return this;\n        },\n\n        /**\n         * Initialize child components\n         *\n         * @returns {Object}\n         */\n        initView: function () {\n            Layout(this.viewConfig);\n\n            return this;\n        },\n\n        /**\n         * Initilize massactions events for media gallery grid.\n         */\n        initEvents: function () {\n            $(window).on('massAction.MediaGallery', function () {\n                if (this.massActionMode()) {\n                    return;\n                }\n                this.imageModel().selected(null);\n                this.massActionMode(true);\n                this.switchMode();\n            }.bind(this));\n\n            $(window).on('terminateMassAction.MediaGallery', function () {\n                if (!this.massActionMode()) {\n                    return;\n                }\n\n                this.massActionMode(false);\n                this.switchMode();\n                this.imageModel().updateSelected();\n            }.bind(this));\n        },\n\n        /**\n         * Return total selected items.\n         */\n        getSelectedCount: function () {\n            if (this.massActionMode() && !_.isNull(this.imageModel().selected())) {\n                return Object.keys(this.imageModel().selected()).length;\n            }\n\n            return 0;\n        },\n\n        /**\n         * If images records less than one, disable \"delete images\" button\n         */\n        checkButtonVisibility: function () {\n            if (!this.allowedActions.includes('delete_assets')) {\n                return;\n            }\n\n            if (this.imageItems.length < 1) {\n                $(this.deleteImagesSelector).addClass('disabled');\n            } else {\n                $(this.deleteImagesSelector).removeClass('disabled');\n            }\n        },\n\n        /**\n         * Switch massaction per current event.\n         */\n        switchMode: function () {\n            this.massactionView().switchView();\n            this.handleDeleteAction();\n        },\n\n        /**\n         * Change Default  behavior of delete image to bulk deletion.\n         */\n        handleDeleteAction: function () {\n            if (this.massActionMode()) {\n                $(this.deleteButtonSelector).on('massDelete.MediaGallery', function () {\n                    if (this.getSelectedCount() < 1) {\n                        uiAlert({\n                            content: $t('You need to select at least one image')\n                        });\n\n                    } else {\n                        DeleteImages.deleteImageAction(\n                            this.imageModel().selected(),\n                            this.mediaGalleryImageDetails().imageDetailsUrl,\n                            this.imageModel().deleteImageUrl\n                        ).then(function (response) {\n                            if (response.status === 'canceled') {\n                                return;\n                            }\n                            $(window).trigger('terminateMassAction.MediaGallery');\n                        });\n                    }\n                }.bind(this));\n            }\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/image/image-actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiElement',\n    'Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation',\n    'Magento_MediaGalleryUi/js/grid/columns/image/insertImageAction',\n    'Magento_MediaGalleryUi/js/action/saveDetails',\n    'mage/validation'\n], function ($, _, Element, deleteImageWithDetailConfirmation, addSelected, saveDetails) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            modalSelector: '',\n            modalWindowSelector: '',\n            mediaGalleryImageDetailsName: 'mediaGalleryImageDetails',\n            mediaGalleryEditDetailsName: 'mediaGalleryEditDetails',\n            template: 'Magento_MediaGalleryUi/image/actions',\n            modules: {\n                imageModel: '${ $.imageModelName }',\n                mediaGalleryImageDetails: '${ $.mediaGalleryImageDetailsName }',\n                mediaGalleryEditDetails: '${ $.mediaGalleryEditDetailsName }'\n            }\n        },\n\n        /**\n         * Initialize the component\n         *\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n            $(window).on('fileDeleted.enhancedMediaGallery', this.closeViewDetailsModal.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Close the images details modal\n         */\n        closeModal: function () {\n            var modalElement = $(this.modalSelector),\n                modalWindow = $(this.modalWindowSelector);\n\n            if (!modalWindow.hasClass('_show') || !modalElement.length || _.isUndefined(modalElement.modal)) {\n                return;\n            }\n\n            this.mediaGalleryEditDetails().keywordsSelect().cacheOptions.plain = [];\n            modalElement.modal('closeModal');\n        },\n\n        /**\n         * Opens the image edit panel\n         */\n        editImageAction: function () {\n            var record = this.imageModel().getSelected().id;\n\n            this.mediaGalleryEditDetails().showEditDetailsPanel(record);\n        },\n\n        /**\n         * Delete image action\n         */\n        deleteImageAction: function () {\n            var imageDetailsUrl = this.mediaGalleryImageDetails().imageDetailsUrl,\n                deleteImageUrl = this.imageModel().deleteImageUrl;\n\n            deleteImageWithDetailConfirmation.deleteImageAction(\n                [this.imageModel().getSelected().id],\n                imageDetailsUrl,\n                deleteImageUrl\n            );\n        },\n\n        /**\n         * Save image details action\n         */\n        saveImageDetailsAction: function () {\n            var saveDetailsUrl = this.mediaGalleryEditDetails().saveDetailsUrl,\n                modalElement = $(this.modalSelector),\n                form = modalElement.find('#image-edit-details-form'),\n                imageId = this.imageModel().getSelected().id,\n                keywords = this.mediaGalleryEditDetails().selectedKeywords(),\n                imageDetails = this.mediaGalleryImageDetails(),\n                imageEditDetails = this.mediaGalleryEditDetails();\n\n            if (form.validation('isValid')) {\n                saveDetails(\n                    saveDetailsUrl,\n                    [form.serialize(), $.param({\n                        'keywords': keywords\n                    })].join('&')\n                ).then(function () {\n                    this.closeModal();\n                    this.imageModel().reloadGrid();\n                    imageDetails.removeCached(imageId);\n                    imageEditDetails.removeCached(imageId);\n\n                    if (imageDetails.isActive()) {\n                        imageDetails.showImageDetailsById(imageId);\n                    }\n                }.bind(this));\n            }\n        },\n\n        /**\n         * Add Image\n         */\n        addImage: function () {\n            addSelected.insertImage(\n                this.imageModel().getSelected(),\n                {\n                    onInsertUrl: this.imageModel().onInsertUrl,\n                    storeId: this.imageModel().storeId\n                }\n            );\n            this.closeModal();\n        },\n\n        /**\n         * Close view details modal after confirm deleting image\n         */\n        closeViewDetailsModal: function () {\n            this.closeModal();\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/image/image-details.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'Magento_MediaGalleryUi/js/action/getDetails'\n], function ($, _, Component, getDetails) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_MediaGalleryUi/image/image-details',\n            modalSelector: '',\n            modalWindowSelector: '',\n            imageDetailsUrl: '/media_gallery/image/details',\n            images: [],\n            tagListLimit: 7,\n            showAllTags: false,\n            image: null,\n            modules: {\n                mediaGridMessages: '${ $.mediaGridMessages }'\n            }\n        },\n\n        /**\n         * Init observable variables\n         *\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'image',\n                    'showAllTags'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Show image details by ID\n         *\n         * @param {String} imageId\n         */\n        showImageDetailsById: function (imageId) {\n            if (_.isUndefined(this.images[imageId])) {\n                getDetails(this.imageDetailsUrl, [imageId]).then(function (imageDetails) {\n                    this.images[imageId] = imageDetails[imageId];\n                    this.image(this.images[imageId]);\n                    this.openImageDetailsModal();\n                }.bind(this)).fail(function (error) {\n                    this.addMediaGridMessage('error', error);\n                }.bind(this));\n\n                return;\n            }\n\n            if (this.image() && this.image().id === imageId) {\n                this.openImageDetailsModal();\n\n                return;\n            }\n\n            this.image(this.images[imageId]);\n            this.openImageDetailsModal();\n        },\n\n        /**\n         * Open image details popup\n         */\n        openImageDetailsModal: function () {\n            var modalElement = $(this.modalSelector);\n\n            if (!modalElement.length || _.isUndefined(modalElement.modal)) {\n                return;\n            }\n\n            this.showAllTags(false);\n            modalElement.modal('openModal');\n        },\n\n        /**\n         * Close image details popup\n         */\n        closeImageDetailsModal: function () {\n            var modalElement = $(this.modalSelector);\n\n            if (!modalElement.length || _.isUndefined(modalElement.modal)) {\n                return;\n            }\n\n            modalElement.modal('closeModal');\n        },\n\n        /**\n         * Add media grid message\n         *\n         * @param {String} code\n         * @param {String} message\n         */\n        addMediaGridMessage: function (code, message) {\n            this.mediaGridMessages().add(code, message);\n            this.mediaGridMessages().scheduleCleanup();\n        },\n\n        /**\n         * Get tag text\n         *\n         * @param {String} tagText\n         * @param {Number} tagIndex\n         * @return {String}\n         */\n        getTagText: function (tagText, tagIndex) {\n            return tagText + (this.image().tags.length - 1 === tagIndex ? '' : ',');\n        },\n\n        /**\n         * Show all image tags\n         */\n        showMoreImageTags: function () {\n            this.showAllTags(true);\n        },\n\n        /**\n         * Is value an object\n         *\n         * @param {*} value\n         * @returns {Boolean}\n         */\n        isArray: function (value) {\n            return _.isArray(value);\n        },\n\n        /**\n         * Is value not empty\n         *\n         * @param {*} value\n         * @returns {Boolean}\n         */\n        notEmpty: function (value) {\n            return value.length > 0;\n        },\n\n        /**\n         * Get name and number text for used in link\n         *\n         * @param {Object} item\n         * @returns {String}\n         */\n        getUsedInText: function (item) {\n            return item.name +  '(' + item.number + ')';\n        },\n\n        /**\n         * Get filter url\n         *\n         * @param {String} link\n         */\n        getFilterUrl: function (link) {\n            return link + '?filters[asset_id]=[' + this.image().id + ']';\n        },\n\n        /**\n         * Check if details modal is active\n         * @return {Boolean}\n         */\n        isActive: function () {\n            return $(this.modalWindowSelector).hasClass('_show');\n        },\n\n        /**\n         * Remove image details\n         *\n         * @param {String} id\n         */\n        removeCached: function (id) {\n            delete this.images[id];\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/image/image-edit.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiComponent',\n    'uiLayout',\n    'Magento_Ui/js/lib/key-codes',\n    'Magento_MediaGalleryUi/js/action/getDetails',\n    'mage/validation'\n], function ($, _, Component, layout, keyCodes, getDetails) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_MediaGalleryUi/image/image-edit',\n            modalSelector: '.media-gallery-edit-image-details-modal',\n            imageEditDetailsUrl: '/media_gallery/image/details',\n            saveDetailsUrl: '/media_gallery/image/saveDetails',\n            images: [],\n            image: null,\n            keywordOptions: [],\n            selectedKeywords: [],\n            newKeyword: '',\n            newKeywordSelector: '#keyword',\n            modules: {\n                mediaGridMessages: '${ $.mediaGridMessages }',\n                keywordsSelect: '${ $.name }_keywords'\n            },\n            viewConfig: [\n                {\n                    component: 'Magento_Ui/js/form/element/ui-select',\n                    name: '${ $.name }_keywords',\n                    template: 'ui/grid/filters/elements/ui-select',\n                    disableLabel: true\n                }\n            ],\n            exports: {\n                keywordOptions: '${ $.name }_keywords:options'\n            },\n            links: {\n                selectedKeywords: '${ $.name }_keywords:value'\n            }\n        },\n\n        /**\n         * Initialize the component\n         *\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super().initView();\n\n            return this;\n        },\n\n        /**\n         * Add a new keyword to select\n         */\n        addKeyword: function () {\n            var options = this.keywordOptions(),\n                selected = this.selectedKeywords(),\n                newKeywordField = $(this.newKeywordSelector);\n\n            newKeywordField.validation();\n\n            if (!newKeywordField.validation('isValid') || this.newKeyword() === '') {\n                return;\n            }\n\n            options.push(this.getOptionForKeyword(this.newKeyword()));\n            selected.push(this.newKeyword());\n            this.newKeyword('');\n\n            this.keywordOptions(options);\n            this.selectedKeywords(selected);\n        },\n\n        /**\n         * Create an option object based on keyword string\n         *\n         * @param {String} keyword\n         * @returns {Object}\n         */\n        getOptionForKeyword: function (keyword) {\n            return {\n                'is_active': 1,\n                level: 1,\n                value: keyword,\n                label: keyword\n            };\n        },\n\n        /**\n         * Convert array of keywords to options format\n         *\n         * @param {Array} tags\n         */\n        setKeywordOptions: function (tags) {\n            var options = [];\n\n            tags.forEach(function (tag) {\n                options.push(this.getOptionForKeyword(tag));\n            }.bind(this));\n\n            this.keywordOptions(options);\n            this.selectedKeywords(tags);\n        },\n\n        /**\n         * Initialize child components\n         *\n         * @returns {Object}\n         */\n        initView: function () {\n            layout(this.viewConfig);\n\n            return this;\n        },\n\n        /**\n         * Init observable variables\n         *\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'image',\n                    'keywordOptions',\n                    'selectedKeywords',\n                    'newKeyword'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Get image details by ID\n         *\n         * @param {String} imageId\n         */\n        showEditDetailsPanel: function (imageId) {\n            if (_.isUndefined(this.images[imageId])) {\n                getDetails(this.imageEditDetailsUrl, [imageId]).then(function (imageDetails) {\n                    this.images[imageId] = imageDetails[imageId];\n                    this.image(this.images[imageId]);\n                    this.openEditImageDetailsModal();\n                }.bind(this)).fail(function (error) {\n                    this.addMediaGridMessage('error', error);\n                }.bind(this));\n\n                return;\n            }\n\n            if (this.image() && this.image().id === imageId) {\n                this.openEditImageDetailsModal();\n\n                return;\n            }\n\n            this.image(this.images[imageId]);\n            this.openEditImageDetailsModal();\n        },\n\n        /**\n         * Open edit image details popup\n         */\n        openEditImageDetailsModal: function () {\n            var modalElement = $(this.modalSelector);\n\n            if (!modalElement.length || _.isUndefined(modalElement.modal)) {\n                return;\n            }\n\n            this.setKeywordOptions(this.image().tags);\n            this.newKeyword('');\n\n            modalElement.modal('openModal');\n        },\n\n        /**\n         * Close image details popup\n         */\n        closeImageDetailsModal: function () {\n            var modalElement = $(this.modalSelector);\n\n            if (!modalElement.length || _.isUndefined(modalElement.modal)) {\n                return;\n            }\n\n            modalElement.modal('closeModal');\n        },\n\n        /**\n         * Add media grid message\n         *\n         * @param {String} code\n         * @param {String} message\n         */\n        addMediaGridMessage: function (code, message) {\n            this.mediaGridMessages().add(code, message);\n            this.mediaGridMessages().scheduleCleanup();\n        },\n\n        /**\n         * Handle Enter key event to save image details\n         *\n         * @param {Object} data\n         * @param {jQuery.Event} event\n         * @returns {Boolean}\n         */\n        handleEnterKey: function (data, event) {\n            var modalElement = $(this.modalSelector),\n                key = keyCodes[event.keyCode];\n\n            if (key === 'enterKey') {\n                event.preventDefault();\n                modalElement.find('.page-action-buttons button.save').trigger('click');\n            }\n\n            return true;\n        },\n\n        /**\n         * Remove cached image details in edit form\n         *\n         * @param {String} id\n         */\n        removeCached: function (id) {\n            delete this.images[id];\n        }\n    });\n});\n","Magento_MediaGalleryUi/js/validation/validate-image-description.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/validate',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    $.validator.addMethod(\n        'validate-image-description', function (value) {\n            return /^[a-zA-Z0-9\\-\\_\\.\\,\\n\\s]+$|^$/i.test(value);\n\n        }, $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), ' +\n            'dots (.), commas(,), underscores (_), dashes (-), and spaces on this field.'));\n});\n","Magento_MediaGalleryUi/js/validation/validate-image-keyword.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/validate',\n    'mage/translate'\n], function ($, validate, $t) {\n    'use strict';\n\n    $.validator.addMethod(\n        'validate-image-keyword', function (value) {\n            return /^[a-zA-Z0-9\\-\\_\\.\\,]+$|^$/i.test(value);\n\n        }, $t('Please use only letters (a-z or A-Z), numbers (0-9), dots (.), commas(,), ' +\n            'underscores (_) and dashes(-) on this field.'));\n});\n","Magento_MediaGalleryUi/js/validation/validate-image-title.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/validate',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    $.validator.addMethod(\n        'validate-image-title', function (value) {\n            return /^[a-zA-Z0-9\\-\\_\\.\\,\\s]+$/i.test(value);\n\n        }, $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), dots (.), commas(,), ' +\n            'underscores (_), dashes(-) and spaces on this field.'));\n});\n","Magento_LoginAsCustomerAssistance/js/not-allowed-popup.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function (Component, confirm, $t) {\n\n    'use strict';\n\n    return Component.extend({\n        /**\n         * Initialize Component\n         */\n        initialize: function () {\n            var self = this,\n                content;\n\n            this._super();\n\n            content = '<div class=\"message message-warning\">' + self.content + '</div>';\n\n            /**\n             * Not Allowed popup\n             *\n             * @returns {Boolean}\n             */\n            window.lacNotAllowedPopup = function () {\n                confirm({\n                    title: self.title,\n                    content: content,\n                    modalClass: 'confirm lac-confirm',\n                    buttons: [\n                        {\n                            text: $t('Close'),\n                            class: 'action-secondary action-dismiss',\n\n                            /**\n                             * Click handler.\n                             */\n                            click: function (event) {\n                                this.closeModal(event);\n                            }\n                        }\n                    ]\n                });\n\n                return false;\n            };\n        }\n    });\n});\n","Magento_PageBuilderAdminAnalytics/js/page-builder/event-builder.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['underscore'], function (_) {\n    'use strict';\n\n    return {\n\n        /**\n         * Sets up event attributes and action depending on name and args\n         *\n         * @param {String} name\n         * @param {Array} args\n         */\n\n        build: function (name, args) {\n            var action = '',\n                eventAttributes = {},\n                event;\n\n            if (_.isUndefined(args)) {\n                return;\n            }\n\n            switch (name) {\n                case 'contentType:duplicateAfter':\n                    action = 'duplicate';\n                    break;\n\n                case 'contentType:removeAfter':\n                    action = 'remove';\n                    break;\n\n                case 'contentType:createAfter':\n                    action = 'create';\n                    break;\n\n                case 'contentType:editBefore':\n                    action = 'edit';\n                    break;\n\n                case 'contentType:visibilityAfter':\n                    action = args.visibility ? 'show' : 'hide';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!_.isUndefined(args.contentType)) {\n                eventAttributes = args.contentType.config;\n            } else if (!_.isUndefined(args.originalContentType)) {\n                eventAttributes = args.originalContentType.config;\n            }\n\n            if (action !== '' && !_.isEmpty(eventAttributes)) {\n                event = {\n                    element: eventAttributes.label,\n                    type: eventAttributes.name,\n                    action: action,\n                    widget: {\n                        name: eventAttributes.form,\n                        type: eventAttributes['menu_section']\n                    },\n                    feature: 'page-builder-tracker'\n                };\n            }\n\n            return event;\n        }\n    };\n});\n","Magento_PageBuilderAdminAnalytics/js/page-builder/events-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['underscore', 'Magento_PageBuilderAdminAnalytics/js/page-builder/event-builder'],\n    function (_, EventBuilder) {\n        'use strict';\n\n        return function (target) {\n            var originalTarget = target.trigger,\n                isAdminAnalyticsEnabled,\n                event,\n                hasPageBuilderBeenUsed = false,\n                delayedPush;\n\n            /**\n             * Invokes custom code to track information regarding Page Builder usage\n             *\n             * @param {String} name\n             * @param {Array} args\n             */\n\n            target.trigger = function (name, args) {\n                originalTarget.apply(originalTarget, [name, args]);\n                isAdminAnalyticsEnabled =\n                    !_.isUndefined(window.digitalData) &&\n                    !_.isUndefined(window._satellite);\n\n                if (!hasPageBuilderBeenUsed && name.indexOf('stage:fullScreenModeChangeAfter') !== -1 &&\n                    args.fullScreen && isAdminAnalyticsEnabled\n                ) {\n                    hasPageBuilderBeenUsed = true;\n                    window.digitalData.page.url = window.location.href;\n                    window.digitalData.page.attributes = {\n                        editedWithPageBuilder: 'true'\n                    };\n                    window._satellite.track('page');\n                }\n\n                event = EventBuilder.build(name, args);\n\n                if (isAdminAnalyticsEnabled && !_.isUndefined(window.digitalData.event) && !_.isUndefined(event)) {\n                    delayedPush = setInterval(function (object) {\n                        if (_.isArray(window.digitalData.event)) {\n                            window.digitalData.event.push(object);\n                            window._satellite.track('event');\n                            clearInterval(delayedPush);\n                        }\n                    }, 500, event);\n                }\n            };\n\n            return target;\n        };\n    });\n","Magento_ReleaseNotification/js/modal/component.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal-component',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate'\n], function ($, Modal, alert, $t) {\n    'use strict';\n\n    return Modal.extend({\n        defaults: {\n            imports: {\n                logAction:  '${ $.provider }:data.logAction'\n            }\n        },\n\n        /**\n         * Error handler.\n         *\n         * @param {Object} xhr - request result.\n         */\n        onError: function (xhr) {\n            if (xhr.statusText === 'abort') {\n                return;\n            }\n\n            alert({\n                content: xhr.message || $t('An error occurred while logging process.')\n            });\n        },\n\n        /**\n         * Log release notes show\n         */\n        logReleaseNotesShow: function () {\n            var self = this,\n                data = {\n                    'form_key': window.FORM_KEY\n                };\n\n            $.ajax({\n                type: 'POST',\n                url: this.logAction,\n                data: data,\n                showLoader: true\n            }).done(function (xhr) {\n                if (xhr.error) {\n                    self.onError(xhr);\n                }\n            }).fail(this.onError);\n        },\n\n        /**\n         * Close release notes\n         */\n        closeReleaseNotes: function () {\n            this.logReleaseNotesShow();\n            this.closeModal();\n        }\n    });\n});\n","Magento_ProductVideo/js/get-video-information.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'jquery/ui',\n    'mage/translate'\n], function ($, alert) {\n        'use strict';\n\n        var videoRegister = {\n            _register: {},\n\n            /**\n             * Checks, if api is already registered\n             *\n             * @param {String} api\n             * @returns {bool}\n             */\n            isRegistered: function (api) {\n                return this._register[api] !== undefined;\n            },\n\n            /**\n             * Checks, if api is loaded\n             *\n             * @param {String} api\n             * @returns {bool}\n             */\n            isLoaded: function (api) {\n                return this._register[api] !== undefined && this._register[api] === true;\n            },\n\n            /**\n             * Register new video api\n             * @param {String} api\n             * @param {bool} loaded\n             */\n            register: function (api, loaded) {\n                loaded = loaded || false;\n                this._register[api] = loaded;\n            }\n        };\n\n        $.widget('mage.productVideoLoader', {\n\n            /**\n             * @private\n             */\n            _create: function () {\n                switch (this.element.data('type')) {\n                    case 'youtube':\n                        this.element.videoYoutube();\n                        this._player = this.element.data('mageVideoYoutube');\n                        break;\n\n                    case 'vimeo':\n                        this.element.videoVimeo();\n                        this._player = this.element.data('mageVideoVimeo');\n                        break;\n                    default:\n                        throw {\n                            name: $.mage.__('Video Error'),\n                            message: $.mage.__('Unknown video type'),\n\n                            /**\n                             * Return string\n                             */\n                            toString: function () {\n                                return this.name + ': ' + this.message;\n                            }\n                        };\n                }\n            },\n\n            /**\n             * Initializes variables\n             * @private\n             */\n            _initialize: function () {\n                this._params = this.element.data('params') || {};\n                this._code = this.element.data('code');\n                this._width = this.element.data('width');\n                this._height = this.element.data('height');\n                this._autoplay = !!this.element.data('autoplay');\n                this._playing = this._autoplay || false;\n                this.useYoutubeNocookie = this.element.data('youtubenocookie') || false;\n\n                this._responsive = this.element.data('responsive') !== false;\n\n                if (this._responsive === true) {\n                    this.element.addClass('responsive');\n                }\n\n                this._calculateRatio();\n            },\n\n            /**\n             * Abstract play command\n             */\n            play: function () {\n                this._player.play();\n            },\n\n            /**\n             * Abstract pause command\n             */\n            pause: function () {\n                this._player.pause();\n            },\n\n            /**\n             * Abstract stop command\n             */\n            stop: function () {\n                this._player.stop();\n            },\n\n            /**\n             * Abstract playing command\n             */\n            playing: function () {\n                return this._player.playing();\n            },\n\n            /**\n             * Abstract destroying command\n             */\n            destroy: function () {\n                if (this._player) {\n                    this._player.destroy();\n                }\n            },\n\n            /**\n             * Calculates ratio for responsive videos\n             * @private\n             */\n            _calculateRatio: function () {\n                if (!this._responsive) {\n                    return;\n                }\n                this.element.css('paddingBottom', this._height / this._width * 100 + '%');\n            }\n        });\n\n        $.widget('mage.videoYoutube', $.mage.productVideoLoader, {\n\n            /**\n             * Initialization of the Youtube widget\n             * @private\n             */\n            _create: function () {\n                var self = this;\n\n                this._initialize();\n\n                this.element.append('<div></div>');\n\n                this._on(window, {\n\n                    /**\n                     * Youtube state check\n                     * @private\n                     */\n                    'youtubeapiready': function () {\n                        var host = 'https://www.youtube.com';\n\n                        if (self.useYoutubeNocookie) {\n                            host = 'https://www.youtube-nocookie.com';\n                        }\n\n                        if (self._player !== undefined) {\n                            return;\n                        }\n\n                        if (self._autoplay) {\n                            self._params.autoplay = 1;\n                        }\n                        self._params.rel = 0;\n\n                        self._player = new window.YT.Player(self.element.children(':first')[0], {\n                            height: self._height,\n                            width: self._width,\n                            videoId: self._code,\n                            playerVars: self._params,\n                            host: host,\n                            events: {\n\n                                /**\n                                 * @private\n                                 */\n                                'onReady': function onPlayerReady() {\n                                    self._player.getDuration();\n                                },\n\n                                /**\n                                 * State change flag init\n                                 */\n                                onStateChange: function (data) {\n                                    switch (window.parseInt(data.data, 10)) {\n                                        case 1:\n                                            self._playing = true;\n                                            break;\n                                        default:\n                                            self._playing = false;\n                                            break;\n                                    }\n\n                                    self._trigger('statechange', {}, data);\n                                }\n                            }\n\n                        });\n                    }\n                });\n\n                this._loadApi();\n            },\n\n            /**\n             * Loads Youtube API and triggers event, when loaded\n             * @private\n             */\n            _loadApi: function () {\n                var element,\n                    scriptTag;\n\n                if (videoRegister.isRegistered('youtube')) {\n                    if (videoRegister.isLoaded('youtube')) {\n                        $(window).trigger('youtubeapiready');\n                    }\n\n                    return;\n                }\n                videoRegister.register('youtube');\n\n                element = document.createElement('script');\n                scriptTag = document.getElementsByTagName('script')[0];\n\n                element.async = true;\n                element.src = 'https://www.youtube.com/iframe_api';\n                scriptTag.parentNode.insertBefore(element, scriptTag);\n\n                /**\n                 * Trigger youtube api ready event\n                 */\n                window.onYouTubeIframeAPIReady = function () {\n                    $(window).trigger('youtubeapiready');\n                    videoRegister.register('youtube', true);\n                };\n            },\n\n            /**\n             * Play command for Youtube\n             */\n            play: function () {\n                this._player.playVideo();\n                this._playing = true;\n            },\n\n            /**\n             * Pause command for Youtube\n             */\n            pause: function () {\n                this._player.pauseVideo();\n                this._playing = false;\n            },\n\n            /**\n             * Stop command for Youtube\n             */\n            stop: function () {\n                this._player.stopVideo();\n                this._playing = false;\n            },\n\n            /**\n             * Playing command for Youtube\n             */\n            playing: function () {\n                return this._playing;\n            },\n\n            /**\n             * stops and unloads player\n             * @private\n             */\n            destroy: function () {\n                if (this._player) {\n                    this.stop();\n                    this._player.destroy();\n                    this._player = undefined;\n                }\n            }\n        });\n\n        $.widget('mage.videoVimeo', $.mage.productVideoLoader, {\n\n            /**\n             * Initialize the Vimeo widget\n             * @private\n             */\n            _create: function () {\n                var timestamp,\n                    src,\n                    additionalParams;\n\n                this._initialize();\n                timestamp = new Date().getTime();\n\n                if (this._autoplay) {\n                    additionalParams += '&autoplay=1';\n                }\n\n                src = 'https://player.vimeo.com/video/' +\n                    this._code + '?api=1&player_id=vimeo' +\n                    this._code +\n                    timestamp +\n                    additionalParams;\n                this.element.append(\n                    $('<iframe></iframe>')\n                        .attr('frameborder', 0)\n                        .attr('id', 'vimeo' + this._code + timestamp)\n                        .attr('width', this._width)\n                        .attr('height', this._height)\n                        .attr('src', src)\n                );\n\n            }\n        });\n\n        $.widget('mage.videoData', {\n            options: {\n                youtubeKey: '',\n                eventSource: '' //where is data going from - focus out or click on button\n            },\n\n            _REQUEST_VIDEO_INFORMATION_TRIGGER: 'request_video_information',\n\n            _UPDATE_VIDEO_INFORMATION_TRIGGER: 'updated_video_information',\n\n            _START_UPDATE_INFORMATION_TRIGGER: 'update_video_information',\n\n            _ERROR_UPDATE_INFORMATION_TRIGGER: 'error_updated_information',\n\n            _FINISH_UPDATE_INFORMATION_TRIGGER: 'finish_update_information',\n\n            _VIDEO_URL_VALIDATE_TRIGGER: 'validate_video_url',\n\n            _videoInformation: null,\n\n            _currentVideoUrl: null,\n\n            /**\n             * @private\n             */\n            _init: function () {\n                this.element.on(this._START_UPDATE_INFORMATION_TRIGGER, $.proxy(this._onRequestHandler, this));\n                this.element.on(this._ERROR_UPDATE_INFORMATION_TRIGGER, $.proxy(this._onVideoInvalid, this));\n                this.element.on(this._FINISH_UPDATE_INFORMATION_TRIGGER, $.proxy(\n                    function () {\n                        this._currentVideoUrl = null;\n                    }, this\n                ));\n                this.element.on(this._VIDEO_URL_VALIDATE_TRIGGER, $.proxy(this._onUrlValidateHandler, this));\n            },\n\n            /**\n             * @private\n             */\n            _onUrlValidateHandler: function (event, callback, forceVideo) {\n                var url = this.element.val(),\n                    videoInfo;\n\n                videoInfo = this._validateURL(url, forceVideo);\n\n                if (videoInfo) {\n                    callback();\n                } else {\n                    this._onRequestError($.mage.__('Invalid video url'));\n                }\n            },\n\n            /**\n             * @private\n             */\n            _onRequestHandler: function () {\n                var url = this.element.val(),\n                    self = this,\n                    videoInfo,\n                    type,\n                    id,\n                    googleapisUrl;\n\n                if (this._currentVideoUrl === url) {\n                    return;\n                }\n\n                this._currentVideoUrl = url;\n\n                this.element.trigger(this._REQUEST_VIDEO_INFORMATION_TRIGGER, {\n                    url: url\n                });\n\n                if (!url) {\n                    return;\n                }\n\n                videoInfo = this._validateURL(url);\n\n                if (!videoInfo) {\n                    this._onRequestError($.mage.__('Invalid video url'));\n\n                    return;\n                }\n\n                /**\n                 *\n                 * @param {Object} data\n                 * @private\n                 */\n                function _onYouTubeLoaded(data) {\n                    var tmp,\n                        uploadedFormatted,\n                        respData,\n                        createErrorMessage;\n\n                    /**\n                     * Create errors message\n                     *\n                     * @returns {String}\n                     */\n                    createErrorMessage = function () {\n                        var error = data.error,\n                            errors = error.errors,\n                            i,\n                            errLength = errors.length,\n                            tmpError,\n                            errReason,\n                            errorsMessage = [];\n\n                        for (i = 0; i < errLength; i++) {\n                            tmpError = errors[i];\n                            errReason = tmpError.reason;\n\n                            if (['keyInvalid'].indexOf(errReason) !== -1) {\n                                errorsMessage.push($.mage.__('Youtube API key is invalid'));\n\n                                break;\n                            }\n\n                            errorsMessage.push(tmpError.message);\n                        }\n\n                        return $.mage.__('Video cant be shown due to the following reason: ') +\n                            $.unique(errorsMessage).join(', ');\n                    };\n\n                    if (data.error && [400, 402, 403].indexOf(data.error.code) !== -1) {\n                        this._onRequestError(createErrorMessage());\n\n                        return;\n                    }\n\n                    if (!data.items || data.items.length < 1) {\n                        this._onRequestError($.mage.__('Video not found'));\n\n                        return;\n                    }\n\n                    tmp = data.items[0];\n                    uploadedFormatted = tmp.snippet.publishedAt.replace('T', ' ').replace(/\\..+/g, '');\n                    respData = {\n                        duration: this._formatYoutubeDuration(tmp.contentDetails.duration),\n                        channel: tmp.snippet.channelTitle,\n                        channelId: tmp.snippet.channelId,\n                        uploaded: uploadedFormatted,\n                        title: tmp.snippet.localized.title,\n                        description: tmp.snippet.description,\n                        thumbnail: tmp.snippet.thumbnails.high.url,\n                        videoId: videoInfo.id,\n                        videoProvider: videoInfo.type,\n                        useYoutubeNocookie: videoInfo.useYoutubeNocookie\n                    };\n                    this._videoInformation = respData;\n                    this.element.trigger(this._UPDATE_VIDEO_INFORMATION_TRIGGER, respData);\n                    this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, true);\n                }\n\n                /**\n                 * @private\n                 */\n                function _onVimeoLoaded(data) {\n                    var tmp,\n                        respData,\n                        videoDescription = '';\n\n                    if (!data) {\n                        this._onRequestError($.mage.__('Video not found'));\n\n                        return null;\n                    }\n                    tmp = data;\n\n                    if (tmp.description !== null) {\n                        videoDescription = tmp.description;\n                    }\n\n                    if (tmp.duration == null) {\n                        this._onRequestError(\n                            $.mage.__('Because of its privacy settings, this video cannot be played here.')\n                        );\n                    } else {\n                        respData = {\n                            duration: this._formatVimeoDuration(tmp.duration),\n                            channel: tmp['author_name'],\n                            channelId: tmp['author_url'],\n                            uploaded: tmp['upload_date'],\n                            title: tmp.title,\n                            description: videoDescription.replace(/(&nbsp;|<([^>]+)>)/ig, ''),\n                            thumbnail: tmp['thumbnail_url'],\n                            videoId: videoInfo.id,\n                            videoProvider: videoInfo.type\n                        };\n                        this._videoInformation = respData;\n                        this.element.trigger(this._UPDATE_VIDEO_INFORMATION_TRIGGER, respData);\n                        this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, true);\n                    }\n                }\n\n                type = videoInfo.type;\n                id = videoInfo.id;\n\n                if (type === 'youtube') {\n                    googleapisUrl = 'https://www.googleapis.com/youtube/v3/videos?id=' +\n                        id +\n                        '&part=snippet,contentDetails&key=' +\n                        this.options.youtubeKey + '&alt=json&callback=?';\n                    $.getJSON(googleapisUrl,\n                        {\n                            format: 'json'\n                        },\n                        $.proxy(_onYouTubeLoaded, self)\n                    ).fail(\n                        function () {\n                            self._onRequestError('Video not found');\n                        }\n                    );\n                } else if (type === 'vimeo') {\n                    $.ajax({\n                        url: 'https://vimeo.com/api/oembed.json',\n                        dataType: 'jsonp',\n                        data: {\n                            format: 'json',\n                            url: 'https://vimeo.com/' + id\n                        },\n                        timeout: 5000,\n                        success:  $.proxy(_onVimeoLoaded, self),\n\n                        /**\n                         * @private\n                         */\n                        error: function () {\n                            self._onRequestError($.mage.__('Video not found'));\n                        }\n                    });\n                }\n            },\n\n            /**\n             * @private\n             */\n            _onVideoInvalid: function (event, data) {\n                this._videoInformation = null;\n                this.element.val('');\n                alert({\n                    content: 'Error: \"' + data + '\"'\n                });\n            },\n\n            /**\n             * @private\n             */\n            _onRequestError: function (error) {\n                this.element.trigger(this._ERROR_UPDATE_INFORMATION_TRIGGER, error);\n                this.element.trigger(this._FINISH_UPDATE_INFORMATION_TRIGGER, false);\n                this._currentVideoUrl = null;\n            },\n\n            /**\n             * @private\n             */\n            _formatYoutubeDuration: function (duration) {\n                var match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/),\n                    hours = parseInt(match[1], 10) || 0,\n                    minutes = parseInt(match[2], 10) || 0,\n                    seconds = parseInt(match[3], 10) || 0;\n\n                return this._formatVimeoDuration(hours * 3600 + minutes * 60 + seconds);\n            },\n\n            /**\n             * @private\n             */\n            _formatVimeoDuration: function (seconds) {\n                return new Date(seconds * 1000).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\n            },\n\n            /**\n             * @private\n             */\n            _parseHref: function (href) {\n                var a = document.createElement('a');\n\n                a.href = href;\n\n                return a;\n            },\n\n            /**\n             * @private\n             */\n            _validateURL: function (href, forceVideo) {\n                var id,\n                    type,\n                    ampersandPosition,\n                    vimeoRegex,\n                    useYoutubeNocookie = false;\n\n                if (typeof href !== 'string') {\n                    return href;\n                }\n                href = this._parseHref(href);\n\n                if (href.host.match(/youtube\\.com/) && href.search) {\n\n                    id = href.search.split('v=')[1];\n\n                    if (id) {\n                        ampersandPosition = id.indexOf('&');\n                        type = 'youtube';\n                    }\n\n                    if (id && ampersandPosition !== -1) {\n                        id = id.substring(0, ampersandPosition);\n                    }\n\n                } else if (href.host.match(/youtube\\.com|youtu\\.be|youtube-nocookie.com/)) {\n                    id = href.pathname.replace(/^\\/(embed\\/|v\\/)?/, '').replace(/\\/.*/, '');\n                    type = 'youtube';\n\n                    if (href.host.match(/youtube-nocookie.com/)) {\n                        useYoutubeNocookie = true;\n                    }\n                } else if (href.host.match(/vimeo\\.com/)) {\n                    type = 'vimeo';\n                    vimeoRegex = new RegExp(['https?:\\\\/\\\\/(?:www\\\\.|player\\\\.)?vimeo.com\\\\/(?:channels\\\\/(?:\\\\w+\\\\/)',\n                        '?|groups\\\\/([^\\\\/]*)\\\\/videos\\\\/|album\\\\/(\\\\d+)\\\\/video\\\\/|video\\\\/|)(\\\\d+)(?:$|\\\\/|\\\\?)'\n                    ].join(''));\n\n                    if (href.href.match(vimeoRegex) != null) {\n                        id = href.href.match(vimeoRegex)[3];\n                    }\n                }\n\n                if ((!id || !type) && forceVideo) {\n                    id = href.href;\n                    type = 'custom';\n                }\n\n                return id ? {\n                    id: id, type: type, s: href.search.replace(/^\\?/, ''), useYoutubeNocookie: useYoutubeNocookie\n                } : false;\n            }\n        });\n    });\n","Magento_ProductVideo/js/new-video-dialog.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate',\n    'mage/backend/tree-suggest',\n    'mage/backend/validation',\n    'Magento_ProductVideo/js/get-video-information'\n], function ($, _) {\n    'use strict';\n\n    $.widget('mage.createVideoPlayer', {\n        options: {\n            videoId: '',\n            videoProvider: '',\n            container: '.video-player-container',\n            videoClass: 'product-video',\n            reset: false,\n            useYoutubeNocookie: false,\n            metaData: {\n                DOM: {\n                    title: '.video-information.title span',\n                    uploaded: '.video-information.uploaded span',\n                    uploader: '.video-information.uploader span',\n                    duration: '.video-information.duration span',\n                    all: '.video-information span',\n                    wrapper: '.video-information'\n                },\n                data: {\n                    title: '',\n                    uploaded: '',\n                    uploader: '',\n                    uploaderUrl: '',\n                    duration: ''\n                }\n            }\n        },\n\n        _FINISH_CREATE_VIDEO_TRIGGER: 'finish_create_video',\n\n        _FINISH_UPDATE_VIDEO_TRIGGER: 'finish_update_video',\n\n        /**\n         * @private\n         */\n        _init: function () {\n            if (this.options.reset) {\n                this.reset();\n            } else {\n                this.update();\n            }\n\n            this.element.on('reset', $.proxy(this.reset, this));\n\n        },\n\n        /**\n         * @returns {Boolean}\n         */\n        update: function () {\n            var checkVideoID =\n                this.element.find(this.options.container).find('.' + this.options.videoClass).data('code'),\n            eventVideoData = {\n                oldVideoId: checkVideoID ? checkVideoID.toString() : checkVideoID,\n                newVideoId: this.options.videoId ? this.options.videoId.toString() : this.options.videoId\n            };\n\n            if (checkVideoID && checkVideoID !== this.options.videoId) {\n                this._doUpdate();\n                this.element.trigger(this._FINISH_UPDATE_VIDEO_TRIGGER, eventVideoData);\n            } else if (checkVideoID && checkVideoID === this.options.videoId) {\n                return false;\n            } else if (!checkVideoID) {\n                this._doUpdate();\n                this.element.trigger(this._FINISH_CREATE_VIDEO_TRIGGER, eventVideoData);\n            }\n\n        },\n\n        /**\n         * @private\n         */\n        _doUpdate: function () {\n            var uploaderLinkUrl,\n                uploaderLink;\n\n            this.reset();\n            this.element.find(this.options.container).append(\n                '<div class=\"' +\n                this.options.videoClass +\n                '\" data-type=\"' +\n                this.options.videoProvider +\n                '\" data-code=\"' +\n                this.options.videoId +\n                '\" data-youtubenocookie=\"' +\n                this.options.useYoutubeNocookie +\n                '\" data-width=\"100%\" data-height=\"100%\"></div>'\n            );\n            this.element.find(this.options.metaData.DOM.wrapper).show();\n            this.element.find(this.options.metaData.DOM.title).text(this.options.metaData.data.title);\n            this.element.find(this.options.metaData.DOM.uploaded).text(this.options.metaData.data.uploaded);\n            this.element.find(this.options.metaData.DOM.duration).text(this.options.metaData.data.duration);\n\n            if (this.options.videoProvider === 'youtube') {\n                uploaderLinkUrl = 'https://youtube.com/channel/' + this.options.metaData.data.uploaderUrl;\n            } else if (this.options.videoProvider === 'vimeo') {\n                uploaderLinkUrl = this.options.metaData.data.uploaderUrl;\n            }\n            uploaderLink = document.createElement('a');\n            uploaderLink.setAttribute('href', uploaderLinkUrl);\n            uploaderLink.setAttribute('target', '_blank');\n            uploaderLink.innerText = this.options.metaData.data.uploader;\n            this.element.find(this.options.metaData.DOM.uploader)[0].appendChild(uploaderLink);\n            this.element.find('.' + this.options.videoClass).productVideoLoader();\n\n        },\n\n        /**\n         * Reset\n         */\n        reset: function () {\n            this.element.find(this.options.container).find('.' + this.options.videoClass).remove();\n            this.element.find(this.options.metaData.DOM.wrapper).hide();\n            this.element.find(this.options.metaData.DOM.all).text('');\n\n        }\n    });\n\n    $.widget('mage.updateInputFields', {\n        options: {\n            reset: false,\n            DOM: {\n                urlField: 'input[name=\"video_url\"]',\n                titleField: 'input[name=\"video_title\"]',\n                fileField: '#file_name',\n                descriptionField: 'textarea[name=\"video_description\"]',\n                thumbnailLocation: '.field-new_video_screenshot_preview .admin__field-control'\n            },\n            data: {\n                url: '',\n                title: '',\n                description: '',\n                thumbnail: ''\n            }\n        },\n\n        /**\n         * @private\n         */\n        _init: function () {\n            if (this.options.reset) {\n                this.reset();\n            } else {\n                this.update();\n            }\n        },\n\n        /**\n         * Update\n         */\n        update: function () {\n            $(this.options.DOM.titleField).val(this.options.data.title);\n            $(this.options.DOM.descriptionField).val(this.options.data.description);\n        },\n\n        /**\n         * Reset\n         */\n        reset: function () {\n            $(this.options.DOM.fileField).val('');\n            $(this.options.DOM.urlField).val('');\n            $(this.options.DOM.titleField).val('');\n            $(this.options.DOM.descriptionField).val('');\n        }\n    });\n\n    /**\n     */\n    $.widget('mage.newVideoDialog', {\n\n        _previewImage: null,\n\n        clickedElement: '',\n\n        _images: {},\n\n        _imageTypes: [\n            '.jpeg',\n            '.pjpeg',\n            '.jpeg',\n            '.jpg',\n            '.pjpeg',\n            '.png',\n            '.gif'\n        ],\n\n        _imageProductGalleryWrapperSelector: '#image-container',\n\n        _videoPreviewInputSelector: '#new_video_screenshot',\n\n        _videoPreviewRemoteSelector: '',\n\n        _videoDisableinputSelector: '#new_video_disabled',\n\n        _videoPreviewImagePointer: '#new_video_screenshot_preview',\n\n        _videoFormSelector: '#new_video_form',\n\n        _itemIdSelector: '#item_id',\n\n        _videoUrlSelector: '[name=\"video_url\"]',\n\n        _videoImageFilenameselector: '#file_name',\n\n        _videoUrlWidget: null,\n\n        _videoInformationBtnSelector: '[name=\"new_video_get\"]',\n\n        _editVideoBtnSelector: '.image',\n\n        _deleteGalleryVideoSelector: '[data-role=delete-button]',\n\n        _deleteGalleryVideoSelectorBtn: null,\n\n        _videoInformationGetBtn: null,\n\n        _videoInformationGetUrlField: null,\n\n        _videoInformationGetEditBtn: null,\n\n        _isEditPage: false,\n\n        _onlyVideoPlayer: false,\n\n        _tempPreviewImageData: null,\n\n        _videoPlayerSelector: '.mage-new-video-dialog',\n\n        _videoRequestComplete: null,\n\n        _gallery: null,\n\n        /**\n         * Bind events\n         * @private\n         */\n        _bind: function () {\n            var events = {\n                'setImage': '_onSetImage'\n            };\n\n            this._on(events);\n\n            this._videoUrlWidget = this.element.find(this._videoUrlSelector).videoData({\n                youtubeKey: this.options.youTubeApiKey,\n                eventSource: 'focusout'\n            });\n\n            this._videoInformationGetBtn = this.element.find(this._videoInformationBtnSelector);\n            this._videoInformationGetUrlField = this.element.find(this._videoUrlSelector);\n            this._videoInformationGetEditBtn = this._gallery.find(this._editVideoBtnSelector);\n\n            this._videoInformationGetBtn.on('click', $.proxy(this._onGetVideoInformationClick, this));\n            this._videoInformationGetUrlField.on('focusout', $.proxy(this._onGetVideoInformationFocusOut, this));\n\n            this._videoUrlWidget.on('updated_video_information', $.proxy(this._onGetVideoInformationSuccess, this));\n            this._videoUrlWidget.on('error_updated_information', $.proxy(this._onGetVideoInformationError, this));\n            this._videoUrlWidget.on(\n                'request_video_information',\n                $.proxy(this._onGetVideoInformationStartRequest, this)\n            );\n        },\n\n        /**\n         * Fired when user click on button \"Get video information\"\n         * @private\n         */\n        _onGetVideoInformationClick: function () {\n            var videoForm = this.element.find(this._videoFormSelector);\n\n            videoForm.validation();\n\n            if (this.element.find(this._videoUrlSelector).valid()) {\n                this._onlyVideoPlayer = false;\n                this._isEditPage = false;\n                this._videoUrlWidget.trigger('update_video_information');\n            }\n        },\n\n        /**\n         * Fired when user do focus out from url field\n         * @private\n         */\n        _onGetVideoInformationFocusOut: function () {\n            this._videoUrlWidget.trigger('update_video_information');\n        },\n\n        /**\n         * @private\n         */\n        _onGetVideoInformationStartRequest: function () {\n            var videoForm = this.element.find(this._videoFormSelector);\n\n            try {\n                videoForm.validation('clearError');\n            } catch (e) {\n                // Do nothing\n            }\n\n            this._videoRequestComplete = false;\n        },\n\n        /**\n         * Fired when user click Edit Video button\n         * @private\n         */\n        _onGetVideoInformationEditClick: function () {\n            this._onlyVideoPlayer = true;\n            this._isEditPage = true;\n            this._videoUrlWidget.trigger('update_video_information');\n        },\n\n        /**\n         * Fired when successfully received information about the video.\n         * @param {Object} e\n         * @param {Object} data\n         * @private\n         */\n        _onGetVideoInformationSuccess: function (e, data) {\n            var self = this;\n\n            self.element.on('finish_update_video finish_create_video', $.proxy(function (element, playerData) {\n                if (!self._onlyVideoPlayer ||\n                    !self._isEditPage && playerData.oldVideoId !== playerData.newVideoId ||\n                    playerData.oldVideoId && playerData.oldVideoId !== playerData.newVideoId\n                ) {\n                    self.element.updateInputFields({\n                        reset: false,\n                        data: {\n                            title: data.title,\n                            description: data.description\n                        }\n                    });\n                    this._loadRemotePreview(data.thumbnail);\n                }\n                self._onlyVideoPlayer = true;\n            }, this))\n            .createVideoPlayer({\n                videoId: data.videoId,\n                videoProvider: data.videoProvider,\n                useYoutubeNocookie: data.useYoutubeNocookie,\n                reset: false,\n                metaData: {\n                    DOM: {\n                        title: '.video-information.title span',\n                        uploaded: '.video-information.uploaded span',\n                        uploader: '.video-information.uploader span',\n                        duration: '.video-information.duration span',\n                        all: '.video-information span',\n                        wrapper: '.video-information'\n                    },\n                    data: {\n                        title: data.title,\n                        uploaded: data.uploaded,\n                        uploader: data.channel,\n                        duration: data.duration,\n                        uploaderUrl: data.channelId\n                    }\n                }\n            })\n            .off('finish_update_video finish_create_video');\n\n            this._videoRequestComplete = true;\n        },\n\n        /**\n         * Load preview from youtube/vimeo\n         * @param {String} sourceUrl\n         * @private\n         */\n        _loadRemotePreview: function (sourceUrl) {\n            var url = this.options.saveRemoteVideoUrl,\n                self = this;\n\n            this._getPreviewImage().attr('src', sourceUrl).hide();\n            this._blockActionButtons(true, true);\n            $.ajax({\n                url: url,\n                data: 'remote_image=' + sourceUrl,\n                type: 'post',\n                success: $.proxy(function (result) {\n                    this._tempPreviewImageData = result;\n                    this._getPreviewImage().attr('src', sourceUrl).show();\n                    this._blockActionButtons(false, true);\n                }, self)\n            });\n        },\n\n        /**\n         * Fired when receiving information about the video ended with error\n         * @private\n         */\n        _onGetVideoInformationError: function () {\n        },\n\n        /**\n         * Remove \".tmp\"\n         * @param {String} name\n         * @returns {*}\n         * @private\n         */\n        __prepareFilename: function (name) {\n            var tmppost = '.tmp';\n\n            if (!name) {\n                return name;\n            }\n\n            if (name.endsWith(tmppost)) {\n                name = name.slice(0, name.length - tmppost.length);\n            }\n\n            return name;\n        },\n\n        /**\n         * Set image data\n         * @param {String} file\n         * @param {Object} imageData\n         * @private\n         */\n        _setImage: function (file, imageData) {\n            file = this.__prepareFilename(file);\n            this._images[file] = imageData;\n            this._gallery.trigger('addItem', imageData);\n            this.element.trigger('setImage', imageData);\n            this._addVideoClass(imageData.url);\n        },\n\n        /**\n         * Get image data\n         *\n         * @param {String} file\n         * @returns {*}\n         * @private\n         */\n        _getImage: function (file) {\n            file = this.__prepareFilename(file);\n\n            return this._images[file];\n        },\n\n        /**\n         * Replace image (update)\n         * @param {String} oldFile\n         * @param {String} newFile\n         * @param {Object} imageData\n         * @private\n         */\n        _replaceImage: function (oldFile, newFile, imageData) {\n            var tmpNewFile = newFile,\n                tmpOldImage,\n                newImageId,\n                oldNewFilePosition,\n                fc,\n                suff,\n                searchsuff,\n                key,\n                oldValIdElem;\n\n            oldFile = this.__prepareFilename(oldFile);\n            newFile = this.__prepareFilename(newFile);\n            tmpOldImage = this._images[oldFile];\n\n            if (newFile === oldFile) {\n                this._images[newFile] = imageData;\n                this.saveImageRoles(imageData);\n                this._updateVisibility(imageData);\n                this._updateImageTitle(imageData);\n\n                return null;\n            }\n\n            this._removeImage(oldFile);\n            this._setImage(newFile, imageData);\n\n            if (!oldFile || !imageData.oldFile) {\n                return null;\n            }\n\n            newImageId = this.findElementId(tmpNewFile);\n            fc = this.element.find(this._itemIdSelector).val();\n\n            suff = 'product[media_gallery][images]' + fc;\n\n            searchsuff = 'input[name=\"' + suff + '[value_id]\"]';\n            key = this._gallery.find(searchsuff).val();\n\n            if (!key) {\n                return null;\n            }\n\n            oldValIdElem = document.createElement('input');\n            this._gallery.find('form[data-form=\"edit-product\"]').append(oldValIdElem);\n            $(oldValIdElem).attr({\n                type: 'hidden',\n                name: 'product[media_gallery][images][' + newImageId + '][save_data_from]'\n            }).val(key);\n\n            oldNewFilePosition = parseInt(tmpOldImage.position, 10);\n            imageData.position = oldNewFilePosition;\n\n            this._gallery.trigger('setPosition', {\n                imageData: imageData,\n                position: oldNewFilePosition\n            });\n        },\n\n        /**\n         * Remove image data\n         * @param {String} file\n         * @private\n         */\n        _removeImage: function (file) {\n            var imageData = this._getImage(file);\n\n            if (!imageData) {\n                return null;\n            }\n\n            this._gallery.trigger('removeItem', imageData);\n            this.element.trigger('removeImage', imageData);\n            delete this._images[file];\n        },\n\n        /**\n         * Fired when image setted\n         * @param {Event} event\n         * @param {Object} imageData\n         * @private\n         */\n        _onSetImage: function (event, imageData) {\n            this.saveImageRoles(imageData);\n        },\n\n        /**\n         *\n         * Wrap _uploadFile\n         * @param {String} file\n         * @param {String} oldFile\n         * @param {Function} callback\n         * @private\n         */\n        _uploadImage: function (file, oldFile, callback) {\n            var url = this.options.saveVideoUrl,\n            data = {\n                files: file,\n                url: url\n            };\n\n            this._blockActionButtons(true, true);\n            this._uploadFile(data, $.proxy(function (result) {\n                this._onImageLoaded(result, file, oldFile, callback);\n                this._blockActionButtons(false);\n            }, this));\n\n        },\n\n        /**\n         * @param {String} result\n         * @param {String} file\n         * @param {String} oldFile\n         * @param {Function} callback\n         * @private\n         */\n        _onImageLoaded: function (result, file, oldFile, callback) {\n            var data;\n\n            try {\n                data = JSON.parse(result);\n            } catch (e) {\n                data = result;\n            }\n\n            if (this.element.find('#video_url').parent().find('.image-upload-error').length > 0) {\n                this.element.find('.image-upload-error').remove();\n            }\n\n            if (data.errorcode || data.error) {\n                this.element.find('#video_url').parent().append('<div class=\"image-upload-error\">' +\n                '<div class=\"image-upload-error-cross\"></div><span>' + data.error + '</span></div>');\n\n                return;\n            }\n            $.each(this.element.find(this._videoFormSelector).serializeArray(), function (i, field) {\n                data[field.name] = field.value;\n            });\n            data.disabled = this.element.find(this._videoDisableinputSelector).prop('checked') ? 1 : 0;\n            data['media_type'] = 'external-video';\n            data.oldFile = oldFile;\n\n            oldFile ?\n                this._replaceImage(oldFile, data.file, data) :\n                this._setImage(data.file, data);\n            callback.call(0, data);\n        },\n\n        /**\n         * File uploader\n         * @private\n         */\n        _uploadFile: function (data, callback) {\n            var fu = this.element.find(this._videoPreviewInputSelector),\n                tmpInput = document.createElement('input'),\n                fileUploader = null;\n\n            $(tmpInput).attr({\n                'name': fu.attr('name'),\n                'value': fu.val(),\n                'type': 'file',\n                'data-ui-ud': fu.attr('data-ui-ud')\n            }).css('display', 'none');\n            fu.parent().append(tmpInput);\n            fileUploader = $(tmpInput).fileupload();\n            fileUploader.fileupload('send', data).done(function (result, textStatus, jqXHR) {\n                tmpInput.remove();\n                callback.call(null, result, textStatus, jqXHR);\n            });\n        },\n\n        /**\n         * Update style\n         * @param {String} url\n         * @private\n         */\n        _addVideoClass: function (url) {\n            var classVideo = 'video-item';\n\n            this._gallery.find('img[src=\"' + url + '\"]').addClass(classVideo);\n        },\n\n        /**\n         * Build widget\n         * @private\n         */\n        _create: function () {\n            var imgs = _.values(this.element.closest(this.options.videoSelector).data('images')) || [],\n                widget,\n                uploader,\n                tmp,\n                i;\n\n            this._gallery =  this.element.closest(this.options.videoSelector);\n\n            for (i = 0; i < imgs.length; i++) {\n                tmp = imgs[i];\n                this._images[tmp.file] = tmp;\n\n                if (tmp['media_type'] === 'external-video') {\n                    tmp.subclass = 'video-item';\n                    this._addVideoClass(tmp.url);\n                }\n            }\n\n            this._gallery.on('openDialog', $.proxy(this._onOpenDialog, this));\n            this._bind();\n            this.createVideoItemIcons();\n            widget = this;\n            uploader = this.element.find(this._videoPreviewInputSelector);\n            uploader.on('change', this._onImageInputChange.bind(this));\n            uploader.attr('accept', this._imageTypes.join(','));\n\n            this.element.modal({\n                type: 'slide',\n                //appendTo: this._gallery,\n                modalClass: 'mage-new-video-dialog form-inline',\n                title: $.mage.__('New Video'),\n                buttons: [\n                {\n                    text: $.mage.__('Save'),\n                    class: 'action-primary video-create-button',\n                    click: $.proxy(widget._onCreate, widget)\n                },\n                {\n                    text: $.mage.__('Cancel'),\n                    class: 'video-cancel-button',\n                    click: $.proxy(widget._onCancel, widget)\n                },\n                {\n                    text: $.mage.__('Delete'),\n                    class: 'video-delete-button',\n                    click: $.proxy(widget._onDelete, widget)\n                },\n                {\n                    text: $.mage.__('Save'),\n                    class: 'action-primary video-edit',\n                    click: $.proxy(widget._onUpdate, widget)\n                }\n                ],\n\n                /**\n                 * @returns {null}\n                 */\n                opened: function () {\n                    var roles,\n                        file,\n                        modalTitleElement,\n                        imageData,\n                        modal = widget.element.closest('.mage-new-video-dialog');\n\n                    widget.element.find('#video_url').focus();\n                    roles = widget.element.find('.video_image_role');\n                    roles.prop('disabled', false);\n                    file = widget.element.find('#file_name').val();\n                    widget._onGetVideoInformationEditClick();\n                    modalTitleElement = modal.find('.modal-title');\n\n                    if (!file) {\n                        widget._blockActionButtons(true);\n\n                        modal.find('.video-delete-button').hide();\n                        modal.find('.video-edit').hide();\n                        modal.find('.video-create-button').show();\n                        roles.prop('checked', widget._gallery.find('.image.item:not(.removed)').length < 1);\n                        modalTitleElement.text($.mage.__('New Video'));\n                        widget._isEditPage = false;\n\n                        return null;\n                    }\n                    widget._blockActionButtons(false);\n                    modalTitleElement.text($.mage.__('Edit Video'));\n                    widget._isEditPage = true;\n                    imageData = widget._getImage(file);\n\n                    if (!imageData) {\n                        imageData = {\n                            url: _.find(widget._gallery.find('.product-image'), function (image) {\n                                return image.src.indexOf(file) > -1;\n                            }).src\n                        };\n                    }\n\n                    widget._onPreview(null, imageData.url, false);\n                },\n\n                /**\n                 * Closed\n                 */\n                closed: function () {\n                    widget._onClose();\n                    widget.createVideoItemIcons();\n                }\n            });\n            this.toggleButtons();\n        },\n\n        /**\n         * @param {String} status\n         * @private\n         */\n        _blockActionButtons: function (status) {\n            this.element\n                .closest('.mage-new-video-dialog')\n                .find('.page-actions-buttons button.video-create-button, .page-actions-buttons button.video-edit')\n                .attr('disabled', status);\n        },\n\n        /**\n         * Check form\n         * @param {Function} callback\n         */\n        isValid: function (callback) {\n            var videoForm = this.element.find(this._videoFormSelector),\n                videoLoaded = true;\n\n            this._blockActionButtons(true);\n\n            this._videoUrlWidget.trigger('validate_video_url', $.proxy(function () {\n\n                videoForm.mage('validation', {\n\n                    /**\n                     * @param {jQuery} error\n                     * @param {jQuery} element\n                     */\n                    errorPlacement: function (error, element) {\n                        error.insertAfter(element);\n                    }\n                }).on('highlight.validate', function () {\n                    $(this).validation('option');\n                });\n\n                videoForm.validation();\n\n                if (this._videoRequestComplete === false) {\n                    videoLoaded = false;\n                }\n\n                callback(videoForm.valid() && videoLoaded);\n            }, this));\n\n            this._blockActionButtons(false);\n        },\n\n        /**\n         * Create video item icons\n         */\n        createVideoItemIcons: function () {\n            var $imageWidget = this._gallery.find('.product-image.video-item'),\n                $productGalleryWrapper = $(this._imageProductGalleryWrapperSelector).find('.product-image.video-item');\n\n            $imageWidget.parent().addClass('video-item');\n            $productGalleryWrapper.parent().addClass('video-item');\n            $imageWidget.removeClass('video-item');\n            $productGalleryWrapper.removeClass('video-item');\n            $('.video-item .action-delete').attr('title', $.mage.__('Delete video'));\n            $('.video-item .action-delete span').html($.mage.__('Delete video'));\n        },\n\n        /**\n         * Fired when click on create video\n         * @private\n         */\n        _onCreate: function () {\n            var nvs = this.element.find(this._videoPreviewInputSelector),\n                file = nvs.get(0),\n                reqClass = 'required-entry _required';\n\n            if (file && file.files && file.files.length) {\n                file = file.files[0];\n            } else {\n                file = null;\n            }\n\n            if (!file && !this._tempPreviewImageData) {\n                nvs.addClass(reqClass);\n            }\n\n            this.isValid($.proxy(\n                function (videoValidStatus) {\n\n                    if (!videoValidStatus) {\n                        return;\n                    }\n\n                    if (this._tempPreviewImageData) {\n                        this._onImageLoaded(this._tempPreviewImageData, null, null, $.proxy(this.close, this));\n                    } else {\n                        this._uploadImage(file, null, $.proxy(function () {\n                            this.close();\n                        }, this));\n                    }\n\n                    nvs.removeClass(reqClass);\n                },\n                this\n            ));\n        },\n\n        /**\n         * Fired when click on update video\n         * @private\n         */\n        _onUpdate: function () {\n            var inputFile, itemId, _inputSelector, mediaFields, imageData, flagChecked, fileName, callback;\n\n            this.isValid($.proxy(\n                function (videoValidStatus) {\n\n                    if (!videoValidStatus) {\n                        return;\n                    }\n\n                    imageData = this.imageData || {};\n                    inputFile = this.element.find(this._videoPreviewInputSelector);\n                    itemId = this.element.find(this._itemIdSelector).val();\n                    itemId = itemId.slice(1, itemId.length - 1);\n                    _inputSelector = '[name*=\"[' + itemId + ']\"]';\n                    mediaFields = this._gallery.find('input' + _inputSelector);\n                    $.each(mediaFields, function (i, el) {\n                        var elName = el.name,\n                            start = elName.indexOf(itemId) + itemId.length + 2,\n                            fieldName = elName.substring(start, el.name.length - 1),\n                            _field = this.element.find('#' + fieldName),\n                            _tmp;\n\n                        if (_field.length > 0) {\n                            _tmp = _inputSelector.slice(0, _inputSelector.length - 2) + '[' + fieldName + ']\"]';\n                            this._gallery.find(_tmp).val(_field.val());\n                            imageData[fieldName] = _field.val();\n                        }\n                    }.bind(this));\n                    flagChecked = this.element.find(this._videoDisableinputSelector).prop('checked') ? 1 : 0;\n                    this._gallery.find('input[name*=\"' + itemId + '][disabled]\"]').val(flagChecked);\n                    this._gallery.find(_inputSelector).siblings('.image-fade').css(\n                        'visibility',\n                        flagChecked ? 'visible' : 'hidden'\n                    );\n                    imageData.disabled = flagChecked;\n\n                    if (this._tempPreviewImageData) {\n                        this._onImageLoaded(\n                            this._tempPreviewImageData,\n                            null,\n                            imageData.file,\n                            $.proxy(this.close, this)\n                        );\n\n                        return;\n                    }\n                    fileName = inputFile.get(0).files;\n\n                    if (!fileName || !fileName.length) {\n                        fileName = null;\n                    }\n                    inputFile.replaceWith(inputFile);\n\n                    callback = $.proxy(function () {\n                        this.close();\n                    }, this);\n\n                    if (fileName) {\n                        this._uploadImage(fileName, imageData.file, callback);\n                    } else {\n                        this._replaceImage(imageData.file, imageData.file, imageData);\n                        callback(0, imageData);\n                    }\n                },\n                this\n            ));\n        },\n\n        /**\n         * Delegates call to producwt gallery to update video visibility.\n         *\n         * @param {Object} imageData\n         */\n        _updateVisibility: function (imageData) {\n            this._gallery.trigger('updateVisibility', {\n                disabled: imageData.disabled,\n                imageData: imageData\n            });\n        },\n\n        /**\n         * Delegates call to product gallery to update video title.\n         *\n         * @param {Object} imageData\n         */\n        _updateImageTitle: function (imageData) {\n            this._gallery.trigger('updateImageTitle', {\n                imageData: imageData\n            });\n        },\n\n        /**\n         * Fired when clicked on cancel\n         * @private\n         */\n        _onCancel: function () {\n            this.close();\n        },\n\n        /**\n         * Fired when clicked on delete\n         * @private\n         */\n        _onDelete: function () {\n            var filename = this.element.find(this._videoImageFilenameselector).val();\n\n            this._removeImage(filename);\n            this.close();\n        },\n\n        /**\n         * @param {String} file\n         * @param {Function} callback\n         * @private\n         */\n        _readPreviewLocal: function (file, callback) {\n            var fr = new FileReader;\n\n            if (!window.FileReader) {\n                return;\n            }\n\n            /**\n             * On load end\n             */\n            fr.onloadend = function () {\n                callback(fr.result);\n            };\n            fr.readAsDataURL(file);\n        },\n\n        /**\n         *  Image file input handler\n         * @private\n         */\n        _onImageInputChange: function () {\n            var jFile = this.element.find(this._videoPreviewInputSelector),\n                file = jFile[0],\n                val = jFile.val(),\n                prev = this._getPreviewImage(),\n                ext = '.' + val.split('.').pop();\n\n            if (!val) {\n                return;\n            }\n            ext = ext ? ext.toLowerCase() : '';\n\n            if (\n                ext.length < 2 ||\n                this._imageTypes.indexOf(ext.toLowerCase()) === -1 || !file.files || !file.files.length\n            ) {\n                prev.remove();\n                this._previewImage = null;\n                jFile.val('');\n\n                return;\n            } // end if\n            file = file.files[0];\n            this._tempPreviewImageData = null;\n            this._onPreview(null, file, true);\n        },\n\n        /**\n         * Change Preview\n         * @param {String} error\n         * @param {String} src\n         * @param {Boolean} local\n         * @private\n         */\n        _onPreview: function (error, src, local) {\n            var img, renderImage;\n\n            img = this._getPreviewImage();\n\n            /**\n             * Callback\n             * @param {String} source\n             */\n            renderImage = function (source) {\n                img.attr({\n                    'src': source\n                }).show();\n            };\n\n            if (error) {\n                return;\n            }\n\n            if (!local) {\n                renderImage(src);\n            } else {\n                this._readPreviewLocal(src, renderImage);\n            }\n        },\n\n        /**\n         *\n         * Return preview image imstance\n         * @returns {null}\n         * @private\n         */\n        _getPreviewImage: function () {\n\n            if (!this._previewImage) {\n                this._previewImage = $(document.createElement('img')).css({\n                    'width': '100%',\n                    'display': 'none',\n                    'src': ''\n                });\n                $(this._previewImage).insertAfter(this.element.find(this._videoPreviewImagePointer));\n                $(this._previewImage).attr('data-role', 'video_preview_image');\n            }\n\n            return this._previewImage;\n        },\n\n        /**\n         * Close slideout dialog\n         */\n        close: function () {\n            this.element.modal('closeModal');\n        },\n\n        /**\n         * Close dialog wrap\n         * @private\n         */\n        _onClose: function () {\n            var newVideoForm;\n\n            this._isEditPage = true;\n            this.imageData = null;\n\n            if (this._previewImage) {\n                this._previewImage.remove();\n                this._previewImage = null;\n            }\n            this._tempPreviewImageData = null;\n            this.element.trigger('reset');\n            newVideoForm = this.element.find(this._videoFormSelector);\n\n            $(newVideoForm).find('input[type=\"hidden\"][name!=\"form_key\"]').val('');\n            this._gallery.find(\n                'input[name*=\"' + this.element.find(this._itemIdSelector).val() + '\"]'\n            ).parent().removeClass('active');\n\n            try {\n                newVideoForm.validation('clearError');\n            } catch (e) {\n\n            }\n            newVideoForm.trigger('reset');\n        },\n\n        /**\n         * Find element by fileName\n         * @param {String} file\n         */\n        findElementId: function (file) {\n            var elem = this._gallery.find('.image.item').find('input[value=\"' + file + '\"]');\n\n            if (!elem.length) {\n                return null;\n            }\n\n            return $(elem).attr('name').replace('product[media_gallery][images][', '').replace('][file]', '');\n        },\n\n        /**\n         * Save image roles\n         * @param {Object} imageData\n         */\n        saveImageRoles: function (imageData) {\n            var data = imageData.file,\n                self = this,\n                containers;\n\n            if (data && data.length > 0) {\n                containers = this._gallery.find('.image-placeholder').siblings('input');\n                $.each(containers, function (i, el) {\n                    var start = el.name.indexOf('[') + 1,\n                        end = el.name.indexOf(']'),\n                        imageType = el.name.substring(start, end),\n                        imageCheckbox = self.element.find(\n                            self._videoFormSelector + ' input[value=\"' + imageType + '\"]'\n                        );\n\n                    self._changeRole(imageType, imageCheckbox.prop('checked'), imageData);\n                });\n            }\n        },\n\n        /**\n         * Change image role\n         * @param {String} imageType - role name\n         * @param {bool} isEnabled - role active status\n         * @param {Object} imageData - image data object\n         * @private\n         */\n        _changeRole: function (imageType, isEnabled, imageData) {\n            var needCheked = true;\n\n            if (!isEnabled) {\n                needCheked = this._gallery.find('input[name=\"product[' + imageType + ']\"]').val() === imageData.file;\n            }\n\n            if (!needCheked) {\n                return null;\n            }\n\n            this._gallery.trigger('setImageType', {\n                type: imageType,\n                imageData: isEnabled ? imageData : null\n            });\n        },\n\n        /**\n         * On open dialog\n         * @param {Object} e\n         * @param {Object} imageData\n         * @private\n         */\n        _onOpenDialog: function (e, imageData) {\n            var formFields, flagChecked, file,\n                modal = this.element.closest('.mage-new-video-dialog');\n\n            if (imageData['media_type'] === 'external-video') {\n                this.imageData = imageData;\n                modal.find('.video-create-button').hide();\n                modal.find('.video-delete-button').show();\n                modal.find('.video-edit').show();\n                modal.createVideoPlayer({\n                    reset: true\n                }).createVideoPlayer('reset');\n\n                formFields = modal.find(this._videoFormSelector).find('.edited-data');\n\n                $.each(formFields, function (i, field) {\n                    $(field).val(imageData[field.name]);\n                });\n\n                flagChecked = imageData.disabled > 0;\n                modal.find(this._videoDisableinputSelector).prop('checked', flagChecked);\n\n                file = modal.find('#file_name').val(imageData.file);\n\n                $.each(modal.find('.video_image_role'), function () {\n                    $(this).prop('checked', false).prop('disabled', false);\n                });\n\n                $.each(this._gallery.find('.image-placeholder').siblings('input:hidden'), function () {\n                    var start, end, imageRole;\n\n                    if ($(this).val() === file.val()) {\n                        start = this.name.indexOf('[') + 1;\n                        end = this.name.length - 1;\n                        imageRole = this.name.substring(start, end);\n                        modal.find('#new_video_form input[value=\"' + imageRole + '\"]').prop('checked', true);\n                    }\n                });\n            }\n\n        },\n\n        /**\n         * Toggle buttons\n         */\n        toggleButtons: function () {\n            var self = this,\n                modal = this.element.closest('.mage-new-video-dialog');\n\n            modal.find('.video-placeholder, .add-video-button-container > button').click(function () {\n                modal.find('.video-create-button').show();\n                modal.find('.video-delete-button').hide();\n                modal.find('.video-edit').hide();\n                modal.createVideoPlayer({\n                    reset: true\n                }).createVideoPlayer('reset').updateInputFields({\n                    reset: true\n                }).updateInputFields('reset');\n            });\n            this._gallery.on('click', '.item.video-item', function () {\n                modal.find('.video-create-button').hide();\n                modal.find('.video-delete-button').show();\n                modal.find('.video-edit').show();\n                modal.find('.mage-new-video-dialog').createVideoPlayer({\n                    reset: true\n                }).createVideoPlayer('reset');\n            });\n            this._gallery.on('click', '.item.video-item:not(.removed)', function () {\n                var flagChecked,\n                    file,\n                    formFields = modal.find('.edited-data'),\n                    container = $(this);\n\n                $.each(formFields, function (i, field) {\n                    $(field).val(container.find('input[name*=\"' + field.name + '\"]').val());\n                });\n\n                flagChecked = container.find('input[name*=\"disabled\"]').val() > 0;\n                self._gallery.find(self._videoDisableinputSelector).prop('checked', flagChecked);\n\n                file = self._gallery.find('#file_name').val(container.find('input[name*=\"file\"]').val());\n\n                $.each(self._gallery.find('.video_image_role'), function () {\n                    $(this).prop('checked', false).prop('disabled', false);\n                });\n\n                $.each(self._gallery.find('.image-placeholder').siblings('input:hidden'), function () {\n                    var start, end, imageRole;\n\n                    if ($(this).val() !== file.val()) {\n                        return null;\n                    }\n\n                    start = this.name.indexOf('[') + 1;\n                    end = this.name.length - 1;\n                    imageRole = this.name.substring(start, end);\n                    self._gallery.find('input[value=\"' + imageRole + '\"]').prop('checked', true);\n                });\n            });\n        }\n    });\n\n    $('#group-fields-image-management > legend > span').text($.mage.__('Images and Videos'));\n\n    return $.mage.newVideoDialog;\n});\n","Magento_ProductVideo/js/video-modal.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'productGallery',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate',\n    'mage/backend/tree-suggest',\n    'mage/backend/validation',\n    'newVideoDialog'\n], function ($, productGallery) {\n    'use strict';\n\n    $.widget('mage.productGallery', productGallery, {\n\n        /**\n         * Bind events\n         * @private\n         */\n        _bind: function () {\n            var events = {},\n                itemId;\n\n            this._super();\n\n            /**\n             * Add item_id value to opened modal\n             * @param {Object} event\n             */\n            events['click ' + this.options.imageSelector] = function (event) {\n                if (!$(event.currentTarget).is('.ui-sortable-helper')) {\n                    itemId = $(event.currentTarget).find('input')[0].name.match(/\\[([^\\]]*)\\]/g)[2];\n                    this.videoDialog.find('#item_id').val(itemId);\n                }\n            };\n            this._on(events);\n            this.element.prev().find('[data-role=\"add-video-button\"]').on('click', this.showModal.bind(this));\n            this.element.on('openDialog', '.gallery.ui-sortable', $.proxy(this._onOpenDialog, this));\n        },\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this._super();\n            this.videoDialog = this.element.find('#new-video');\n            this.videoDialog.mage('newVideoDialog', this.videoDialog.data('modalInfo'));\n        },\n\n        /**\n         * Open dialog for external video\n         * @private\n         */\n        _onOpenDialog: function (e, imageData) {\n\n            if (imageData['media_type'] !== 'external-video') {\n                this._superApply(arguments);\n            } else {\n                this.showModal();\n            }\n        },\n\n        /**\n         * Fired on trigger \"openModal\"\n         */\n        showModal: function () {\n            this.videoDialog.modal('openModal');\n        }\n    });\n\n    return $.mage.productGallery;\n});\n","Amasty_BannersLite/js/form.js":"define([\n    'Magento_Ui/js/form/components/fieldset',\n    'underscore',\n    'uiRegistry'\n], function (Component, _, registry) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            rulesActions: [\n                //SP Rules\n                'buyxgety_anyproducts',\n                'thecheapest',\n                'thecheapest_fixprice',\n                'themostexpencive',\n                'moneyamount',\n                'eachn_perc',\n                'eachn_fixdisc',\n                'eachn_fixprice',\n                'eachmaftn_perc',\n                'eachmaftn_fixdisc',\n                'eachmaftn_fixprice',\n                'groupn',\n                'groupn_disc',\n                'buyxgety_perc',\n                'buyxgety_fixprice',\n                'buyxgety_fixdisc',\n                'buyxgetn_perc',\n                'buyxgetn_fixprice',\n                'buyxgetn_fixdisc',\n                'aftern_fixprice',\n                'aftern_disc',\n                'aftern_fixdisc',\n                'setof_percent',\n                'setof_fixed',\n                'tiered_wholecheaper',\n                'tiered_buyxgetcheapern',\n                //Free Gift Rules\n                'ampromo_product',\n                'ampromo_items',\n                'ampromo_cart',\n                'ampromo_spent',\n                'ampromo_eachn'\n            ],\n            listens: {\n                '${ $.parentName }.actions.simple_action:value': 'onChange'\n            }\n        },\n\n        initialize: function () {\n            this._super();\n            registry.get(this.parentName + '.actions.simple_action', function (component) {\n                this.checkVisibility(component.value());\n            }.bind(this));\n        },\n\n        onChange:function (value) {\n            this.checkVisibility(value);\n        },\n\n        checkVisibility: function (value) {\n            if (_.contains(this.rulesActions, value)) {\n                this.visible(true);\n            } else {\n                this.visible(false);\n            }\n        }\n    });\n});\n","Amasty_BannersLite/js/form/element/file-uploader.js":"define([\n    'Magento_Ui/js/form/element/file-uploader',\n    'jquery',\n], function (fileUploader, $) {\n    return fileUploader.extend({\n        defaults: {\n            deleteUrl: null\n        },\n\n        /**\n         * @param {Event} event - Event object.\n         * @param {Object} data - File data that will be uploaded.\n         */\n        onBeforeFileUpload: function (event, data) {\n            this._super();\n            if (this.value().length !== 0) {\n                this.removeFile(this.value()[0])\n            }\n        },\n\n        /**\n         * @param {Object} file - Data of the file that will be removed.\n         */\n        removeFile: function (file) {\n            var formData = new FormData(),\n                deleted = false;\n\n            formData.append('form_key', $('[name=\"form_key\"]').val());\n            formData.append('banner_image', file.name);\n\n            $.ajax({\n                async: false,\n                showLoader: true,\n                url: this.deleteUrl,\n                processData: false,\n                contentType: false,\n                data: formData,\n                method: 'post',\n                success: function (res) {\n                    if (!res.error) {\n                        deleted = true;\n                    }\n                }\n            });\n\n            if (deleted) {\n                this._super();\n            }\n\n            return this;\n        }\n    })\n});\n","Amasty_BannersLite/js/form/element/category-tree.js":"define([\n    'underscore',\n    'uiRegistry',\n    'Magento_Catalog/js/components/new-category',\n    'jquery'\n], function (_, uiRegistry, Category, $) {\n    'use strict';\n\n    return Category.extend({\n        toggleOptionSelected: function (data) {\n            this._super(data);\n\n            if (this.isSelected(data.value) && data.hasOwnProperty(this.separator)) {\n                // Show and select all nested category\n                this.openChildByData(data);\n                var self = this;\n                _.each(data[this.separator], function (child) {\n                    self.selectChilds(child);\n                });\n            }\n\n            return this;\n        },\n\n        selectChilds: function (data) {\n            if (!this.isSelected(data.value)) {\n                this.value.push(data.value);\n            }\n            if (data.hasOwnProperty(this.separator)) {\n                this.openChildByData(data);\n                var self = this;\n                _.each(data[this.separator], function (child) {\n                    self.selectChilds(child);\n                });\n            }\n        },\n\n        openChildByData: function (data) {\n            var contextElement = $(this.cacheUiSelect).find('li')[this.getOptionIndex(data)];\n            $(contextElement).children('ul').show();\n        }\n    });\n});","Magento_ScheduledImportExport/js/apply_grid_filter.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'mage/adminhtml/grid'\n], function () {\n    'use strict';\n\n    return function () {\n        var varienGrid, exportFilterGridJsObject, varienImportExportScheduled;\n\n        /**\n         * @returns {*}\n         */\n        function doFilter() {\n            return varienGrid.prototype.doFilter.call(this, varienImportExportScheduled.modifyFilterGrid);\n        }\n\n        /**\n         * @returns {*}\n         */\n        function resetFilter() {\n            return varienGrid.prototype.resetFilter.call(this, varienImportExportScheduled.modifyFilterGrid);\n        }\n\n        if (window['export_filter_gridJsObject'] !== undefined) {\n\n            exportFilterGridJsObject.resetFilter = resetFilter();\n            exportFilterGridJsObject.doFilter = doFilter();\n        }\n    };\n});\n","Magento_TwoFactorAuth/js/change_provider.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'ko'\n], function (Component, ko) {\n    'use strict';\n\n    return Component.extend({\n        showChangeMethod: ko.observable(false),\n\n        providers: [],\n        switchIcon: '',\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/change_provider'\n        },\n\n        /**\n         * Get switch icon URL\n         * @returns {String}\n         */\n        getSwitchIconUrl: function () {\n            return this.switchIcon;\n        },\n\n        /**\n         * Show available alternative 2FA providers\n         */\n        displayChangeMethod: function () {\n            this.showChangeMethod(true);\n        },\n\n        /**\n         * Return a list of alternative providers\n         * @returns {Array}\n         */\n        getProviders: function () {\n            return this.providers;\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/error.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate'\n], function ($, alert) {\n    'use strict';\n\n    return {\n        /**\n         * Display an error message\n         * @param {String} message\n         */\n        display: function (message) {\n            alert({\n                title: $.mage.__('Error'),\n                content: message\n            });\n        }\n    };\n});\n","Magento_TwoFactorAuth/js/authy/auth.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/error',\n    'mage/translate'\n], function ($, ko, Component, error) {\n    'use strict';\n\n    return Component.extend({\n        selectedMethod: ko.observable(''),\n        waitingText: ko.observable(''),\n        success: ko.observable(false),\n        tokenCode: ko.observable(''),\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/authy/auth'\n        },\n\n        waitForOneTouchApprovalTimeout: 0,\n\n        postUrl: '',\n        tokenRequestUrl: '',\n        oneTouchUrl: '',\n        verifyOneTouchUrl: '',\n\n        /**\n         * Get auth post URL\n         * @returns {String}\n         */\n        getPostUrl: function () {\n            return this.postUrl;\n        },\n\n        /**\n         * Get token request URL\n         * @returns {String}\n         */\n        getTokenRequestUrl: function () {\n            return this.tokenRequestUrl;\n        },\n\n        /**\n         * Get one touch request URL\n         * @returns {String}\n         */\n        getOneTouchUrl: function () {\n            return this.oneTouchUrl;\n        },\n\n        /**\n         * Get one touch verification URL\n         * @returns {String}\n         */\n        getVerifyOneTouchUrl: function () {\n            return this.verifyOneTouchUrl;\n        },\n\n        /**\n         * Get success URL\n         * @returns {String}\n         */\n        getSuccessUrl: function () {\n            return this.successUrl;\n        },\n\n        /**\n         * Go to login page\n         */\n        login: function () {\n            this.success(true);\n            self.location.href = this.getSuccessUrl();\n        },\n\n        /**\n         * Stop onetouch approval background approval\n         */\n        stopWaitingOnetouchApproval: function () {\n            if (this.waitForOneTouchApprovalTimeout) {\n                window.clearTimeout(this.waitForOneTouchApprovalTimeout);\n                this.waitForOneTouchApprovalTimeout = 0;\n            }\n        },\n\n        /**\n         * Switch to authy code validation\n         * @param {String} via\n         */\n        runSendCode: function (via) {\n            var me = this;\n\n            this.selectedMethod('code');\n\n            if (via !== 'token') {\n                $.getJSON(\n                    this.getTokenRequestUrl() + '?via=' +\n                    via\n                )\n                    .fail(function () {\n                        error.display('There was an error trying to contact Authy services');\n                        me.switchAnotherMethod();\n                    });\n            }\n        },\n\n        /**\n         * Switch to authy token code validation\n         */\n        runSendCodeToken: function () {\n            this.runSendCode('token');\n        },\n\n        /**\n         * Switch to authy sms code validation\n         */\n        runSendCodeSms: function () {\n            this.runSendCode('sms');\n        },\n\n        /**\n         * Switch to authy call code validation\n         */\n        runSendCodeCall: function () {\n            this.runSendCode('call');\n        },\n\n        /**\n         * Switch to one touch validation\n         */\n        runOneTouch: function () {\n            var me = this;\n\n            this.selectedMethod('onetouch');\n            this.waitingText('Sending push notification...');\n            this.success(false);\n\n            this.stopWaitingOnetouchApproval();\n\n            $.getJSON(this.getOneTouchUrl())\n                .done(function () {\n                    me.waitForOneTouchApproval();\n                })\n                .fail(function () {\n                    error.display('There was an error trying to contact Authy services');\n                    me.switchAnotherMethod();\n                });\n        },\n\n        /**\n         * Start background one touch approval check\n         */\n        waitForOneTouchApproval: function () {\n            var me = this;\n\n            this.waitingText('Waiting for approval...');\n\n            $.getJSON(this.getVerifyOneTouchUrl())\n                .done(function (res) {\n                    if (res.status === 'retry') {\n                        me.waitForOneTouchApprovalTimeout = window.setTimeout(function () {\n                            me.waitForOneTouchApproval();\n                        }, 1000);\n                    } else if (res.status === 'expired') {\n                        error.display($.mage.__('Your request has been expired'));\n                        me.switchAnotherMethod();\n                    } else if (res.status === 'denied') {\n                        error.display($.mage.__('Your request has been rejected'));\n                        me.switchAnotherMethod();\n                    } else if (res.status === 'approved') {\n                        me.login();\n                    }\n                })\n                .fail(function () {\n                    error.display('There was an error trying to contact Authy services');\n                    this.switchAnotherMethod();\n                });\n        },\n\n        /**\n         * Switch back to method selection\n         */\n        switchAnotherMethod: function () {\n            this.selectedMethod('');\n            this.waitingText('');\n            this.success(false);\n        },\n\n        /**\n         * Verify authy code\n         */\n        verifyCode: function () {\n            var me = this;\n\n            this.waitingText('Please wait...');\n\n            $.post(this.getPostUrl(), {\n                'tfa_code': this.tokenCode\n            })\n                .done(function (res) {\n                    if (res.success) {\n                        me.login();\n                    } else {\n                        error.display(res.message);\n                        me.waitingText('');\n                        me.tokenCode('');\n                    }\n                })\n                .fail(function () {\n                    error.display('There was an internal error trying to verify your code');\n                });\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/authy/configure.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/authy/configure/registry'\n], function (ko, Component, registry) {\n    'use strict';\n\n    return Component.extend({\n        currentStep: registry.currentStep,\n        defaults: {\n            template: 'Magento_TwoFactorAuth/authy/configure'\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/authy/configure/register.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/error',\n    'Magento_TwoFactorAuth/js/authy/configure/registry',\n    'mage/translate'\n], function ($, ko, Component, error, registry) {\n    'use strict';\n\n    return Component.extend({\n        configurePostUrl: '',\n        countries: [],\n\n        country: ko.observable(''),\n        phone: ko.observable(''),\n        method: ko.observable(''),\n\n        waitText: ko.observable(''),\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/authy/configure/register'\n        },\n\n        /**\n         * Get configure POST url\n         * @returns {String}\n         */\n        getConfigurePostUrl: function () {\n            return this.configurePostUrl;\n        },\n\n        /**\n         * Get a list of available countries\n         * @returns {Array}\n         */\n        getCountries: function () {\n            return this.countries;\n        },\n\n        /**\n         * Go to next step\n         */\n        nextStep: function () {\n            registry.currentStep('verify');\n            window.setTimeout(function () {\n                registry.currentStep('register');\n            }, registry.secondsToExpire() * 1000);\n        },\n\n        /**\n         * Start Authy registration procedure\n         */\n        doRegister: function () {\n            var me = this;\n\n            this.waitText('Please wait...');\n            $.post(this.getConfigurePostUrl(), {\n                'tfa_country': this.country(),\n                'tfa_phone': this.phone(),\n                'tfa_method': this.method()\n\n            })\n                .done(function (res) {\n                    if (res.success) {\n                        registry.messageText(res.message);\n                        registry.secondsToExpire(res['seconds_to_expire']);\n                        me.nextStep();\n                    } else {\n                        error.display(res.message);\n                    }\n                    me.waitText('');\n                })\n                .fail(function () {\n                    error.display('There was an internal error trying to verify your code');\n                    me.waitText('');\n                });\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/authy/configure/registry.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'ko'\n], function (ko) {\n    'use strict';\n\n    return {\n        currentStep: ko.observable('register'),\n        messageText: ko.observable(''),\n        secondsToExpire: ko.observable(0)\n    };\n});\n","Magento_TwoFactorAuth/js/authy/configure/verify.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/error',\n    'Magento_TwoFactorAuth/js/authy/configure/registry',\n    'mage/translate'\n], function ($, ko, Component, error, registry) {\n    'use strict';\n\n    return Component.extend({\n        verifyCode: ko.observable(''),\n        messageText: registry.messageText,\n        waitText: ko.observable(''),\n\n        verifyPostUrl: '',\n        successUrl: '',\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/authy/configure/verify'\n        },\n\n        /**\n         * Get verification post URL\n         * @returns {String}\n         */\n        getVerifyPostUrl: function () {\n            return this.verifyPostUrl;\n        },\n\n        /**\n         * Go to next step\n         */\n        nextStep: function () {\n            registry.currentStep('login');\n            self.location.href = this.successUrl;\n        },\n\n        /**\n         * Verify auth code\n         */\n        doVerify: function () {\n            var me = this;\n\n            this.waitText('Please wait...');\n            $.post(this.getVerifyPostUrl(), {\n                'tfa_verify': this.verifyCode()\n            })\n                .done(function (res) {\n                    if (res.success) {\n                        me.nextStep();\n                    } else {\n                        error.display(res.message);\n                    }\n                    me.waitText('');\n                })\n                .fail(function () {\n                    error.display('There was an internal error trying to verify your code');\n                    me.waitText('');\n                });\n        },\n\n        /**\n         * Go to previous step to change phone number\n         */\n        changePhoneNumber: function () {\n            registry.currentStep('register');\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/duo/api.js":"/**\n * Duo Web SDK v2\n * Copyright 2017, Duo Security\n */\n\n/* eslint-disable */\n// jscs:disable\n\n(function (root, factory) {\n/* eslint-disable */\nif (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n} else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n} else {\n    // Browser globals (root is window)\n    var Duo = factory();\n    // If the Javascript was loaded via a script tag, attempt to autoload\n    // the frame.\n\n    Duo._onReady(Duo.init);\n\n    // Attach Duo to the `window` object\n    root.Duo = Duo;\n}\n}(this, function () {\n    var DUO_MESSAGE_FORMAT = /^(?:AUTH|ENROLL)+\\|[A-Za-z0-9\\+\\/=]+\\|[A-Za-z0-9\\+\\/=]+$/;\n    var DUO_ERROR_FORMAT = /^ERR\\|[\\w\\s\\.\\(\\)]+$/;\n    var DUO_OPEN_WINDOW_FORMAT = /^DUO_OPEN_WINDOW\\|/;\n    var VALID_OPEN_WINDOW_DOMAINS = [\n      'duo.com',\n      'duosecurity.com',\n      'duomobile.s3-us-west-1.amazonaws.com'\n    ];\n\n    var iframeId = 'duo_iframe',\n      postAction = '',\n      postArgument = 'sig_response',\n      host,\n      sigRequest,\n      duoSig,\n      appSig,\n      iframe,\n      submitCallback;\n\n    function throwError(message, url) {\n        throw new Error(\n          'Duo Web SDK error: ' + message +\n          (url ? '\\n' + 'See ' + url + ' for more information' : '')\n        );\n    }\n\n    function hyphenize(str) {\n        return str.replace(/([a-z])([A-Z])/, '$1-$2').toLowerCase();\n    }\n\n    // cross-browser data attributes\n    function getDataAttribute(element, name) {\n        if ('dataset' in element) {\n            return element.dataset[name];\n        }\n\n        return element.getAttribute('data-' + hyphenize(name));\n\n    }\n\n    // cross-browser event binding/unbinding\n    function on(context, event, fallbackEvent, callback) {\n        if ('addEventListener' in window) {\n            context.addEventListener(event, callback, false);\n        } else {\n            context.attachEvent(fallbackEvent, callback);\n        }\n    }\n\n    function off(context, event, fallbackEvent, callback) {\n        if ('removeEventListener' in window) {\n            context.removeEventListener(event, callback, false);\n        } else {\n            context.detachEvent(fallbackEvent, callback);\n        }\n    }\n\n    function onReady(callback) {\n        on(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n    }\n\n    function offReady(callback) {\n        off(document, 'DOMContentLoaded', 'onreadystatechange', callback);\n    }\n\n    function onMessage(callback) {\n        on(window, 'message', 'onmessage', callback);\n    }\n\n    function offMessage(callback) {\n        off(window, 'message', 'onmessage', callback);\n    }\n\n    /**\n     * Parse the sig_request parameter, throwing errors if the token contains\n     * a server error or if the token is invalid.\n     *\n     * @param {String} sig Request token\n     */\n    function parseSigRequest(sig) {\n        if (!sig) {\n            // nothing to do\n            return;\n        }\n\n        // see if the token contains an error, throwing it if it does\n        if (sig.indexOf('ERR|') === 0) {\n            throwError(sig.split('|')[1]);\n        }\n\n        // validate the token\n        if (sig.indexOf(':') === -1 || sig.split(':').length !== 2) {\n            throwError(\n              'Duo was given a bad token.  This might indicate a configuration ' +\n              'problem with one of Duo\\'s client libraries.',\n              'https://www.duosecurity.com/docs/duoweb#first-steps'\n            );\n        }\n\n        var sigParts = sig.split(':');\n\n        // hang on to the token, and the parsed duo and app sigs\n        sigRequest = sig;\n        duoSig = sigParts[0];\n        appSig = sigParts[1];\n\n        return {\n            sigRequest: sig,\n            duoSig: sigParts[0],\n            appSig: sigParts[1]\n        };\n    }\n\n    /**\n     * This function is set up to run when the DOM is ready, if the iframe was\n     * not available during `init`.\n     */\n    function onDOMReady() {\n        iframe = document.getElementById(iframeId);\n\n        if (!iframe) {\n            throw new Error(\n              'This page does not contain an iframe for Duo to use.' +\n              'Add an element like <iframe id=\"duo_iframe\"></iframe> ' +\n              'to this page.  ' +\n              'See https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe ' +\n              'for more information.'\n            );\n        }\n\n        // we've got an iframe, away we go!\n        ready();\n\n        // always clean up after yourself\n        offReady(onDOMReady);\n    }\n\n    /**\n     * Validate that a MessageEvent came from the Duo service, and that it\n     * is a properly formatted payload.\n     *\n     * The Google Chrome sign-in page injects some JS into pages that also\n     * make use of postMessage, so we need to do additional validation above\n     * and beyond the origin.\n     *\n     * @param {MessageEvent} event Message received via postMessage\n     */\n    function isDuoMessage(event) {\n        return Boolean(\n          event.origin === 'https://' + host &&\n          typeof event.data === 'string' &&\n          (\n            event.data.match(DUO_MESSAGE_FORMAT) ||\n            event.data.match(DUO_ERROR_FORMAT) ||\n            event.data.match(DUO_OPEN_WINDOW_FORMAT)\n          )\n        );\n    }\n\n    /**\n     * Validate the request token and prepare for the iframe to become ready.\n     *\n     * All options below can be passed into an options hash to `Duo.init`, or\n     * specified on the iframe using `data-` attributes.\n     *\n     * Options specified using the options hash will take precedence over\n     * `data-` attributes.\n     *\n     * Example using options hash:\n     * ```javascript\n     * Duo.init({\n       *     iframe: \"some_other_id\",\n       *     host: \"api-main.duo.test\",\n       *     sig_request: \"...\",\n       *     post_action: \"/auth\",\n       *     post_argument: \"resp\"\n       * });\n     * ```\n     *\n     * Example using `data-` attributes:\n     * ```\n     * <iframe id=\"duo_iframe\"\n     *         data-host=\"api-main.duo.test\"\n     *         data-sig-request=\"...\"\n     *         data-post-action=\"/auth\"\n     *         data-post-argument=\"resp\"\n     *         >\n     * </iframe>\n     * ```\n     *\n     * @param {Object} options\n     * @param {String} options.iframe                         The iframe, or id of an iframe to set up\n     * @param {String} options.host                           Hostname\n     * @param {String} options.sig_request                    Request token\n     * @param {String} [options.post_action='']               URL to POST back to after successful auth\n     * @param {String} [options.post_argument='sig_response'] Parameter name to use for response token\n     * @param {Function} [options.submit_callback]            If provided, duo will not submit the form instead execute\n     *                                                        the callback function with reference to the \"duo_form\" form object\n     *                                                        submit_callback can be used to prevent the webpage from reloading.\n     */\n    function init(options) {\n        if (options) {\n            if (options.host) {\n                host = options.host;\n            }\n\n            if (options.sig_request) {\n                parseSigRequest(options.sig_request);\n            }\n\n            if (options.post_action) {\n                postAction = options.post_action;\n            }\n\n            if (options.post_argument) {\n                postArgument = options.post_argument;\n            }\n\n            if (options.iframe) {\n                if (options.iframe.tagName) {\n                    iframe = options.iframe;\n                } else if (typeof options.iframe === 'string') {\n                    iframeId = options.iframe;\n                }\n            }\n\n            if (typeof options.submit_callback === 'function') {\n                submitCallback = options.submit_callback;\n            }\n        }\n\n        // if we were given an iframe, no need to wait for the rest of the DOM\n        if (iframe) {\n            ready();\n        } else {\n            // try to find the iframe in the DOM\n            iframe = document.getElementById(iframeId);\n\n            // iframe is in the DOM, away we go!\n            if (iframe) {\n                ready();\n            } else {\n                // wait until the DOM is ready, then try again\n                onReady(onDOMReady);\n            }\n        }\n\n        // always clean up after yourself!\n        offReady(init);\n    }\n\n    /**\n     * This function is called when a message was received from another domain\n     * using the `postMessage` API.  Check that the event came from the Duo\n     * service domain, and that the message is a properly formatted payload,\n     * then perform the post back to the primary service.\n     *\n     * @param event Event object (contains origin and data)\n     */\n    function onReceivedMessage(event) {\n        if (isDuoMessage(event)) {\n            if (event.data.match(DUO_OPEN_WINDOW_FORMAT)) {\n                var url = event.data.substring('DUO_OPEN_WINDOW|'.length);\n\n                if (isValidUrlToOpen(url)) {\n                    // Open the URL that comes after the DUO_WINDOW_OPEN token.\n                    window.open(url, '_self');\n                }\n            } else {\n                // the event came from duo, do the post back\n                doPostBack(event.data);\n\n                // always clean up after yourself!\n                offMessage(onReceivedMessage);\n            }\n        }\n    }\n\n    /**\n     * Validate that this passed in URL is one that we will actually allow to\n     * be opened.\n     * @param url String URL that the message poster wants to open\n     * @returns {boolean} true if we allow this url to be opened in the window\n     */\n    function isValidUrlToOpen(url) {\n        if (!url) {\n            return false;\n        }\n\n        var parser = document.createElement('a');\n\n        parser.href = url;\n\n        if (parser.protocol === 'duotrustedendpoints:') {\n            return true;\n        } else if (parser.protocol !== 'https:') {\n            return false;\n        }\n\n        for (var i = 0; i < VALID_OPEN_WINDOW_DOMAINS.length; i++) {\n            if (parser.hostname.endsWith('.' + VALID_OPEN_WINDOW_DOMAINS[i]) ||\n              parser.hostname === VALID_OPEN_WINDOW_DOMAINS[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Point the iframe at Duo, then wait for it to postMessage back to us.\n     */\n    function ready() {\n        if (!host) {\n            host = getDataAttribute(iframe, 'host');\n\n            if (!host) {\n                throwError(\n                  'No API hostname is given for Duo to use.  Be sure to pass ' +\n                  'a `host` parameter to Duo.init, or through the `data-host` ' +\n                  'attribute on the iframe element.',\n                  'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'\n                );\n            }\n        }\n\n        if (!duoSig || !appSig) {\n            parseSigRequest(getDataAttribute(iframe, 'sigRequest'));\n\n            if (!duoSig || !appSig) {\n                throwError(\n                  'No valid signed request is given.  Be sure to give the ' +\n                  '`sig_request` parameter to Duo.init, or use the ' +\n                  '`data-sig-request` attribute on the iframe element.',\n                  'https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe'\n                );\n            }\n        }\n\n        // if postAction/Argument are defaults, see if they are specified\n        // as data attributes on the iframe\n        if (postAction === '') {\n            postAction = getDataAttribute(iframe, 'postAction') || postAction;\n        }\n\n        if (postArgument === 'sig_response') {\n            postArgument = getDataAttribute(iframe, 'postArgument') || postArgument;\n        }\n\n        // point the iframe at Duo\n        iframe.src = [\n          'https://', host, '/frame/web/v1/auth?tx=', duoSig,\n          '&parent=', encodeURIComponent(document.location.href),\n          '&v=2.6'\n        ].join('');\n\n        // listen for the 'message' event\n        onMessage(onReceivedMessage);\n    }\n\n    /**\n     * We received a postMessage from Duo.  POST back to the primary service\n     * with the response token, and any additional user-supplied parameters\n     * given in form#duo_form.\n     */\n    function doPostBack(response) {\n        // create a hidden input to contain the response token\n        var input = document.createElement('input');\n\n        input.type = 'hidden';\n        input.name = postArgument;\n        input.value = response + ':' + appSig;\n\n        // user may supply their own form with additional inputs\n        var form = document.getElementById('duo_form');\n\n        // if the form doesn't exist, create one\n        if (!form) {\n            form = document.createElement('form');\n\n            // insert the new form after the iframe\n            iframe.parentElement.insertBefore(form, iframe.nextSibling);\n        }\n\n        // make sure we are actually posting to the right place\n        form.method = 'POST';\n        form.action = postAction;\n\n        // add the response token input to the form\n        form.appendChild(input);\n\n        // away we go!\n        if (typeof submitCallback === 'function') {\n            submitCallback.call(null, form);\n        } else {\n            form.submit();\n        }\n    }\n\n    return {\n        init: init,\n        _onReady: onReady,\n        _parseSigRequest: parseSigRequest,\n        _isDuoMessage: isDuoMessage,\n        _doPostBack: doPostBack\n    };\n}));\n\n/* eslint-enable */\n","Magento_TwoFactorAuth/js/duo/auth.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/duo/api'\n], function (ko, Component, duo) {\n    'use strict';\n\n    return Component.extend({\n        currentStep: ko.observable('register'),\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/duo/auth'\n        },\n\n        signature: '',\n        apiHost: '',\n        postUrl: '',\n        authenticateData: {},\n\n        /**\n         * Start waiting loop\n         */\n        onAfterRender: function () {\n            window.setTimeout(function () {\n                duo.init();\n            }, 100);\n        },\n\n        /**\n         * Get POST URL\n         * @returns {String}\n         */\n        getPostUrl: function () {\n            return this.postUrl;\n        },\n\n        /**\n         * Get signature\n         * @returns {String}\n         */\n        getSignature: function () {\n            return this.signature;\n        },\n\n        /**\n         * Get API host\n         * @returns {String}\n         */\n        getApiHost: function () {\n            return this.apiHost;\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/form/provider.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/provider'\n], function (Provider) {\n    'use strict';\n\n    return Provider.extend({\n        /**\n         * @see Magento_Ui/js/form/provider\n         * @returns {Element}\n         */\n        save: function () {\n            // Disable independent save (we have a parent form with own validation)\n            return this;\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/form/element/providers.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(['Magento_Ui/js/form/element/abstract'], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        /**\n         * Get a list of forced providers\n         * @returns {Array}\n         */\n        getForcedProviders: function () {\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            return this.forced_providers;\n        },\n\n        /**\n         * Get a list of enabled providers\n         * @returns {Array}\n         */\n        getEnabledProviders: function () {\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            return this.enabled_providers;\n        },\n\n        /**\n         * Return true if a provider is selected\n         * @param {String} provider\n         * @returns {Boolean}\n         */\n        isSelected: function (provider) {\n            var i, providers = this.value();\n\n            for (i = 0; i < providers.length; i++) {\n                if (providers[i] === provider) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/form/element/reset_providers.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n  'Magento_Ui/js/form/element/abstract',\n  'Magento_Ui/js/modal/confirm'\n], function (Abstract, confirm) {\n    'use strict';\n\n    return Abstract.extend({\n        /**\n         * Get a list of providers with reset option\n         * @returns {Array}\n         */\n        getResetProviders: function () {\n            return this.source.data['reset_providers'] ? this.source.data['reset_providers'] : [];\n        },\n\n        /**\n         * Reset a provider\n         * @param {Object} item\n         */\n        resetProvider: function (item) {\n            confirm({\n                title: 'Confirm',\n                content: 'Are you sure you want to reset ' + item.label + ' provider?',\n                actions: {\n                    confirm: function () { // jscs:ignore jsDoc\n                        self.location.href = item.url;\n                    }\n                }\n            });\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/google/auth.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/error'\n], function ($, ko, Component, error) {\n    'use strict';\n\n    return Component.extend({\n        currentStep: ko.observable('register'),\n        waitText: ko.observable(''),\n        verifyCode: ko.observable(''),\n        defaults: {\n            template: 'Magento_TwoFactorAuth/google/auth'\n        },\n\n        qrCodeUrl: '',\n        postUrl: '',\n        successUrl: '',\n        secretCode: '',\n\n        /**\n         * Get QR code URL\n         * @returns {String}\n         */\n        getQrCodeUrl: function () {\n            return this.qrCodeUrl;\n        },\n\n        /**\n         * Get POST URL\n         * @returns {String}\n         */\n        getPostUrl: function () {\n            return this.postUrl;\n        },\n\n        /**\n         * Get plain Secret Code\n         * @returns {String}\n         */\n        getSecretCode: function () {\n            return this.secretCode;\n        },\n\n        /**\n         * Go to next step\n         */\n        nextStep: function () {\n            this.currentStep('login');\n            self.location.href = this.successUrl;\n        },\n\n        /**\n         * Verify auth code\n         */\n        doVerify: function () {\n            var me = this;\n\n            this.waitText('Please wait...');\n            $.post(this.getPostUrl(), {\n                'tfa_code': this.verifyCode()\n            })\n                .done(function (res) {\n                    if (res.success) {\n                        me.nextStep();\n                    } else {\n                        error.display(res.message);\n                        me.verifyCode('');\n                    }\n                    me.waitText('');\n                })\n                .fail(function () {\n                    error.display('There was an internal error trying to verify your code');\n                    me.waitText('');\n                });\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/system/config/providers.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/translate',\n    'Magento_Ui/js/modal/confirm',\n    'domReady!'\n], function ($, $t, confirm) {\n    'use strict';\n\n    return function (config, element) {\n\n        var $element = $(element),\n            initialValue = $element.val();\n\n        element.on('blur', function () {\n            var currentValue = $element.val();\n\n            if (currentValue && currentValue.some(function (item) {\n                return initialValue.indexOf(item) !== -1;\n            })) {\n                return;\n            }\n\n            confirm({\n                title: config.modalTitleText,\n                content: config.modalContentBody,\n                buttons: [{\n                    text: $t('Cancel'),\n                    class: 'action-secondary action-dismiss',\n\n                    /**\n                     * Close modal and trigger 'cancel' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                }, {\n                    text: $t('Confirm'),\n                    class: 'action-primary action-accept',\n\n                    /**\n                     * Close modal and trigger 'confirm' action on click\n                     */\n                    click: function (event) {\n                        this.closeModal(event, true);\n                    }\n                }],\n                actions: {\n\n                    /**\n                     * Revert back to original Enabled setting\n                     */\n                    cancel: function () {\n                        $element.val(initialValue);\n                    }\n                }\n            });\n        });\n    };\n});\n","Magento_TwoFactorAuth/js/u2fkey/auth.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/error',\n    'Magento_TwoFactorAuth/js/u2fkey/utils',\n    'mage/translate'\n], function ($, ko, Component, error, utils, $t) {\n    'use strict';\n\n    return Component.extend({\n        currentStep: ko.observable('register'),\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/u2fkey/auth',\n            idle: ko.observable(true),\n            loading: ko.observable(false)\n        },\n\n        postUrl: '',\n        successUrl: '',\n        touchImageUrl: '',\n        authenticateData: {},\n\n        /**\n         * @inheritdoc\n         */\n        initConfig: function (config) {\n            this._super(config);\n            // eslint-disable-next-line no-undef\n            this.authenticateData.credentialRequestOptions.challenge = new Uint8Array(\n                this.authenticateData.credentialRequestOptions.challenge\n            );\n\n            this.authenticateData.credentialRequestOptions.allowCredentials =\n                this.authenticateData.credentialRequestOptions.allowCredentials.map(function (credential) {\n                    // eslint-disable-next-line no-undef\n                    credential.id = new Uint8Array(credential.id);\n\n                    return credential;\n                });\n\n            return this;\n        },\n\n        /**\n         * Start waiting loop\n         */\n        onAfterRender: function () {\n            this.waitForTouch();\n        },\n\n        /**\n         * Get touch image URL\n         * @returns {String}\n         */\n        getTouchImageUrl: function () {\n            return this.touchImageUrl;\n        },\n\n        /**\n         * Get POST URL\n         * @returns {String}\n         */\n        getPostUrl: function () {\n            return this.postUrl;\n        },\n\n        /**\n         * Get success URL\n         * @returns {String}\n         */\n        getSuccessUrl: function () {\n            return this.successUrl;\n        },\n\n        /**\n         * Wait for key touch\n         */\n        waitForTouch: function () {\n            this.idle(false);\n            navigator.credentials.get({\n                publicKey: this.authenticateData.credentialRequestOptions\n            })\n            .then(this._onCredentialSuccess.bind(this))\n            .catch(this._onCredentialError.bind(this));\n        },\n\n        /**\n         * Handle WebAuthn success\n         *\n         * @param {Object} credentialData\n         * @returns void\n         * @private\n         */\n        _onCredentialSuccess: function (credentialData) {\n            utils.asyncUint8ArrayToUtf8String(\n                // eslint-disable-next-line no-undef\n                new Uint8Array(credentialData.response.clientDataJSON),\n                function (clientDataJSON) {\n                    credentialData.clientDataUtf8JSON = clientDataJSON;\n                    credentialData.clientData = JSON.parse(clientDataJSON);\n                    this._processCredentialData(credentialData);\n                }.bind(this)\n            );\n        },\n\n        /**\n         * Validate and submit response from u2f key\n         *\n         * @param {Object} credentialData\n         * @private\n         */\n        _processCredentialData: function (credentialData) {\n            this.loading(true);\n            $.post(this.getPostUrl(), {\n                publicKeyCredential: {\n                    type: credentialData.type,\n                    id: utils.arrayBufferToBase64(credentialData.rawId),\n                    response: {\n                        authenticatorData: utils.arrayBufferToBase64(credentialData.response.authenticatorData),\n                        clientData: credentialData.clientData,\n                        clientDataJSON: credentialData.clientDataUtf8JSON,\n                        signature: utils.arrayBufferToBase64(credentialData.response.signature)\n                    }\n                }\n            })\n            .done(function (res) {\n                this.loading(false);\n\n                if (res.success) {\n                    this.currentStep('login');\n                    self.location.href = this.getSuccessUrl();\n                } else {\n                    error.display($t('Invalid key or key is not registered.'));\n                    this.idle(true);\n                }\n            }.bind(this))\n            .fail(function () {\n                error.display($t('Invalid key or key is not registered.'));\n                this.loading(false);\n                this.idle(true);\n            }.bind(this));\n        },\n\n        /**\n         * Handle WebAuthn failure\n         *\n         * @param {Object} u2fError\n         * @return void\n         * @private\n         */\n        _onCredentialError: function (u2fError) {\n            this.idle(true);\n\n            if (['AbortError', 'NS_ERROR_ABORT', 'NotAllowedError'].indexOf(u2fError.name) === -1) {\n                error.display($t('Unable to register your device'));\n            }\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/u2fkey/configure.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_TwoFactorAuth/js/error',\n    'Magento_TwoFactorAuth/js/u2fkey/utils',\n    'mage/translate'\n], function ($, ko, Component, error, utils, $t) {\n    'use strict';\n\n    return Component.extend({\n        currentStep: ko.observable('register'),\n\n        defaults: {\n            template: 'Magento_TwoFactorAuth/u2fkey/configure',\n            idle: ko.observable(true),\n            loading: ko.observable(false)\n        },\n\n        postUrl: '',\n        successUrl: '',\n        touchImageUrl: '',\n        registerData: {},\n\n        /**\n         * @inheritdoc\n         */\n        initConfig: function (config) {\n            this._super(config);\n            // eslint-disable-next-line no-undef\n            this.registerData.publicKey.challenge = new Uint8Array(this.registerData.publicKey.challenge);\n            // eslint-disable-next-line no-undef\n            this.registerData.publicKey.user.id = new Uint8Array(this.registerData.publicKey.user.id);\n\n            return this;\n        },\n\n        /**\n         * Start waiting loop\n         */\n        onAfterRender: function () {\n            this.waitForTouch();\n        },\n\n        /**\n         * Get touch image URL\n         *\n         * @returns {String}\n         */\n        getTouchImageUrl: function () {\n            return this.touchImageUrl;\n        },\n\n        /**\n         * Get POST URL\n         *\n         * @returns {String}\n         */\n        getPostUrl: function () {\n            return this.postUrl;\n        },\n\n        /**\n         * Get success URL\n         * @returns {String}\n         */\n        getSuccessUrl: function () {\n            return this.successUrl;\n        },\n\n        /**\n         * Wait for key touch\n         */\n        waitForTouch: function () {\n            this.idle(false);\n            navigator.credentials.create({\n                publicKey: this.registerData.publicKey\n            })\n            .then(this._onCredentialSuccess.bind(this))\n            .catch(this._onCredentialError.bind(this));\n        },\n\n        /**\n         * Handle WebAuthn success\n         *\n         * @param {Object} credentialData\n         * @returns void\n         * @private\n         */\n        _onCredentialSuccess: function (credentialData) {\n            utils.asyncUint8ArrayToUtf8String(\n                // eslint-disable-next-line no-undef\n                new Uint8Array(credentialData.response.clientDataJSON),\n                function (clientDataJSON) {\n                    credentialData.clientData = JSON.parse(clientDataJSON);\n                    this._processCredentialData(credentialData);\n                }.bind(this)\n            );\n        },\n\n        /**\n         * Validate and submit response from u2f key\n         *\n         * @param {Object} credentialData\n         * @private\n         */\n        _processCredentialData: function (credentialData) {\n            this.loading(true);\n            $.post(this.getPostUrl(), {\n                publicKeyCredential: {\n                    id: utils.arrayBufferToBase64(credentialData.rawId),\n                    response: {\n                        clientData: credentialData.clientData,\n                        attestationObject: utils.arrayBufferToBase64(\n                            credentialData.response.attestationObject\n                        )\n                    }\n                }\n            })\n            .done(function (res) {\n                this.loading(false);\n\n                if (res.success) {\n                    this.currentStep('login');\n                    self.location.href = this.getSuccessUrl();\n                } else {\n                    error.display($t('There was an error processing your key.'));\n                    this.idle(true);\n                }\n            }.bind(this))\n            .fail(function () {\n                error.display($t('Unable to register your device'));\n                this.loading(false);\n                this.idle(true);\n            }.bind(this));\n        },\n\n        /**\n         * Handle WebAuthn failure\n         *\n         * @param {Object} u2fError\n         * @return void\n         * @private\n         */\n        _onCredentialError: function (u2fError) {\n            this.idle(true);\n\n            if (['AbortError', 'NS_ERROR_ABORT', 'NotAllowedError'].indexOf(u2fError.name) === -1) {\n                error.display($t('Unable to register your device'));\n            }\n        }\n    });\n});\n","Magento_TwoFactorAuth/js/u2fkey/utils.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    return {\n        /**\n         * Constructor\n         *\n         * @returns {self}\n         * @constructor\n         */\n        'Magento_TwoFactorAuth/js/u2fkey/utils': function () {\n            return this;\n        },\n\n        /**\n         * Convert an array buffer to base64\n         *\n         * @param {ArrayBuffer} buffer\n         * @returns {String}\n         * @private\n         */\n        arrayBufferToBase64: function (buffer) {\n            var binary = '',\n                // eslint-disable-next-line no-undef\n                bytes = new Uint8Array(buffer),\n                len = bytes.byteLength,\n                i = 0;\n\n            for (i = 0; i < len; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n\n            return window.btoa(binary)\n                .replace(/\\-/g, '+')\n                .replace(/_/g, '/');\n        },\n\n        /**\n         * Convert a Uint8Array to a UTF-8 string using cross-browser safe methods\n         *\n         * @param {Uint8Array} uint8array\n         * @param {Function} callback\n         * @private\n         */\n        asyncUint8ArrayToUtf8String: function (uint8array, callback) {\n            var blob = new Blob([uint8array]),\n                fileReader = new FileReader();\n\n            /**\n             * Handle loaded\n             *\n             * @param {Event} e\n             */\n            fileReader.onload = function (e) {\n                callback(e.target.result);\n            };\n\n            fileReader.readAsText(blob);\n        }\n    };\n});\n","Magento_AdobeStockAdminUi/js/connection.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'ko',\n    'uiComponent',\n    'jquery'\n], function (ko, Component, $) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_AdobeStockAdminUi/connection',\n            connectionFailedMessage: 'Connection test failed.',\n            emptyApiKeyMessage: 'Please fill the \"API Key (Client ID)\" field for a connection test',\n            apiKeyInputId: 'system_adobe_stock_integration_api_key',\n            url: '',\n            success: false,\n            message: '',\n            visible: false\n        },\n\n        /**\n         * Init observable variables\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'success',\n                    'message',\n                    'visible'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * @override\n         */\n        initialize: function () {\n            this._super();\n            this.messageClass = ko.computed(function () {\n                return 'message-validation message message-' + (this.success() ? 'success' : 'error');\n            }, this);\n\n            if (!this.success()) {\n                this.showMessage(false, this.connectionFailedMessage);\n            }\n        },\n\n        /**\n         * @param {bool} success\n         * @param {String} message\n         */\n        showMessage: function (success, message) {\n            this.message(message);\n            this.success(success);\n            this.visible(true);\n        },\n\n        /**\n         * Send request to server to test connection to Adobe Stock API and display the result\n         */\n        testConnection: function () {\n            var apiKey = document.getElementById(this.apiKeyInputId).value;\n\n            if (apiKey.length === 0) {\n                this.showMessage(false, this.emptyApiKeyMessage);\n\n                return;\n            }\n\n            this.visible(false);\n\n            $.ajax({\n                type: 'POST',\n                url: this.url,\n                dataType: 'json',\n                data: {\n                    'api_key': apiKey\n                },\n                success: function (response) {\n                    this.showMessage(response.success === true, response.message);\n                }.bind(this),\n                error: function () {\n                    this.showMessage(false, this.connectionFailedMessage);\n                }.bind(this)\n            });\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/media-gallery.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global Base64 */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm'\n], function ($, confirm) {\n    'use strict';\n\n    return {\n        jsTreeRootFolderId: 'root',\n        jsTreeFolderNameMaxLength: 20,\n\n        /**\n         * Locate downloaded image in media browser\n         *\n         * @param {String} path\n         */\n        locate: function (path) {\n            var imageFolder = this.selectFolder(path),\n                imageFilename = path.substring(path.lastIndexOf('/') + 1),\n                locatedImage;\n\n            if (imageFolder.length) {\n                locatedImage = $('div[data-row=\"file\"]:has(img[alt=\\\"' + imageFilename + '\\\"])');\n\n                return locatedImage.length ? locatedImage : false;\n            }\n\n            $.ajaxSetup({\n                async: true\n            });\n        },\n\n        /**\n         * Select folder\n         *\n         * @param {String} path\n         */\n        selectFolder: function (path) {\n            var imageFolder,\n                pathId,\n                imagePath = path.replace(/^\\/+/, ''),\n                folderPathParts = imagePath.split('/').slice(0, -1);\n\n            $.ajaxSetup({\n                async: false\n            });\n\n            if (folderPathParts.length > 1) {\n                this.openFolderTree(folderPathParts);\n            }\n\n            pathId = Base64.idEncode(folderPathParts.join('/'));\n            imageFolder = $('.jstree li[data-id=\"' + pathId + '\"]').children('a');\n\n            if (!imageFolder.length) {\n                imageFolder = $('.jstree li[data-id=\"' + this.jsTreeRootFolderId + '\"]')\n                    .children('a');\n            }\n\n            if (imageFolder.length) {\n                imageFolder[0].click();\n            }\n\n            return imageFolder;\n        },\n\n        /**\n         * Show popup that image cannot be located\n         */\n        notLocated: function () {\n            confirm({\n                title: $.mage.__('The image cannot be located'),\n                content: $.mage.__('We cannot find this image in the media gallery.'),\n                buttons: [{\n                    text: $.mage.__('Ok'),\n                    class: 'action-primary',\n                    attr: {},\n\n                    /**\n                     * Close modal on button click\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                }]\n            });\n        },\n\n        /**\n         * Open folder Tree\n         *\n         * @param {Array} folderPathParts\n         */\n        openFolderTree: function (folderPathParts) {\n            var i,\n                pathId,\n                openFolderButton,\n                folderPath = '';\n\n            for (i = 0; i < folderPathParts.length - 1; i++) {\n                if (folderPath === '') {\n                    folderPath = folderPathParts[i];\n                } else {\n                    folderPath = folderPath + '/' + folderPathParts[i];\n                }\n                pathId = Base64.idEncode(folderPath);\n                openFolderButton = $('.jstree li[data-id=\"' + pathId + '\"].jstree-closed').children('.jstree-icon');\n\n                if (openFolderButton.length) {\n                    openFolderButton.click();\n                }\n            }\n        }\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/panel.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiElement',\n    'jquery',\n    'mage/translate'\n], function (Element, $, $t) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            containerId: '#adobe-stock-images-search-modal',\n            masonryComponentPath: 'adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns',\n            dataSourcePath: 'adobe_stock_images_listing.adobe_stock_images_listing_data_source',\n            modules: {\n                masonry: '${ $.masonryComponentPath }',\n                source: '${ $.dataSourcePath }'\n            }\n        },\n\n        /**\n         * Init component\n         *\n         * @return {exports}\n         */\n        initialize: function () {\n            this._super();\n\n            $(this.containerId).modal({\n                type: 'slide',\n                buttons: [],\n                modalClass: 'adobe-stock-modal',\n                title: $t('Adobe Stock')\n            }).on('openModal', function () {\n                this.masonry().setLayoutStylesWhenLoaded();\n            }.bind(this));\n\n            try {\n                $(this.containerId).applyBindings();\n            } catch (e) {\n                //already bounded\n            }\n\n            $(window).on('fileDeleted.mediabrowser', this.reloadGrid.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Update listing data\n         */\n        reloadGrid: function () {\n            this.source().set('params.t', Date.now());\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/path-utility.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([], function () {\n    'use strict';\n\n    return {\n        /**\n         * Extracts image name from its path\n         *\n         * @param {String} path\n         * @returns {String}\n         */\n        getImageNameFromPath: function (path) {\n            var filePathArray = path.split('/'),\n                imageIndex = filePathArray.length - 1;\n\n            return filePathArray[imageIndex].substring(0, filePathArray[imageIndex].lastIndexOf('.'));\n        },\n\n        /**\n         * Generate meaningful name image file,\n         * allow only alphanumerics, dashes, and underscores\n         *\n         * @param {String} title\n         * @param {Number} id\n         * @return string\n         */\n        generateImageName: function (title, id) {\n            var fileName = title.substring(0, 32)\n                .replace(/[^a-zA-Z0-9_]/g, '-')\n                .replace(/-{2,}/g, '-')\n                .toLowerCase();\n\n            /* If the filename does not contain latin chars, use ID as a filename */\n            return fileName === '-' ? id : fileName;\n        },\n\n        /**\n         * Get image file extension\n         *\n         * @param {String} contentType\n         * @return string\n         */\n        getImageExtension: function (contentType) {\n            return contentType.match(/[^/]{1,4}$/);\n        },\n\n        /**\n         * Create path\n         *\n         * @param {String} directoryPath\n         * @param {String} fileName\n         * @param {String} contentType\n         * @returns {String}\n         */\n        buildPath: function (directoryPath, fileName, contentType) {\n            return directoryPath + '/' + fileName + '.' + this.getImageExtension(contentType);\n        }\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/signIn.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_AdobeIms/js/signIn',\n    'Magento_AdobeIms/js/action/authorization',\n    'Magento_Ui/js/modal/confirm'\n], function ($, signIn, auth, confirm) {\n    'use strict';\n\n    return signIn.extend({\n\n        defaults: {\n            userQuota: {},\n            // eslint-disable-next-line max-len\n            dataProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing_data_source, ns = adobe_stock_images_listing',\n            // eslint-disable-next-line max-len\n            previewProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns.preview, ns = adobe_stock_images_listing',\n            quotaUrl: 'adobe_stock/license/quota',\n            modules: {\n                source: '${ $.dataProvider }',\n                preview: '${ $.previewProvider }'\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            this._super().observe(['userQuota']);\n\n            return this;\n        },\n\n        /**\n         * Login to Adobe\n         *\n         * @return {*}\n         */\n        login: function () {\n            var deferred = $.Deferred();\n\n            if (this.user().isAuthorized) {\n                return deferred.resolve();\n            }\n            auth(this.loginConfig)\n                .then(function (response) {\n                    this.loadUserProfile();\n                    deferred.resolve(response);\n                }.bind(this))\n                .fail(function (error) {\n                    deferred.reject(error);\n                });\n\n            return deferred.promise();\n        },\n\n        /**\n         * Login action with popup on error..\n         */\n        loginClick: function () {\n            this.login().fail(function (error) {\n                this.showLoginErrorPopup(error);\n            }.bind(this));\n        },\n\n        /**\n         * Show popup that user failed to login.\n         */\n        showLoginErrorPopup: function (error) {\n            confirm({\n                title: $.mage.__('Couldn\\'t log you in'),\n                content: error,\n                buttons: [{\n                    text: $.mage.__('Ok'),\n                    class: 'action-primary action-accept'\n                }],\n                actions: {\n\n                    /**\n                       * Close modal\n                       */\n                    confirm: function (event) {\n                        this.closeModal(event);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Logout from adobe account\n         */\n        logout: function () {\n            $.ajax({\n                type: 'POST',\n                url: this.logoutUrl,\n                data: {\n                    'form_key': window.FORM_KEY\n                },\n                dataType: 'json',\n                context: this,\n                showLoader: true,\n                success: function () {\n                    this.user({\n                        isAuthorized: false,\n                        name: '',\n                        email: '',\n                        image: this.defaultProfileImage\n                    });\n                }.bind(this),\n\n                /**\n                 * @param {Object} response\n                 * @returns {String}\n                 */\n                error: function (response) {\n                    return response.message;\n                }\n            });\n        },\n\n        /**\n         * Retrieves full user quota.\n         */\n        getUserQuota: function () {\n            $.ajax({\n                type: 'GET',\n                url: this.quotaUrl,\n                dataType: 'json',\n                context: this,\n\n                /**\n                 * @param {Object} response\n                 * @returns void\n                 */\n                success: function (response) {\n                    this.userQuota(response.result);\n                },\n\n                /**\n                 * @param {Object} response\n                 * @returns {String}\n                 */\n                error: function (response) {\n                    return response.message;\n                }\n            });\n        },\n\n        /**\n         * @inheritdoc\n         */\n        loadUserProfile: function () {\n            $.ajax({\n                type: 'GET',\n                url: this.profileUrl,\n                dataType: 'json',\n                context: this,\n\n                /**\n                 * @param {Object} response\n                 * @returns void\n                 */\n                success: function (response) {\n                    this.user({\n                        isAuthorized: true,\n                        name: response.result.name,\n                        email: response.result.email,\n                        image: response.result.image\n                    });\n                    this.getUserQuota();\n                },\n\n                /**\n                 * @param {Object} response\n                 * @returns {String}\n                 */\n                error: function (response) {\n                    return response.message;\n                }\n            });\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/action/confirmQuota.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return function (requestUrl, adobeAssetId) {\n        var deferred = $.Deferred();\n\n        $.ajax({\n            type: 'GET',\n            url: requestUrl,\n            dataType: 'json',\n            data: {\n                'media_id': adobeAssetId\n            },\n            showLoader: true,\n\n            /**\n             * Extract the data from the response and resolve\n             *\n             * @param {Object} response\n             */\n            success: function (response) {\n                deferred.resolve({\n                    canLicense: response.result.canLicense,\n                    message: response.result.message\n                });\n            },\n\n            /**\n             * Extract the error message and reject\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n                var message = response.JSON ? response.JSON.message\n                    : $.mage.__('Could not fetch licensing information.');\n\n                if (response.status === 403) {\n                    message = $.mage.__('Your admin role does not have permissions to license an image');\n                }\n\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/action/getLicenseStatus.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return function (requestUrl, ids) {\n        var deferred = $.Deferred();\n\n        $.ajax({\n            type: 'GET',\n            url: requestUrl + '?ids=' + ids.join(','),\n            data: {\n                'form_key': window.FORM_KEY\n            },\n            showLoader: true,\n            dataType: 'json',\n\n            /**\n             * Resolve with the response result\n             *\n             * @param {Object} response\n             */\n            success: function (response) {\n                deferred.resolve(response.result);\n            },\n\n            /**\n             * Reject with the message from response\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n                var message = response.message;\n\n                if (response.status === 403) {\n                    message = $.mage.__('Your admin role does not have permissions to license an image');\n                }\n\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/action/licenseAndSave.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_AdobeStockImageAdminUi/js/action/save',\n    'Magento_AdobeStockImageAdminUi/js/confirmation/license',\n    'Magento_AdobeStockImageAdminUi/js/path-utility'\n], function ($, saveAction, licenseConfirmation, pathUtility) {\n    'use strict';\n\n    return function (\n        requestUrl,\n        id,\n        title,\n        path,\n        contentType,\n        isDownloaded,\n        quotaMessage,\n        directoryPath\n    ) {\n        var deferred = $.Deferred(),\n            destinationPath;\n\n        licenseConfirmation(\n                title,\n                quotaMessage,\n                isDownloaded,\n                pathUtility.generateImageName(title, id),\n                pathUtility.getImageExtension(contentType)\n            ).then(function (fileName) {\n\n                if (typeof fileName === 'undefined') {\n                    fileName = pathUtility.getImageNameFromPath(path);\n                }\n\n                destinationPath = pathUtility.buildPath(directoryPath, fileName, contentType);\n\n                saveAction(\n                    requestUrl,\n                    id,\n                    destinationPath\n                ).then(function () {\n                    deferred.resolve(destinationPath);\n                }).fail(function (message) {\n                    deferred.reject(message);\n                });\n            }).fail(function (error) {\n                deferred.reject(error);\n            });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/action/save.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return function (requestUrl, adobeAssetId, destinationPath) {\n        var deferred = $.Deferred();\n\n        $.ajax({\n            type: 'POST',\n            url: requestUrl,\n            dataType: 'json',\n            showLoader: true,\n            data: {\n                'media_id': adobeAssetId,\n                'destination_path': destinationPath\n            },\n\n            /**\n             * Resolve on success\n             */\n            success: function () {\n                deferred.resolve();\n            },\n\n            /**\n             * Extract the error message and reject\n             *\n             * @param {Object} response\n             */\n            error: function (response) {\n                var message;\n\n                if (typeof response.responseJSON === 'undefined' ||\n                    typeof response.responseJSON.message === 'undefined'\n                ) {\n                    message = 'Could not save the asset!';\n                } else {\n                    message = response.responseJSON.message;\n                }\n                deferred.reject(message);\n            }\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/action/saveLicensed.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_AdobeStockImageAdminUi/js/action/save',\n    'Magento_AdobeStockImageAdminUi/js/confirmation/saveLicensed',\n    'Magento_AdobeStockImageAdminUi/js/path-utility'\n], function ($, saveAction, saveLicensedConfirmation, pathUtility) {\n    'use strict';\n\n    return function (requestUrl, id, title, path, contentType, directoryPath) {\n        var imageName = '',\n            destinationPath,\n            deferred = $.Deferred();\n\n        if (path !== '') {\n            imageName = pathUtility.getImageNameFromPath(path);\n            destinationPath = pathUtility.buildPath(directoryPath, imageName, contentType);\n            saveAction(\n                requestUrl,\n                id,\n                destinationPath\n            ).then(function () {\n                deferred.resolve(destinationPath);\n            }).fail(function (message) {\n                deferred.reject(message);\n            });\n\n            return deferred.promise();\n        }\n\n        saveLicensedConfirmation(\n            pathUtility.generateImageName(title, id),\n            pathUtility.getImageExtension(contentType)\n        ).then(function (fileName) {\n            destinationPath = pathUtility.buildPath(directoryPath, fileName, contentType);\n            saveAction(\n                requestUrl,\n                id,\n                destinationPath\n            ).then(function () {\n                deferred.resolve(destinationPath);\n            }).fail(function (message) {\n                deferred.reject(message);\n            });\n        }).fail(function (error) {\n            deferred.reject(error);\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/action/savePreview.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_AdobeStockImageAdminUi/js/action/save',\n    'Magento_AdobeStockImageAdminUi/js/confirmation/save',\n    'Magento_AdobeStockImageAdminUi/js/path-utility'\n], function ($, saveAction, saveConfirmation, pathUtility) {\n    'use strict';\n\n    return function (requestUrl, id, title, contentType, directoryPath) {\n        var deferred = $.Deferred(),\n            destinationPath;\n\n        saveConfirmation(\n            pathUtility.generateImageName(title, id),\n            pathUtility.getImageExtension(contentType)\n        ).then(function (fileName) {\n            destinationPath = pathUtility.buildPath(directoryPath, fileName, contentType);\n\n            saveAction(\n                requestUrl,\n                id,\n                destinationPath\n            ).then(function () {\n                deferred.resolve(destinationPath);\n            }).fail(function (error) {\n                deferred.reject(error);\n            });\n        }).fail(function (error) {\n            deferred.reject(error);\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/components/images-grid-sizes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/paging/sizes',\n    'underscore'\n], function (Sizes, _) {\n    'use strict';\n\n    return Sizes.extend({\n        defaults: {\n            value: 32,\n            minSize: 1,\n            maxSize: 64\n        },\n\n        exports: {\n            value: '${ $.provider }:params.paging.page',\n            options: '${ $.provider }:params.paging.options'\n        },\n\n        sizes: {\n            '32': {\n                value: 32,\n                label: 32\n            },\n            '48': {\n                value: 48,\n                label: 48\n            },\n            '64': {\n                value: 64,\n                label: 64\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        updateArray: function () {\n            if (_.isUndefined(this.options)) {\n                this.options = this.sizes;\n            }\n\n            return this._super();\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/image-preview.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'uiLayout',\n    'Magento_Ui/js/grid/columns/image-preview'\n], function ($, layout, imagePreview) {\n    'use strict';\n\n    return imagePreview.extend({\n        defaults: {\n            downloadImagePreviewUrl: 'adobe_stock/preview/download',\n            licenseAndDownloadUrl: 'adobe_stock/license/license',\n            saveLicensedAndDownloadUrl: 'adobe_stock/license/saveLicensed',\n            confirmationUrl: 'adobe_stock/license/confirmation',\n            relatedImagesUrl: 'adobe_stock/preview/relatedimages',\n            buyCreditsUrl: 'https://stock.adobe.com/',\n            mediaGallerySelector: '.media-gallery-modal:has(#search_adobe_stock)',\n            adobeStockModalSelector: '.adobe-search-images-modal',\n            activeMediaGallerySelector: 'aside.modal-slide.adobe-stock-modal._show',\n            modules: {\n                keywords: '${ $.name }_keywords',\n                related: '${ $.name }_related',\n                actions: '${ $.name }_actions'\n            },\n            viewConfig: [\n                {\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/keywords',\n                    name: '${ $.name }_keywords'\n                },\n                {\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/related',\n                    name: '${ $.name }_related'\n                },\n                {\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/actions',\n                    name: '${ $.name }_actions',\n                    provider: '${ $.provider }',\n                    mediaGallery: '${ $.mediaGalleryComponent }',\n                    mediaGalleryName: '${ $.mediaGalleryName }',\n                    mediaGalleryProvider: '${ $.mediaGalleryProvider }',\n                    mediaGallerySortBy: '${ $.mediaGallerySortBy }',\n                    mediaGallerySearchInput: '${ $.mediaGallerySearchInput }',\n                    mediaGalleryListingFilters: '${ $.mediaGalleryListingFilters }',\n                    getMediaGalleryAsset: '${ $.getMediaGalleryAsset }',\n                    imageEditDetailsUrl: '${ $.imageEditDetailsUrl }',\n                    listingPaging: '${ $.listingPaging }'\n                }\n            ],\n            listens: {\n                '${ $.sortByComponentName }:applied': 'hide'\n            }\n        },\n\n        /**\n         * Initialize the component\n         *\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super().initView();\n            $(window).on('fileDeleted.enhancedMediaGallery', this.reloadAdobeGrid.bind(this));\n            $(window).on('folderDeleted.enhancedMediaGallery', this.reloadAdobeGrid.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Initialize child components\n         *\n         * @returns {Object}\n         */\n        initView: function () {\n            layout(this.viewConfig);\n\n            return this;\n        },\n\n        /**\n         * Get previous button disabled\n         *\n         * @param {Object} record\n         *\n         * @return {Boolean}\n         */\n        cannotViewPrevious: function (record) {\n            return this.related().cannotViewPrevious(record);\n        },\n\n        /**\n         * Get next button disabled\n         *\n         * @param {Object} record\n         *\n         * @return {Boolean}\n         */\n        cannotViewNext: function (record) {\n            return this.related().cannotViewNext(record);\n        },\n\n        /**\n         * Return active adobe gallery selector.\n         */\n        getAdobeModal: function () {\n            return $(this.activeMediaGallerySelector).find(this.adobeStockModalSelector);\n        },\n\n        /**\n         * @inheritdoc\n         */\n        next: function (record) {\n            if (this.related().selectedTab()) {\n                this.related().nextRelated(record);\n\n                return;\n            }\n            this.keywords().hideAllKeywords();\n            this._super(record);\n        },\n\n        /**\n         * @inheritdoc\n         */\n        prev: function (record) {\n            if (this.related().selectedTab()) {\n                this.related().prevRelated(record);\n\n                return;\n            }\n            this.keywords().hideAllKeywords();\n            this._super(record);\n        },\n\n        /**\n         * @inheritdoc\n         */\n        show: function (record) {\n            this.related().selectedTab(null);\n            this.keywords().hideAllKeywords();\n            this.displayedRecord(record);\n            this._super(record);\n            this.related().loadRelatedImages(record);\n        },\n\n        /**\n         * Show related image data in the preview section\n         *\n         * @param {Object} record\n         */\n        showRelated: function (record) {\n            this.keywords().hideAllKeywords();\n            this.displayedRecord(record);\n            this.updateHeight();\n        },\n\n        /**\n         * Returns attributes to display under the preview image\n         *\n         * @returns {*[]}\n         */\n        getDisplayAttributes: function () {\n            if (!this.displayedRecord()) {\n                return [];\n            }\n\n            return [\n                {\n                    name: 'Dimensions',\n                    value: this.displayedRecord().width + ' x ' + this.displayedRecord().height + ' px'\n                },\n                {\n                    name: 'File type',\n                    value: this.displayedRecord()['content_type'].toUpperCase()\n                },\n                {\n                    name: 'Category',\n                    value: this.displayedRecord().category.name || 'None'\n                },\n                {\n                    name: 'File #',\n                    value: this.displayedRecord().id\n                }\n            ];\n        },\n\n        /**\n         * Reload Adobe grid after deleting image\n         */\n        reloadAdobeGrid: function () {\n            this.actions().source().reload({\n                refresh: true\n            });\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/overlay.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/grid/columns/overlay',\n    'Magento_AdobeStockImageAdminUi/js/action/getLicenseStatus'\n], function ($, _, overlay, getLicenseStatus) {\n    'use strict';\n\n    return overlay.extend({\n        defaults: {\n            // eslint-disable-next-line max-len\n            provider: 'name = adobe_stock_images_listing.adobe_stock_images_listing_data_source, ns = adobe_stock_images_listing',\n            loginProvider: 'name = adobe-login, ns = adobe-login',\n            getImagesUrl: 'adobe_stock/license/getlist',\n            licensed: {},\n            modules: {\n                login: '${ $.loginProvider }'\n            },\n            listens: {\n                '${ $.provider }:data.items': 'handleItemsUpdate',\n                '${ $.loginProvider }:user': 'handleUserUpdate'\n            },\n            imports: {\n                rows: '${ $.provider }:data.items'\n            }\n        },\n\n        /**\n         * Init observable variables\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'licensed'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Updates the licensed data when items data is updated.\n         *\n         * @param {Array} items\n         */\n        handleItemsUpdate: function (items) {\n            var ids = this.getIds(items);\n\n            this.updateLicensed(ids);\n        },\n\n        /**\n         * Updates the licensed data when user data is updated.\n         */\n        handleUserUpdate: function () {\n            var ids = this.getIds(this.rows);\n\n            this.updateLicensed(ids);\n        },\n\n        /**\n         * Set Licensed images data.\n         *\n         * @param {Array} ids\n         */\n        updateLicensed: function (ids) {\n            if (!this.isUserAuthorized() || ids.length === 0) {\n                this.licensed({});\n\n                return;\n            }\n\n            getLicenseStatus(this.getImagesUrl, ids).then(function (licensed) {\n                this.licensed(licensed);\n            }.bind(this));\n        },\n\n        /**\n         * Checks if user is logged in and authorized\n         *\n         * @returns {Boolean}\n         */\n        isUserAuthorized: function () {\n            return !_.isUndefined(this.login()) && this.login().user().isAuthorized;\n        },\n\n        /**\n         * Get all ids from items array\n         *\n         * @param {Array} items\n         * @returns {Number[]}\n         */\n        getIds: function (items) {\n            var ids = [];\n\n            items.forEach(function (record) {\n                ids.push(record.id);\n            });\n\n            return ids;\n        },\n\n        /**\n         * Returns top displacement of overlay according to image height\n         *\n         * @param {Object} record - Data to be preprocessed.\n         * @returns {Object}\n         */\n        getStyles: function (record) {\n            var height = record.styles().height.replace('px', '') - 40;\n\n            return {\n                top: height + 'px'\n            };\n        },\n\n        /**\n         * If overlay should be visible\n         *\n         * @param {Object} row\n         * @returns {Boolean}\n         */\n        isVisible: function (row) {\n            return this.licensed()[row.id];\n        },\n\n        /**\n         * Get overlay label\n         *\n         * @param {Object} row\n         * @returns {String}\n         */\n        getLabel: function (row) {\n            return this.licensed()[row.id] ? 'Licensed' : '';\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiComponent',\n    'uiRegistry',\n    'jquery',\n    'underscore',\n    'Magento_AdobeStockImageAdminUi/js/action/save',\n    'Magento_AdobeStockImageAdminUi/js/action/savePreview',\n    'Magento_AdobeStockImageAdminUi/js/action/saveLicensed',\n    'Magento_AdobeStockImageAdminUi/js/action/licenseAndSave',\n    'Magento_AdobeStockImageAdminUi/js/action/confirmQuota',\n    'Magento_AdobeStockImageAdminUi/js/media-gallery',\n    'Magento_AdobeStockImageAdminUi/js/confirmation/buyCredits',\n    'Magento_AdobeStockImageAdminUi/js/action/getLicenseStatus',\n    'Magento_Ui/js/modal/alert'\n], function (\n    Component,\n    uiRegistry,\n    $,\n    _,\n    saveAction,\n    savePreviewAction,\n    saveLicensedAction,\n    licenseAndSaveAction,\n    confirmQuotaAction,\n    mediaGallery,\n    buyCreditsConfirmation,\n    getLicenseStatus,\n    uiAlert\n) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/actions',\n            loginProvider: 'name = adobe-login, ns = adobe-login',\n            mediaGallerySelector: '.media-gallery-modal:has(#search_adobe_stock)',\n            adobeStockModalSelector: '.adobe-search-images-modal',\n            downloadImagePreviewUrl: 'adobe_stock/preview/download',\n            licenseAndDownloadUrl: 'adobe_stock/license/license',\n            saveLicensedAndDownloadUrl: 'adobe_stock/license/saveLicensed',\n            buyCreditsUrl: 'https://stock.adobe.com/',\n            messageDelay: 5,\n            mediaGallery: '',\n            imageItems: [],\n            messages: [],\n            listens: {\n                '${ $.provider }:data.items': 'updateActions'\n            },\n            modules: {\n                login: '${ $.loginProvider }',\n                preview: '${ $.parentName }.preview',\n                overlay: '${ $.parentName }.overlay',\n                source: '${ $.provider }',\n                imageDirectory: '${ $.mediaGalleryName }',\n                mediaGallerySortBy: '${ $.mediaGallerySortBy }',\n                mediaGallerySearchInput: '${ $.mediaGallerySearchInput }',\n                mediaGalleryListingFilters: '${ $.mediaGalleryListingFilters }',\n                listingPaging: '${ $.listingPaging }'\n            },\n            imports: {\n                imageItems: '${ $.mediaGalleryProvider }:data.items'\n            }\n        },\n\n        /**\n         * Init observable variables\n         *\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'imageItems',\n                    'messages'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Update displayed record data on data source update\n         */\n        updateActions: function () {\n            var displayedRecord = this.preview().displayedRecord(),\n                updatedDisplayedRecord = this.preview().displayedRecord(),\n                records = this.source().data.items,\n                index;\n\n            if (typeof displayedRecord.id === 'undefined') {\n                return;\n            }\n\n            for (index = 0; index < records.length; index++) {\n                if (records[index].id === displayedRecord.id) {\n                    updatedDisplayedRecord = records[index];\n                    break;\n                }\n            }\n\n            this.preview().displayedRecord(updatedDisplayedRecord);\n        },\n\n        /**\n         * Returns is_downloaded flag as observable for given record\n         *\n         * @returns {observable}\n         */\n        isDownloaded: function () {\n            return this.preview().displayedRecord()['is_downloaded'];\n        },\n\n        /**\n         * Is asset licensed in adobe stock in context of currently logged in account\n         *\n         * @returns {observable}\n         */\n        isLicensed: function () {\n            return this.overlay().licensed()[this.preview().displayedRecord().id] && !this.isLicensedLocally();\n        },\n\n        /**\n         * Is licensed version of asset saved locally\n         *\n         * @returns {observable}\n         */\n        isLicensedLocally: function () {\n            return this.preview().displayedRecord()['is_licensed_locally'];\n        },\n\n        /**\n         * Locate downloaded image in media browser\n         */\n        openInMediaGalleryClick: function () {\n            this.preview().getAdobeModal().trigger('closeModal');\n\n            if (!this.isMediaBrowser()) {\n                this.selectImageInNewMediaGalleryBySearch(this.preview().displayedRecord().id);\n            } else {\n                this.selectDisplayedImageForOldMediaGallery(this.preview().displayedRecord().path);\n            }\n        },\n\n        /**\n         * Return adobe stock asset by adobe id\n         *\n         * @param {String} adobeId\n         */\n        getAssetDetails: function (adobeId) {\n            return $.ajax({\n                url: this.getMediaGalleryAsset,\n                data: {\n                    'adobe_id': adobeId\n                },\n                context: this,\n                showLoader: true\n            });\n        },\n\n        /**\n         * Select image in new media gallery via search input\n         *\n         * @param {String} imageId\n         */\n        selectImageInNewMediaGalleryBySearch: function (imageId) {\n            var path;\n\n            this.mediaGalleryListingFilters().clear();\n            this.getAssetDetails(imageId).then(function (assetDetails) {\n                if (assetDetails.length === 0) {\n                    return;\n                }\n                this.mediaGallerySearchInput().apply(assetDetails.title);\n                path = assetDetails.path;\n                path = path.substring(0, path.lastIndexOf('/'));\n\n                if (path !== '') {\n                    this.imageDirectory().locateNode(path);\n                }\n                this.selectRecordFromMediaGalleryProvider(assetDetails.path);\n            }.bind(this));\n\n        },\n\n        /**\n         * Open recently saved image and go to first page\n         */\n        openNewestImage: function () {\n            this.listingPaging().goFirst();\n            this.mediaGallerySortBy().selectDefaultOption();\n        },\n\n        /**\n         * Selects displayed image in media gallery for old gallery\n         */\n        selectDisplayedImageForOldMediaGallery: function (path) {\n            var image = mediaGallery.locate(path);\n\n            image ? image.trigger('click') : mediaGallery.notLocated();\n        },\n\n        /**\n         * Select record by image file name\n         *\n         * @param {String} path\n         */\n        selectRecordFromMediaGalleryProvider: function (path) {\n            var subscription;\n\n            subscription = this.imageItems.subscribe(function (items) {\n                subscription.dispose();\n                items.each(function (item) {\n                    if (item.path === path) {\n                        this.selectRecord(item);\n\n                        return false;\n                    }\n                }.bind(this));\n            }.bind(this));\n\n            setTimeout(function () {\n                subscription.dispose();\n            }, 1500);\n        },\n\n        /**\n         * Set the record as selected\n         *\n         * @param {Object} record\n         */\n        selectRecord: function (record) {\n            uiRegistry.get('name =' + this.mediaGallery).select(record);\n        },\n\n        /**\n         * Save preview click handler\n         */\n        savePreviewClick: function () {\n            var record = this.preview().displayedRecord();\n\n            savePreviewAction(\n                this.preview().downloadImagePreviewUrl,\n                record.id,\n                record.title,\n                record['content_type'],\n                this.getDestinationDirectoryPath()\n            ).then(function (destinationPath) {\n                this.updateDownloadedDisplayedRecord(destinationPath);\n                this.reloadGrid().done(function () {\n                    this.openInMediaGalleryClick();\n                }.bind(this));\n            }.bind(this)).fail(function (error) {\n                if (error) {\n                    this.showErrorMessage(error);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Update displayed record after downloading\n         *\n         * @param {String} path\n         */\n        updateDownloadedDisplayedRecord: function (path) {\n            var record = this.preview().displayedRecord();\n\n            record['is_downloaded'] = 1;\n\n            if (record.path === '') {\n                record.path = path;\n            }\n\n            this.preview().displayedRecord(record);\n        },\n\n        /**\n         * Update displayed record after licensing\n         *\n         * @param {String} path\n         */\n        updateLicensedDisplayedRecord: function (path) {\n            var record = this.preview().displayedRecord();\n\n            record['is_downloaded'] = 1;\n\n            if (record.path === '') {\n                record.path = path;\n            }\n\n            record['is_licensed'] = 1;\n            record['is_licensed_locally'] = 1;\n\n            this.preview().displayedRecord(record);\n        },\n\n        /**\n         * Get image destination path\n         *\n         * @param {String} fileName\n         * @param {String} contentType\n         * @returns {String}\n         */\n        getDestinationPath: function (fileName, contentType) {\n            return this.getDestinationDirectoryPath() + '/' + fileName + '.' + this.getImageExtension(contentType);\n        },\n\n        /**\n         * Get destination directory path\n         *\n         * @returns {String}\n         */\n        getDestinationDirectoryPath: function () {\n            var activeNodePath,\n                activeNode;\n\n            if (this.isMediaBrowser()) {\n                activeNode = this.getMageMediaBrowserData().activeNode;\n\n                activeNodePath = _.isUndefined(activeNode.original.path) ? '' : activeNode.original.path;\n            } else {\n                activeNodePath = this.imageDirectory().activeNode() || '';\n            }\n\n            return activeNodePath;\n        },\n\n        /**\n         * Reload grid\n         *\n         * @returns {*}\n         */\n        reloadGrid: function () {\n            var provider,\n                dataStorage;\n\n            if (this.isMediaBrowser()) {\n                return this.getMageMediaBrowserData().reload();\n            }\n\n            provider = uiRegistry.get('index = media_gallery_listing_data_source'),\n                dataStorage = provider.storage();\n\n            dataStorage.clearRequests();\n\n            return provider.reload();\n        },\n\n        /**\n         * Get data for media browser\n         *\n         * @returns {Undefined|Object}\n         */\n        getMageMediaBrowserData: function () {\n            return $(this.preview().mediaGallerySelector).data('mageMediabrowser');\n        },\n\n        /**\n         * Is the media browser used in the content of the grid\n         *\n         * @returns {Boolean}\n         */\n        isMediaBrowser: function () {\n            return typeof this.getMageMediaBrowserData() !== 'undefined';\n        },\n\n        /**\n         * Generate meaningful name image file,\n         * allow only alphanumerics, dashes, and underscores\n         *\n         * @param {String} title\n         * @param {Number} id\n         * @return string\n         */\n        generateImageName: function (title, id) {\n            var fileName = title.substring(0, 32)\n                .replace(/[^a-zA-Z0-9_]/g, '-')\n                .replace(/-{2,}/g, '-')\n                .toLowerCase();\n\n            /* If the filename does not contain latin chars, use ID as a filename */\n            return fileName === '-' ? id : fileName;\n        },\n\n        /**\n         * Get image file extension\n         *\n         * @param {String} contentType\n         * @return string\n         */\n        getImageExtension: function (contentType) {\n            return contentType.match(/[^/]{1,4}$/);\n        },\n\n        /**\n         * Get messages\n         *\n         * @return {Array}\n         */\n        getMessages: function () {\n            return this.messages();\n        },\n\n        /**\n         * License click handler\n         */\n        licenseClick: function () {\n            var record = this.preview().displayedRecord();\n\n            this.licenseProcess(\n                record.id,\n                record.title,\n                record.path,\n                record['content_type'],\n                this.isDownloaded()\n            ).then(function (destinationPath) {\n                this.updateLicensedDisplayedRecord(destinationPath);\n                this.login().getUserQuota();\n                this.reloadGrid().done(function () {\n                    this.openInMediaGalleryClick();\n                }.bind(this));\n            }.bind(this)).fail(function (error) {\n                if (error) {\n                    uiAlert({\n                        content: error\n                    });\n                }\n            });\n        },\n\n        /**\n         * Process of license\n         *\n         * @param {Number} id\n         * @param {String} title\n         * @param {String} path\n         * @param {String} contentType\n         * @param {Boolean} isDownloaded\n         * @return {window.Promise}\n         */\n        licenseProcess: function (id, title, path, contentType, isDownloaded) {\n            var deferred = $.Deferred();\n\n            this.login().login()\n                .then(function () {\n                    getLicenseStatus(\n                        this.overlay().getImagesUrl,\n                        [id]\n                    ).then(function (licensedInfo) {\n                        var isLicensed = licensedInfo[id] || false;\n\n                        if (isLicensed) {\n                            saveLicensedAction(\n                                this.preview().saveLicensedAndDownloadUrl,\n                                id,\n                                title,\n                                path,\n                                contentType,\n                                this.getDestinationDirectoryPath()\n                            ).then(function (destinationPath) {\n                                deferred.resolve(destinationPath);\n                            }).fail(function (error) {\n                                deferred.reject(error);\n                            });\n                        } else {\n                            confirmQuotaAction(this.preview().confirmationUrl, id).then(function (data) {\n                                if (data.canLicense === false) {\n                                    buyCreditsConfirmation(\n                                        this.preview().buyCreditsUrl,\n                                        title,\n                                        data.message\n                                    );\n                                } else {\n                                    licenseAndSaveAction(\n                                        this.preview().licenseAndDownloadUrl,\n                                        id,\n                                        title,\n                                        path,\n                                        contentType,\n                                        isDownloaded,\n                                        data.message,\n                                        this.getDestinationDirectoryPath()\n                                    ).then(function (destinationPath) {\n                                        deferred.resolve(destinationPath);\n                                    }).fail(function (error) {\n                                        deferred.reject(error);\n                                    });\n                                }\n                            }.bind(this)).fail(function (error) {\n                                deferred.reject(error);\n                            });\n                        }\n                    }.bind(this)).fail(function (error) {\n                        deferred.reject(error);\n                    });\n                }.bind(this)).fail(function (error) {\n                deferred.reject(error);\n            });\n\n            return deferred.promise();\n        },\n\n        /**\n         * Save licensed click handler\n         */\n        saveLicensedClick: function () {\n            var record = this.preview().displayedRecord();\n\n            if (!this.login().user().isAuthorized) {\n                return;\n            }\n\n            if (!this.isLicensed()) {\n                return;\n            }\n\n            saveLicensedAction(\n                this.preview().saveLicensedAndDownloadUrl,\n                record.id,\n                record.title,\n                record.path,\n                record['content_type'],\n                this.getDestinationDirectoryPath()\n            ).then(function (destinationPath) {\n                this.updateLicensedDisplayedRecord(destinationPath);\n                this.login().getUserQuota();\n                this.reloadGrid().done(function () {\n                    this.openInMediaGalleryClick();\n                }.bind(this));\n            }.bind(this)).fail(function (error) {\n                if (error) {\n                    uiAlert({\n                        content: error\n                    });\n                }\n            });\n        },\n\n        /**\n         * Returns license button title depending on the existing saved preview\n         *\n         * @returns {String}\n         */\n        getLicenseButtonTitle: function () {\n            return this.isDownloaded() ? $.mage.__('License') : $.mage.__('License and Save');\n        },\n\n        /**\n         * Extracts image name from its path\n         *\n         * @param {String} path\n         * @returns {String}\n         */\n        getImageNameFromPath: function (path) {\n            var filePathArray = path.split('/'),\n                imageIndex = filePathArray.length - 1;\n\n            return filePathArray[imageIndex].substring(0, filePathArray[imageIndex].lastIndexOf('.'));\n        },\n\n        /**\n         * Show error message and schedule cleanup\n         *\n         * @param {String} message\n         */\n        showErrorMessage: function (message) {\n            this.messages.push({\n                code: 'error',\n                messageUnsanitizedHtml: message\n            });\n            this.messagesCleanup();\n        },\n\n        /**\n         * Messages cleanup\n         */\n        messagesCleanup: function () {\n            // eslint-disable-next-line no-unused-vars\n            var timerId;\n\n            // eslint-disable-next-line no-unused-vars\n            timerId = setTimeout(function () {\n                clearTimeout(timerId);\n                this.messages.removeAll();\n            }.bind(this), Number(this.messageDelay) * 1000);\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/keywords.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiComponent',\n    'underscore'\n], function (Component, _) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/keywords',\n            chipsProvider: 'componentType = filtersChips, ns = ${ $.ns }',\n            defaultKeywordsLimit: 5,\n            keywordsLimit: 5,\n            canViewMoreKeywords: true,\n            modules: {\n                chips: '${ $.chipsProvider }',\n                preview: '${ $.parentName }.preview'\n            }\n        },\n\n        /**\n         * Init observable variables\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'keywordsLimit',\n                    'canViewMoreKeywords'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Returns keywords to display under the attributes image\n         *\n         * @returns {*[]}\n         */\n        getKeywords: function (record) {\n            return record.keywords;\n        },\n\n        /**\n         * Returns keywords limit to show no of keywords\n         */\n        getKeywordsLimit: function () {\n            return this.keywordsLimit();\n        },\n\n        /**\n         * Show all the related keywords\n         */\n        viewAllKeywords: function (record) {\n            this.keywordsLimit(record.keywords.length);\n            this.canViewMoreKeywords(false);\n            this.preview().updateHeight();\n            this.preview().scrollToPreview();\n        },\n\n        /**\n         * Hide all the related keywords\n         */\n        hideAllKeywords: function () {\n            this.keywordsLimit(this.defaultKeywordsLimit);\n            this.canViewMoreKeywords(true);\n        },\n\n        /**\n         * Drop all filters and initiate search on keyword click event\n         */\n        searchByKeyWord: function (keyword) {\n            _.invoke(this.chips().elems(), 'clear');\n            _.invoke(this.chips().elems(), 'apply', keyword);\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/related.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'uiComponent',\n    'underscore',\n    'jquery'\n], function (Component, _, $) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/related',\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\n            filterBookmarksSelector: '.admin__data-grid-action-bookmarks',\n            tabImagesLimit: 4,\n            tabsContainerId: '#adobe-stock-tabs',\n            serieFilterValue: '',\n            modelFilterValue: '',\n            selectedTab: null,\n            loader: false,\n            relatedImages: {\n                series: {},\n                model: {}\n            },\n            statefull: {\n                serieFilterValue: true,\n                modelFilterValue: true\n            },\n            modules: {\n                chips: '${ $.chipsProvider }',\n                filterChips: '${ $.filterChipsProvider }',\n                preview: '${ $.parentName }.preview'\n            },\n            exports: {\n                serieFilterValue: '${ $.provider }:params.filters.serie_id',\n                modelFilterValue: '${ $.provider }:params.filters.model_id'\n            }\n        },\n\n        /**\n         * Initializes related component.\n         */\n        initialize: function () {\n            this._super();\n\n            this.filterChips().updateActive();\n\n            return this;\n        },\n\n        /**\n         * Disable keydown event for related content tabs\n         */\n        disableTabsKeyDownEvent: function () {\n            if ($(this.tabsContainerId + ' li[role=tab]').length === 0) {\n                setTimeout(function () {\n                    this.disableTabsKeyDownEvent();\n                }.bind(this), 100);\n            } else {\n                $(this.tabsContainerId + ' li[role=tab]').off('keydown');\n            }\n        },\n\n        /**\n         * Init observable variables\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'serieFilterValue',\n                    'modelFilterValue',\n                    'selectedTab',\n                    'relatedImages',\n                    'loader'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * Check if visible container\n         *\n         * @param {Object} record\n         * @returns boolean\n         */\n        isVisible: function (record) {\n            return this.showSeriesTab(record) && this.showModelTab(record);\n        },\n\n        /**\n         * Get image related image series.s\n         *\n         * @param {Object} record\n         */\n        loadRelatedImages: function (record) {\n            var series = this.getSeries(record),\n                model = this.getModel(record);\n\n            if (series && series.length ||\n                model && model.length\n            ) {\n                return;\n            }\n            $.ajax({\n                type: 'GET',\n                url: this.preview().relatedImagesUrl,\n                dataType: 'json',\n                beforeSend: function () {\n                    this.loader(true);\n                }.bind(this),\n                data: {\n                    'image_id': record.id,\n                    'limit': this.tabImagesLimit\n                }\n            }).done(function (data) {\n                var relatedImages = this.relatedImages();\n\n                this.loader(false);\n                relatedImages.series[record.id] = data.result['same_series'];\n                relatedImages.model[record.id] = data.result['same_model'];\n\n                this.relatedImages(relatedImages);\n                this.preview().updateHeight();\n\n                /* Switch to the model tab if the series tab is hidden */\n                if (relatedImages.series[record.id].length === 0 && relatedImages.model[record.id].length > 0) {\n                    // eslint-disable-next-line jquery-no-input-event-shorthand\n                    $('#adobe-stock-tabs').data().mageTabs.select(1);\n                }\n            }.bind(this));\n        },\n\n        /**\n         * Returns true if the series tab should be show, false otherwise\n         *\n         * @param {Object} record\n         * @returns boolean\n         */\n        showSeriesTab: function (record) {\n            return typeof this.relatedImages().series[record.id] === 'undefined' ||\n                this.relatedImages().series[record.id].length !== 0;\n        },\n\n        /**\n         * Returns true if the model tab should be show, false otherwise\n         *\n         * @param {Object} record\n         * @returns boolean\n         */\n        showModelTab: function (record) {\n            return typeof this.relatedImages().model[record.id] === 'undefined' ||\n                this.relatedImages().model[record.id].length !== 0;\n        },\n\n        /**\n         * Returns series to display under the image\n         *\n         * @param {Object} record\n         * @returns {*[]}\n         */\n        getSeries: function (record) {\n            return this.relatedImages().series[record.id] || [];\n        },\n\n        /**\n         * Check if the number of related series image is greater than 4 or not\n         *\n         * @param {Object} record\n         * @returns boolean\n         */\n        canShowMoreSeriesImages: function (record) {\n            return this.getSeries(record).length >= this.tabImagesLimit;\n        },\n\n        /**\n         * Returns model to display under the image\n         *\n         * @param {Object} record\n         * @returns {*[]}\n         */\n        getModel: function (record) {\n            return this.relatedImages().model[record.id] || [];\n        },\n\n        /**\n         * Check if the number of related model image is greater than 4 or not\n         *\n         * @param {Object} record\n         * @returns boolean\n         */\n        canShowMoreModelImages: function (record) {\n            return this.getModel(record).length >= this.tabImagesLimit;\n        },\n\n        /**\n         * Filter images from serie_id\n         *\n         * @param {Object} record\n         */\n        seeMoreFromSeries: function (record) {\n            if (this.isSerieFilterApplied(record)) {\n                this.scrollToFilter();\n\n                return;\n            }\n            this.serieFilterValue(record.id);\n            this.applyFilter('serie_id', record.id.toString());\n        },\n\n        /**\n         * Filter images from serie_id\n         *\n         * @param {Object} record\n         */\n        seeMoreFromModel: function (record) {\n            if (this.isModelFilterApplied(record)) {\n                this.scrollToFilter();\n\n                return;\n            }\n            this.modelFilterValue(record.id);\n            this.applyFilter('model_id', record.id.toString());\n        },\n\n        /**\n         * Apply series or model id filter and scroll to top of the page\n         *\n         * @param {String} typeId\n         * @param {String} recordId\n         */\n        applyFilter: function (typeId, recordId) {\n            var data = {};\n\n            data[typeId] = recordId;\n\n            this.filterChips().clear();\n            this.filterChips().setData(data, true);\n            this.filterChips().apply();\n\n            this.scrollToFilter();\n        },\n\n        /**\n         * Checks if the filter is applied\n         *\n         * @param {Object} record\n         * @returns {Boolean}\n         */\n        isSerieFilterApplied: function (record) {\n            return this.filterChips().get('applied')['serie_id'] === record.id.toString();\n        },\n\n        /**\n         * Checks if the filter is applied\n         *\n         * @param {Object} record\n         * @returns {Boolean}\n         */\n        isModelFilterApplied: function (record) {\n            return this.filterChips().get('applied')['model_id'] === record.id.toString();\n        },\n\n        /**\n         * Scrolls user window to the filter bookmarks\n         */\n        scrollToFilter: function () {\n            $(this.preview().adobeStockModalSelector + ' ' + this.filterBookmarksSelector).get(0).scrollIntoView({\n                behavior: 'smooth',\n                block: 'center',\n                inline: 'nearest'\n            });\n        },\n\n        /**\n         * Next related image preview\n         *\n         * @param {Object} record\n         */\n        nextRelated: function (record) {\n            var relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record),\n                nextRelatedIndex = _.findLastIndex(\n                    relatedList,\n                    {\n                        id: this.preview().displayedRecord().id\n                    }\n                ) + 1,\n                nextRelated = relatedList[nextRelatedIndex];\n\n            if (typeof nextRelated === 'undefined') {\n                return;\n            }\n\n            this.switchImagePreviewToRelatedImage(nextRelated);\n        },\n\n        /**\n         * Previous related preview\n         *\n         * @param {Object} record\n         */\n        prevRelated: function (record) {\n            var relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record),\n                prevRelatedIndex = _.findLastIndex(\n                    relatedList,\n                    {\n                        id: this.preview().displayedRecord().id\n                    }\n                ) - 1,\n                prevRelated = relatedList[prevRelatedIndex];\n\n            if (typeof prevRelated === 'undefined') {\n                return;\n            }\n\n            this.switchImagePreviewToRelatedImage(prevRelated);\n        },\n\n        /**\n         * Get previous button disabled\n         *\n         * @param {Object} record\n         *\n         * @return {Boolean}\n         */\n        cannotViewPrevious: function (record) {\n            var relatedList, prevRelatedIndex, prevRelated;\n\n            if (!this.selectedTab()) {\n                return false;\n            }\n            relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record);\n            prevRelatedIndex = _.findLastIndex(\n                relatedList,\n                {\n                    id: this.preview().displayedRecord().id\n                }\n            ) - 1;\n            prevRelated = relatedList[prevRelatedIndex];\n\n            return typeof prevRelated === 'undefined';\n        },\n\n        /**\n         * Get next button disabled\n         *\n         * @param {Object} record\n         *\n         * @return {Boolean}\n         */\n        cannotViewNext: function (record) {\n            var relatedList, nextRelatedIndex, nextRelated;\n\n            if (!this.selectedTab()) {\n                return false;\n            }\n            relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record);\n            nextRelatedIndex = _.findLastIndex(\n                relatedList,\n                {\n                    id: this.preview().displayedRecord().id\n                }\n            ) + 1;\n            nextRelated = relatedList[nextRelatedIndex];\n\n            return typeof nextRelated === 'undefined';\n        },\n\n        /**\n         * Switch image preview to related image\n         *\n         * @param {Object|null} relatedImage\n         */\n        switchImagePreviewToRelatedImage: function (relatedImage) {\n            if (!relatedImage) {\n                this.selectedTab(null);\n\n                return;\n            }\n\n            if (this.preview().displayedRecord().id === relatedImage.id) {\n                return;\n            }\n\n            this.preview().showRelated(relatedImage);\n        },\n\n        /**\n         * Switch image preview to series image\n         *\n         * @param {Object} record\n         */\n        switchImagePreviewToSeriesImage: function (record) {\n            this.selectedTab('series');\n            this.switchImagePreviewToRelatedImage(record);\n        },\n\n        /**\n         * Switch image preview to model image\n         *\n         * @param {Object} record\n         */\n        switchImagePreviewToModelImage: function (record) {\n            this.selectedTab('model');\n            this.switchImagePreviewToRelatedImage(record);\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/confirmation/buyCredits.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm'\n], function ($, confirm) {\n    'use strict';\n\n    return function (buyCreditsUrl, recordTitle, quotaMessage) {\n        var confirmationContent = $.mage.__('License \"' + recordTitle + '\"'),\n            content = '<p>' + confirmationContent + '</p><p><b>' + quotaMessage + '</b></p><br>';\n\n        confirm({\n            title: $.mage.__('License Adobe Stock Images?'),\n            content: content,\n            buttons: [{\n                text: $.mage.__('Cancel'),\n                class: 'action-secondary action-dismiss',\n\n                /**\n                 * Close modal\n                 */\n                click: function () {\n                    this.closeModal();\n                }\n            },{\n                text: $.mage.__('Buy Credits'),\n                class: 'action-primary action-accept',\n\n                /**\n                 * Close modal\n                 */\n                click: function () {\n                    window.open(buyCreditsUrl);\n                    this.closeModal();\n                }\n            }]\n        });\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/confirmation/license.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/prompt',\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\n], function ($, prompt, adobePromptContentTmpl) {\n    'use strict';\n\n    return function (recordTitle, quotaMessage, isPreviewDownloaded, proposedfileName, fileExtension) {\n        var confirmationContent = $.mage.__('License \"' + recordTitle + '\"'),\n            deferred = $.Deferred(),\n            displayFieldName = !isPreviewDownloaded ? '<b>' + $.mage.__('File Name') + '</b>' : '',\n            content = '<p>' + confirmationContent + '</p><p><b>' + quotaMessage + '</b></p><br>' + displayFieldName,\n            data = {\n                'title': $.mage.__('License Adobe Stock Images?'),\n                'content': content,\n                'visible': !isPreviewDownloaded,\n                'actions': {\n                    /**\n                     * Confirm action\n                     *\n                     * @param {String} fileName\n                     */\n                    confirm: function (fileName) {\n                        deferred.resolve(fileName);\n                    }\n                },\n                'buttons': [{\n                    text: $.mage.__('Cancel'),\n                    class: 'action-secondary action-dismiss',\n\n                    /**\n                     * Close modal\n                     */\n                    click: function () {\n                        this.closeModal();\n                        deferred.reject();\n                    }\n                }, {\n                    text: $.mage.__('Confirm'),\n                    class: 'action-primary action-accept'\n                }]\n\n            };\n\n        prompt({\n            title: data.title,\n            content:  data.content,\n            value: proposedfileName,\n            imageExtension: fileExtension,\n            visible: data.visible,\n            promptContentTmpl: adobePromptContentTmpl,\n            modalClass: 'adobe-stock-save-preview-prompt',\n            validation: true,\n            promptField: '[data-role=\"adobe-stock-image-name-field\"]',\n            validationRules: ['required-entry', 'validate-image-name'],\n            attributesForm: {\n                novalidate: 'novalidate',\n                action: '',\n                onkeydown: 'return event.key != \\'Enter\\';'\n            },\n            attributesField: {\n                name: 'name',\n                'data-validate': '{required:true}',\n                maxlength: '128'\n            },\n            context: this,\n            actions: data.actions,\n            buttons: data.buttons\n        });\n\n        if (!data.visible) {\n            $('.adobe-stock-save-preview-prompt').trigger('focus');\n        }\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/confirmation/save.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/prompt',\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\n], function ($, prompt, adobePromptContentTmpl) {\n    'use strict';\n\n    return function (proposedfileName, fileExtension) {\n        var deferred = $.Deferred(),\n            data = {\n                'title': $.mage.__('Save Preview'),\n                'content': $.mage.__('File Name'),\n                'visible': true,\n                'actions': {\n                    /**\n                     * Resolve with the specified file name\n                     *\n                     * @param {String} specifiedFileName\n                     */\n                    confirm: function (specifiedFileName) {\n                        deferred.resolve(specifiedFileName);\n                    }\n                },\n                'buttons': [{\n                    text: $.mage.__('Cancel'),\n                    class: 'action-secondary action-dismiss',\n\n                    /**\n                     * Close modal on button click\n                     */\n                    click: function () {\n                        this.closeModal();\n                        deferred.reject();\n                    }\n                }, {\n                    text: $.mage.__('Confirm'),\n                    class: 'action-primary action-accept'\n                }]\n\n            };\n\n        prompt({\n            title: data.title,\n            content:  data.content,\n            value: proposedfileName,\n            imageExtension: fileExtension,\n            visible: data.visible,\n            promptContentTmpl: adobePromptContentTmpl,\n            modalClass: 'adobe-stock-save-preview-prompt',\n            validation: true,\n            promptField: '[data-role=\"adobe-stock-image-name-field\"]',\n            validationRules: ['required-entry', 'validate-image-name'],\n            attributesForm: {\n                novalidate: 'novalidate',\n                action: '',\n                onkeydown: 'return event.key != \\'Enter\\';'\n            },\n            attributesField: {\n                name: 'name',\n                'data-validate': '{required:true}',\n                maxlength: '128'\n            },\n            context: this,\n            actions: data.actions,\n            buttons: data.buttons\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/confirmation/saveLicensed.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/prompt',\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\n], function ($, prompt, adobePromptContentTmpl) {\n    'use strict';\n\n    return function (proposedfileName, fileExtension) {\n        var deferred = $.Deferred(),\n            data = {\n                'title': $.mage.__('Save'),\n                'content': $.mage.__('File Name'),\n                'visible': true,\n                'actions': {\n                    /**\n                     * Resolve with the specified file name\n                     *\n                     * @param {String} fileName\n                     */\n                    confirm: function (fileName) {\n                        deferred.resolve(fileName);\n                    }\n                },\n                'buttons': [\n                    {\n                        text: $.mage.__('Cancel'),\n                        class: 'action-secondary action-dismiss',\n\n                        /**\n                         * Close modal on button click\n                         */\n                        click: function () {\n                            this.closeModal();\n                            deferred.reject();\n                        }\n                    },\n                    {\n                        text: $.mage.__('Confirm'),\n                        class: 'action-primary action-accept'\n                    }\n                ]\n            };\n\n        prompt({\n            title: data.title,\n            content:  data.content,\n            value: proposedfileName,\n            imageExtension: fileExtension,\n            visible: data.visible,\n            promptContentTmpl: adobePromptContentTmpl,\n            modalClass: 'adobe-stock-save-preview-prompt',\n            validation: true,\n            promptField: '[data-role=\"adobe-stock-image-name-field\"]',\n            validationRules: ['required-entry', 'validate-image-name'],\n            attributesForm: {\n                novalidate: 'novalidate',\n                action: '',\n                onkeydown: 'return event.key != \\'Enter\\';'\n            },\n            attributesField: {\n                name: 'name',\n                'data-validate': '{required:true}',\n                maxlength: '128'\n            },\n            context: this,\n            actions: data.actions,\n            buttons: data.buttons\n        });\n\n        return deferred.promise();\n    };\n});\n","Magento_AdobeStockImageAdminUi/js/mediaGallery/grid/columns/licenseImage.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_MediaGalleryUi/js/grid/columns/image'\n], function (Image) {\n    'use strict';\n\n    return Image.extend({\n        defaults: {\n            viewConfig: [\n                {\n                    component: 'Magento_AdobeStockImageAdminUi/js/mediaGallery/grid/columns/image/licenseActions',\n                    name: '${ $.name }_actions',\n                    imageModelName: '${ $.name }',\n                    imageDetailsUrl: '${ $.imageDetailsurl }',\n                    imageComponent: '${ $.imageComponent }'\n                }\n            ]\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/mediaGallery/grid/columns/image/licenseActions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_MediaGalleryUi/js/grid/columns/image/actions',\n    'Magento_MediaGalleryUi/js/action/getDetails',\n    'mage/translate'\n], function ($, _, Action, getDetails) {\n    'use strict';\n\n    return Action.extend({\n        defaults: {\n            template: 'Magento_AdobeStockImageAdminUi/mediaGallery/grid/columns/image/licenseActions',\n            licenseAction: {\n                name: 'license',\n                title: $.mage.__('License'),\n                handler: 'licenseImageAction'\n            },\n            modules: {\n                image: '${ $.imageComponent }'\n            }\n        },\n\n        /**\n         * Initialize the component\n         *\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n            this.actionsList.push(this.licenseAction);\n\n            return this;\n        },\n\n        /**\n         * Init observable variables\n         *\n         * @return {Object}\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'visible'\n                ]);\n\n            return this;\n        },\n\n        /**\n         * License image\n         *\n         * @param {Object} record\n         */\n        licenseImageAction: function (record) {\n            this.getImageRecord(record.id);\n        },\n\n        /**\n         * Check if image licensed\n         *\n         * @param {Object} record\n         * @param {Object} name\n         */\n        isVisible: function (record, name) {\n            if (name === this.licenseAction.name) {\n                if (_.isUndefined(record.overlay) || record.overlay === '') {\n                    return false;\n                }\n\n                return true;\n            }\n\n            return true;\n        },\n\n        /**\n         * Get image record and start license process\n         *\n         * @param {Number} imageId\n         */\n        getImageRecord: function (imageId) {\n            getDetails(this.imageDetailsUrl, [imageId]).then(function (imageDetails) {\n                var id = imageDetails[imageId]['adobe_stock'][0].value;\n\n                this.image().actions().licenseProcess(\n                    id,\n                    imageDetails[imageId].title,\n                    imageDetails[imageId].path,\n                    imageDetails[imageId]['content_type'],\n                    true\n                ).then(function () {\n                    this.image().actions().login().getUserQuota();\n                    this.imageModel().reloadGrid();\n                    this.imageModel().addMessage('success', $.mage.__('The image has been licensed.'));\n                }.bind(this)).fail(function (error) {\n                    if (error) {\n                        this.imageModel().addMessage('error', error);\n                    }\n                }.bind(this));\n            }.bind(this)).fail(function (message) {\n                this.imageModel().addMessage('error', message);\n            }.bind(this));\n        }\n    });\n});\n","Magento_AdobeStockImageAdminUi/js/validation/validate-image-name.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/translate',\n    'jquery/validate'\n], function ($, $t) {\n    'use strict';\n\n    $.validator.addMethod(\n        'validate-image-name', function (value) {\n            return /^[a-zA-Z0-9\\-\\_]+$/i.test(value);\n\n        }, $t('Please name the file using only letters, numbers, underscores and dashes'));\n});\n","Magento_InventoryBundleProductAdminUi/js/form/element/grid-column-quantity-per-source.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'mage/translate',\n    'Magento_Ui/js/grid/columns/column'\n], function ($t, Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventoryBundleProductAdminUi/grid/column/quantity-per-source',\n            itemsToDisplay: 3,\n            showFullListDescription: $t('Show more...')\n        },\n\n        /**\n         * Get source items from product data.\n         *\n         * @param {Object} rowData\n         * @returns {Array}\n         */\n        getSourceItemsData: function (rowData) {\n            return rowData['quantity_per_source'];\n        }\n    });\n});\n","Magento_InventoryBundleProductAdminUi/js/form/element/quantity-per-source.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'mage/translate',\n    'Magento_Ui/js/form/element/abstract'\n], function ($t, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            elementTmpl: 'Magento_InventoryBundleProductAdminUi/dynamic-rows/cells/cell-source',\n            itemsToDisplay: 3,\n            isFullList: true,\n            showFullListDescription: $t('Show more...'),\n            listens: {\n                value: 'updateItems'\n            }\n        },\n\n        /**\n         * Observe elements.\n         *\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['items', 'isFullList']);\n\n            return this;\n        },\n\n        /**\n         * Prepare data to use.\n         *\n         * @param {Object} data\n         * @private\n         */\n        updateItems: function (data) {\n            this.isFullList(data.length > this.itemsToDisplay);\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\n        }\n    });\n});\n","Magento_InventoryConfigurableProductAdminUi/js/configurable-quantity-resolver.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiCollection',\n    'jquery',\n    'ko',\n    'uiLayout',\n    'mageUtils',\n    'underscore',\n    'mage/translate'\n], function (Collection, $, ko, layout, utils, _, $t) {\n    'use strict';\n\n    return Collection.extend({\n        defaults: {\n            attribute: {},\n            template: 'Magento_InventoryConfigurableProductAdminUi/container',\n            identifier: 'source_code',\n            dataScope: '',\n            currentAttribute: '',\n            insertListingComponent: '',\n            dynamicRowsName: 'dynamicRows',\n            type: '',\n            templateElementNames: {\n                button: 'button_template',\n                dynamicRows: 'dynamic_rows_template',\n                group: 'group_template'\n            },\n            ignoreTmpls: {\n                childTemplate: true\n            },\n            listens: {\n                'attribute': 'handlerAttributeChange',\n                'insertListingValue': 'handlerInsertValueChange',\n                'type': 'handlerTypeChange'\n            },\n            dynamicRowsCollection: {},\n            imports: {\n                insertListingValue: '${$.insertListingComponent}:value'\n            },\n            modules: {\n                insertListing: '${$.insertListingComponent}'\n            }\n        },\n\n        /**\n         * Generates data for dynamic-rows records\n         * @param {Array} data\n         *\n         * @returns {Array}\n         */\n        generateDynamicRowsData: function (data) {\n            var items = [];\n\n            _.each(data, function (item) {\n                items.push({\n                    'source': item.name,\n                    'source_code': item[this.identifier],\n                    'source_status': parseInt(item.enabled, 10) ? $.mage.__('Enabled') : $.mage.__('Disabled')\n                });\n            }.bind(this));\n\n            return items;\n        },\n\n        /**\n         * Handler for InsertListing value\n         *\n         * @param {Array} data\n         */\n        handlerInsertValueChange: function (data) {\n            var items,\n                path = this.dynamicRowsName + '.' + this.currentDynamicRows;\n\n            if (!this.currentDynamicRows) {\n                return;\n            }\n\n            if (!data.length) {\n                return;\n            }\n\n            items = this.generateDynamicRowsData(data);\n            this.source.set(path, items);\n        },\n\n        /**\n         * Handler for attribute property\n         *\n         * @param {Object} data\n         */\n        handlerAttributeChange: function (data) {\n            if (data && data !== this.currentAttribute) {\n                this.currentAttribute = data;\n                this.destroyChildren();\n\n                _.each(data.chosen, function (item) {\n                    this.addChild(item);\n                }.bind(this));\n            }\n        },\n\n        /**\n         * Handler for type property\n         *\n         * @param {String} data\n         */\n        handlerTypeChange: function (data) {\n            if (data === 'single') {\n                this.destroyChildren();\n                this.currentAttribute = {};\n                this.addChild();\n            } else if (data === 'each' && this.attribute) {\n                this.handlerAttributeChange(this.attribute);\n            }\n        },\n\n        /** @inheritdoc */\n        validate: function (elem) {\n            if (typeof elem === 'undefined') {\n                return;\n            }\n\n            if (typeof elem.validate === 'function') {\n                this.valid &= elem.validate().valid;\n            } else if (elem.elems) {\n                elem.elems().forEach(this.validate, this);\n            }\n        },\n\n        /**\n         * Parses string templates.\n         * Skip parse if deferredTmpl property set to \"true\"\n         *\n         * @param {Object} obj\n         *\n         * @returns obj\n         */\n        parseTemplateString: function (obj) {\n            var children;\n\n            if (obj.children) {\n                children = utils.copy(obj.children);\n                delete obj.children;\n            }\n\n            obj = utils.template(obj, obj);\n            obj.children = children;\n\n            if (children) {\n                _.each(children, function (child, name) {\n                    obj.children[name] = child.config.deferredTmpl ? child : this.parseTemplateString(child);\n                }, this);\n            }\n\n            obj.name = obj.config.name || obj.name;\n\n            return obj;\n        },\n\n        /**\n         * Handler for modal\n         *\n         * @param {String} id - dynamic-rows name that open modal\n         */\n        handleToggleSourcesModal: function (id) {\n            this.currentDynamicRows = this.type === 'each' ? this.currentAttribute.code + '.' + id : id;\n            this.insertListing().value(this.source.get(this.dynamicRowsName + '.' + this.currentDynamicRows));\n        },\n\n        /**\n         * Generates dynamic data for child.\n         *\n         * @param {Object | Undefined} data - optional.\n         */\n        generateDynamicData: function (data) {\n            var key = data ? data.label : this.dynamicRowsName,\n                drExportTo = this.name + ':dynamicRowsCollection.',\n                drDataScope = 'data.' + this.name + '.',\n                drDataProvider = this.dynamicRowsName + '.';\n\n            if (this.type === 'each') {\n                drDataScope += this.currentAttribute.code + '.';\n                drExportTo += this.currentAttribute.code + '.';\n                drDataProvider += this.currentAttribute.code + '.';\n            }\n\n            drDataScope += key;\n            drExportTo += key;\n            drDataProvider += key;\n\n            return {\n                group: {\n                    name: key\n                },\n                button: {\n                    label: data ? data.label : $t('Quantity'),\n                    targetName: this.name,\n                    param: key\n                },\n                dynamicRows: {\n                    dataScope: drDataScope,\n                    dataProvider: drDataProvider,\n                    name: this.dynamicRowsName,\n                    exportTo: drExportTo\n                }\n            };\n        },\n\n        /**\n         * @param {Object | Undefined} data - optional.\n         */\n        addChild: function (data) {\n            var template = utils.copy(this.childTemplate.templates).children,\n                dynamicRows = template[this.templateElementNames.dynamicRows],\n                button = template[this.templateElementNames.button],\n                group = template[this.templateElementNames.group],\n                dynamicData = this.generateDynamicData(data);\n\n            group.dynamicData = dynamicData.group;\n            group.parent = this.name;\n            group = this.parseTemplateString(group);\n\n            button.dynamicData = dynamicData.button;\n            button.parent = this.name + '.' + group.name;\n            button = this.parseTemplateString(button);\n\n            dynamicRows.dynamicData = dynamicData.dynamicRows;\n            dynamicRows.parent = this.name + '.' + group.name;\n            dynamicRows = this.parseTemplateString(dynamicRows);\n\n            layout([group, button, dynamicRows]);\n        }\n    });\n});\n","Magento_InventoryConfigurableProductAdminUi/js/dynamic-rows-configurable-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n        'use strict';\n\n        var mixin = {\n\n            /**\n             * Parsed data\n             *\n             * @param {Array} data - array with data\n             * about selected records\n             */\n            processingInsertDataFromGrid: function (data) {\n                var changes,\n                    tmpArray;\n\n                if (!data.length) {\n                    return;\n                }\n\n                tmpArray = this.getUnionInsertData();\n\n                changes = this._checkGridData(data);\n                this.cacheGridData = data;\n\n                changes.each(function (changedObject) {\n                    var mappedData = this.mappingValue(changedObject),\n                        sources = [];\n\n                    mappedData[this.canEditField] = 0;\n                    mappedData[this.newProductField] = 0;\n                    mappedData.variationKey = this._getVariationKey(changedObject);\n                    mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\n\n                    if ('quantity_per_source' in changedObject) {\n                        changedObject['quantity_per_source'].each(function (source) {\n                            sources.push({\n                                'quantity_per_source': source.qty,\n                                'source': source['source_name'],\n                                'source_code': source['source_code']\n                            });\n                        });\n                        mappedData['quantity_per_source'] = sources;\n                    }\n\n                    tmpArray.push(mappedData);\n                }, this);\n\n                // Attributes cannot be changed before regeneration thought wizard\n                if (!this.source.get('data.attributes').length) {\n                    this.source.set('data.attributes', this.attributesTmp);\n                }\n                this.unionInsertData(tmpArray);\n            }\n        };\n\n        return function (target) {\n            return target.extend(mixin);\n        };\n    }\n);\n","Magento_InventoryConfigurableProductAdminUi/js/components/dynamic-rows-configurable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_ConfigurableProduct/js/components/dynamic-rows-configurable'\n], function (dynamicRowsConfigurable) {\n    'use strict';\n\n    return dynamicRowsConfigurable.extend({\n        defaults: {\n            quantityFieldName: 'quantity_per_source'\n        },\n\n        /** @inheritdoc */\n        getProductData: function (row) {\n            var product = this._super(row);\n\n            product[this.quantityFieldName] = row.quantityPerSource;\n\n            return product;\n        }\n    });\n});\n","Magento_InventoryConfigurableProductAdminUi/js/components/sources-visibility-checker.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'uiComponent'\n], function (_, registry, component) {\n    'use strict';\n\n    return component.extend({\n        defaults: {\n            sourcesIndex: ''\n        },\n\n        /**\n         * Hide source tab if convert product to configurable and show it if to simple.\n         */\n        applySourcesConfiguration: function (visibleMatrix) {\n            var source = registry.get('index = ' + this.sourcesIndex);\n\n            if (!_.isUndefined(source)) {\n                source.visible(!visibleMatrix);\n            }\n        }\n    });\n});\n","Magento_InventoryConfigurableProductAdminUi/js/form/element/quantity-per-source.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'mage/translate',\n    'Magento_Ui/js/form/element/abstract'\n], function ($t, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            elementTmpl: 'Magento_InventoryConfigurableProductAdminUi/dynamic-rows/cells/cell-source',\n            itemsToDisplay: 5,\n            isFullList: true,\n            showFullListDescription: $t('Show more...'),\n            listens: {\n                value: 'updateItems'\n            }\n        },\n\n        /**\n         *\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['items', 'isFullList']);\n\n            return this;\n        },\n\n        /**\n         *\n         * @param {Object} data\n         */\n        updateItems: function (data) {\n            this.isFullList(data.length > this.itemsToDisplay);\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\n        }\n    });\n});\n","Magento_InventoryConfigurableProductAdminUi/js/variations/steps/bulk.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_ConfigurableProduct/js/variations/steps/bulk',\n    'jquery',\n    'ko',\n    'underscore'\n], function (Bulk, $, ko, _) {\n    'use strict';\n\n    return Bulk.extend({\n        defaults: {\n            quantityModuleName: '',\n            quantityPerSource: '',\n            exports: {\n                attribute: '${$.provider}:data.inventoryAttribute',\n                type: '${$.provider}:data.inventoryType'\n            },\n            modules: {\n                quantityResolver: '${$.quantityResolver}'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            var sections;\n\n            this._super();\n\n            sections = this.sections();\n            sections.quantityPerSource = {\n                label: 'Quantity Per Source',\n                type: ko.observable('none'),\n                value: ko.observable(),\n                attribute: ko.observable()\n            };\n            this.sections(sections);\n\n            /**\n             * Make options sections.\n             */\n            this.makeOptionSections = function () {\n                return {\n                    images: new this.makeImages(null),\n                    price: this.price,\n                    quantityPerSource: this.quantityPerSource\n                };\n            }.bind(this);\n\n            this.initAttributeListener();\n\n            return this;\n        },\n\n        /**\n         * Inits listeners for attribute change.\n         */\n        initAttributeListener: function () {\n            var quantityPerSource = this.sections().quantityPerSource;\n\n            quantityPerSource.attribute.subscribe(function (data) {\n                this.attribute(data);\n            }.bind(this));\n\n            quantityPerSource.type.subscribe(function (data) {\n                this.type(data);\n            }.bind(this));\n        },\n\n        /**\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\n         *     properties, calls 'setOptions' passing options to it\n         *\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super()\n                .observe([\n                    'attribute',\n                    'type'\n                ]);\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        force: function (wizard) {\n            if (this.type() === 'each' && this.attribute() || this.type() === 'single') {\n                this.prepareDynamicRowsData();\n            }\n\n            this._super(wizard);\n        },\n\n        /**\n         * Prepares dynamic rows data for the next step\n         */\n        prepareDynamicRowsData: function () {\n            var data,\n                module = this.quantityResolver();\n\n            if (this.type() === 'each') {\n                data = module.dynamicRowsCollection[this.attribute().code];\n\n                _.each(this.attribute().chosen, function (item) {\n                    item.sections().quantityPerSource = data[item.label];\n                });\n            } else if (this.type() === 'single') {\n                data = module.dynamicRowsCollection[module.dynamicRowsName];\n                this.sections().quantityPerSource.value(data);\n            }\n        },\n\n        /** @inheritdoc */\n        validate: function () {\n            var valid = true,\n                quantityPerSource = this.quantityResolver();\n\n            this._super();\n\n            if (this.type() && this.type() !== 'none') {\n                quantityPerSource.valid = true;\n\n                quantityPerSource.elems().forEach(function (item) {\n                    quantityPerSource.validate.call(quantityPerSource, item);\n                    valid = valid && item.elems()[1].elems().length;\n                });\n\n                if (!quantityPerSource.valid || !valid) {\n                    throw new Error($.mage.__('Please fill-in correct values.'));\n                }\n            }\n        }\n    });\n});\n","Magento_InventoryConfigurableProductAdminUi/js/variations/steps/summary.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_ConfigurableProduct/js/variations/steps/summary',\n    'jquery',\n    'mage/translate'\n], function (Summary, $) {\n    'use strict';\n\n    return Summary.extend({\n        defaults: {\n            attributesName: [\n                $.mage.__('Images'),\n                $.mage.__('SKU'),\n                $.mage.__('Quantity Per Source'),\n                $.mage.__('Price')\n            ],\n            quantityFieldName: 'quantityPerSource'\n        }\n    });\n});\n","Magento_InventoryGroupedProductAdminUi/js/form/element/grid-column-quantity-per-source.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'mage/translate',\n    'Magento_Ui/js/grid/columns/column'\n], function ($t, Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventoryGroupedProductAdminUi/grid/column/quantity-per-source',\n            itemsToDisplay: 3,\n            showFullListDescription: $t('Show more...')\n        },\n\n        /**\n         * Get source items from product data.\n         *\n         * @param {Object} rowData\n         * @returns {Array}\n         */\n        getSourceItemsData: function (rowData) {\n            return rowData['quantity_per_source'];\n        }\n    });\n});\n","Magento_InventoryGroupedProductAdminUi/js/form/element/quantity-per-source.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'mage/translate',\n    'Magento_Ui/js/form/element/abstract'\n], function ($t, Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            elementTmpl: 'Magento_InventoryGroupedProductAdminUi/dynamic-rows/cells/cell-source',\n            itemsToDisplay: 3,\n            isFullList: true,\n            showFullListDescription: $t('Show more...'),\n            listens: {\n                value: 'updateItems'\n            }\n        },\n\n        /**\n         * Observe elements.\n         *\n         * @returns {exports}\n         */\n        initObservable: function () {\n            this._super()\n                .observe(['items', 'isFullList']);\n\n            return this;\n        },\n\n        /**\n         * Prepare data to use.\n         *\n         * @param {Object} data\n         * @private\n         */\n        updateItems: function (data) {\n            this.isFullList(data.length > this.itemsToDisplay);\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\n        }\n    });\n});\n","Magento_InventoryInStorePickupAdminUi/js/form/components/fieldset.js":"/*\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/components/fieldset',\n    'ko'\n], function (Fieldset, ko) {\n    'use strict';\n\n    /**\n     * TODO Remove when issue is resolved in core.\n     * @see Please check issue in core for more details: https://github.com/magento/magento2/issues/22067.\n     */\n    return Fieldset.extend(ko).extend(\n        {\n            /**\n             * Convert `visible` value from string ('1', '0') to bool (true, false)\n             */\n            initialize: function () {\n                this._super();\n\n                // eslint-disable-next-line vars-on-top\n                var visible = this.visible;\n\n                this.visible = ko.computed({\n                    /**\n                     * @returns {Boolean}\n                     */\n                    read: function () {\n                        return visible();\n                    },\n\n                    /**\n                     * @param {String} value\n                     */\n                    write: function (value) {\n                        value = Boolean(value) === value ? value : Boolean(parseInt(value, 10));\n                        visible(value);\n                    },\n                    owner: this\n                });\n                this.visible(visible());\n            }\n        }\n    );\n});\n","Magento_InventoryInStorePickupAdminUi/js/form/element/conditional-required.js":"/*\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract',\n    'ko',\n    'underscore',\n    'mageUtils'\n], function (uiElement, ko, _, utils) {\n    'use strict';\n\n    /**\n     * Provide possibility to make field required by dependency on other field value.\n     */\n    return uiElement.extend(\n        {\n            /**\n             * Convert `required` value from string ('1', '0') to bool (true, false)\n             */\n            initialize: function () {\n                this._super();\n\n                // eslint-disable-next-line vars-on-top\n                var required = this.required;\n\n                this.required = ko.computed({\n                    /**\n                     * @returns {Boolean}\n                     */\n                    read: function () {\n                        return required();\n                    },\n\n                    /**\n                     * @param {String|Boolean} value\n                     */\n                    write: function (value) {\n                        value = Boolean(value) === value ? value : Boolean(parseInt(value, 10));\n\n                        if (required() !== value) {\n                            required(value);\n                            this.setValidation('required-entry', required());\n                        }\n                    },\n                    owner: this\n                });\n                this.required(required());\n            },\n\n            /**\n             * @param {(String|Object)} rule\n             * @param {(Object|Boolean)} [options]\n             * @returns {Abstract} Chainable.\n             */\n            setValidation: function (rule, options) {\n                var rules = utils.copy(this.validation),\n                    changed;\n\n                if (_.isObject(rule)) {\n                    _.extend(this.validation, rule);\n                } else {\n                    this.validation[rule] = options;\n                }\n\n                changed = !utils.compare(rules, this.validation).equal;\n\n                if (changed) {\n                    this.required(!!this.validation['required-entry']);\n                    this.validate();\n                }\n\n                return this;\n            }\n        }\n    );\n});\n","Magento_InventoryInStorePickupSalesAdminUi/order/create/scripts-mixin.js":"/*\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(\n    [\n        'jquery',\n        'prototype'\n    ],\n    function (jQuery) {\n        'use strict';\n\n        return function () {\n            var STORE_PICKUP_METHOD = 'instore_pickup',\n                SOURCES_FIELD_SELECTOR = '#shipping_form_pickup_location_source',\n                SAME_AS_BILLING_SELECTOR = '#order-shipping_same_as_billing',\n                CUSTOMER_SHIPPING_ADDRESS_ID_SELECTOR = '#order-shipping_address_customer_address_id',\n                CUSTOMER_ADDRESS_SAVE_IN_ADDRESS_BOOK_SELECTOR = '#order-shipping_address_save_in_address_book',\n                IN_STORE_PICKUP_CHECKBOX_SELECTOR = '#s_method_instore_pickup';\n\n            /**\n             * Display sources dropdown field;\n             * And vice-versa\n             *\n             * @param {Boolean} isStorePickup\n             */\n            function setStorePickupMethod(isStorePickup) {\n                var sourcesInput = jQuery(SOURCES_FIELD_SELECTOR),\n                    shippingAddressSaveInAddressBook = jQuery(CUSTOMER_ADDRESS_SAVE_IN_ADDRESS_BOOK_SELECTOR);\n\n                if (isStorePickup) {\n                    shippingAddressSaveInAddressBook.prop('checked', false);\n                    sourcesInput.show();\n\n                    return;\n                }\n                window.order.disableShippingAddress(jQuery(SAME_AS_BILLING_SELECTOR).prop('checked'));\n                sourcesInput.hide();\n            }\n\n            /**\n             * Verify is store pickup delivery method is checked.\n             */\n            function isStorePickupSelected() {\n                var storePickupCheckbox = jQuery(IN_STORE_PICKUP_CHECKBOX_SELECTOR);\n\n                return storePickupCheckbox.length && storePickupCheckbox.prop('checked');\n            }\n\n            /**\n             * Always disable unwanted shipping address fields in case store pickup is selected.\n             */\n            window.AdminOrder.prototype.disableShippingAddress =\n                window.AdminOrder.prototype.disableShippingAddress.wrap(function (proceed, flag) {\n                    var shippingAddressId = jQuery(CUSTOMER_SHIPPING_ADDRESS_ID_SELECTOR),\n                        theSameAsBillingCheckBox = jQuery(SAME_AS_BILLING_SELECTOR),\n                        shippingAddressSaveInAddressBook = jQuery(CUSTOMER_ADDRESS_SAVE_IN_ADDRESS_BOOK_SELECTOR);\n\n                    proceed(flag);\n\n                    if (isStorePickupSelected()) {\n                        shippingAddressId.prop('disabled', true);\n                        theSameAsBillingCheckBox.prop('disabled', true);\n                        shippingAddressSaveInAddressBook.prop('disabled', true);\n                    }\n                });\n\n            /**\n             * Set shipping method override\n             *\n             * @param {String} method\n             */\n            window.AdminOrder.prototype.setShippingMethod = function (method) {\n                var data = {},\n                    areas = [\n                        'shipping_method',\n                        'totals',\n                        'billing_method',\n                        'shipping_address'\n                    ];\n\n                data['order[shipping_method]'] = method;\n\n                if (method === STORE_PICKUP_METHOD) {\n                    data = this.serializeData(this.shippingAddressContainer).toObject();\n                    data['order[shipping_method]'] = method;\n                    data['shipping_as_billing'] = 0;\n                    data['save_in_address_book'] = 0;\n                    this.shippingAsBilling = 0;\n                    this.saveInAddressBook = 0;\n                }\n\n                this.loadArea(areas, true, data).then(\n                    function () {\n                        setStorePickupMethod(method === STORE_PICKUP_METHOD);\n                    }\n                );\n            };\n\n            /**\n             * Replace shipping method area.\n             * Restore store pickup shipping method if it was already selected.\n             */\n            window.AdminOrder.prototype.resetShippingMethod = function () {\n                var storePickupCheckbox = jQuery(IN_STORE_PICKUP_CHECKBOX_SELECTOR);\n\n                if (!this.isOnlyVirtualProduct) {\n                    /* eslint-disable no-undef */\n                    $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\n\n                    if (isStorePickupSelected()) {\n                        window.order.setShippingMethod(storePickupCheckbox.val());\n                    }\n                }\n            };\n        };\n    }\n);\n","Magento_InventoryInStorePickupSalesAdminUi/order/create/trigger-shipping-method-update.js":"/*\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine(\n    [\n        'jquery',\n        'Magento_Sales/order/create/form'\n    ],\n    function ($) {\n        'use strict';\n\n        return function () {\n            var storePickupCheckbox = $('#s_method_instore_pickup');\n\n            if (storePickupCheckbox.length && storePickupCheckbox.prop('checked')) {\n                window.order.setShippingMethod(storePickupCheckbox.val());\n            }\n        };\n    }\n);\n","Magento_InventoryLowQuantityNotificationAdminUi/js/components/notify-stock-qty.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (AbstractField) {\n    'use strict';\n\n    return AbstractField.extend({\n        defaults: {\n            notifyStockQtyUseDefault: '',\n            manageStock: '',\n            listens: {\n                notifyStockQtyUseDefault: 'onChange',\n                manageStock: 'onChange'\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            return this\n                ._super()\n                .observe(['notifyStockQtyUseDefault', 'manageStock']);\n        },\n\n        /**\n         * Disable input when Manage Stock switched off or Notify Quantity Use Default\n         */\n        onChange: function () {\n            this.disabled(\n                this.notifyStockQtyUseDefault() ||\n                this.manageStock()\n            );\n        }\n    });\n});\n","Magento_InventoryLowQuantityNotificationAdminUi/js/components/use-config-settings.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (checkbox) {\n    'use strict';\n\n    return checkbox.extend({\n        defaults: {\n            valueFromConfig: '',\n            linkedValue: ''\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initObservable: function () {\n            return this\n                ._super()\n                .observe(['valueFromConfig', 'linkedValue']);\n        },\n\n        /**\n         * @inheritdoc\n         */\n        'onCheckedChanged': function (newChecked) {\n            if (newChecked) {\n                this.linkedValue(this.valueFromConfig());\n            }\n\n            this._super(newChecked);\n        },\n\n        /**\n         * @returns {String}\n         */\n        getInitialValue: function () {\n            var values = [this.value(), this.default],\n                value;\n\n            values.some(function (v) {\n                value = v || !!v;\n\n                return value;\n            });\n\n            return this.normalizeData(value);\n        }\n    });\n});\n","Magento_InventorySalesAdminUi/js/product/grid/cell/salable-quantity.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventorySalesAdminUi/product/grid/cell/salable-quantity.html'\n        },\n\n        /**\n         * Get salable quantity data (stock name and salable qty)\n         *\n         * @param {Object} record - Record object\n         * @returns {Array} Result array\n         */\n        getSalableQuantityData: function (record) {\n            return record[this.index] ? record[this.index] : [];\n        }\n    });\n});\n","Magento_InventorySalesAdminUi/js/stock/grid/cell/sales-channels.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column',\n    'underscore'\n], function (Column, _) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventorySalesAdminUi/stock/grid/cell/sales-channel-cell.html'\n        },\n\n        /**\n         * Get sales channels grouped by type\n         *\n         * @param {Object} record - Record object\n         * @returns {Array} Result array\n         */\n        getSalesChannelsGroupedByType: function (record) {\n            var result = [];\n\n            _.each(record[this.index], function (channels, type) {\n                result.push({\n                    type: type,\n                    channels: channels\n                });\n            });\n\n            return result;\n        }\n    });\n});\n","Magento_InventoryShippingAdminUi/js/form/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/form',\n    'underscore',\n    'mageUtils'\n], function ($, Form, _, utils) {\n    'use strict';\n\n    return Form.extend({\n        defaults: {\n            sourceSelectionUrl: '${ $.sourceSelectionUrl }'\n        },\n\n        /**\n         * Process source selection algorithm\n         *\n         * @param {String} redirect\n         * @param {Object} data\n         */\n        processAlgorithm: function (redirect, data) {\n            var formData = utils.filterFormData(this.source.get('data'));\n\n            data.requestData = [];\n\n            _.each(formData.items, function (item) {\n                data.requestData.push({\n                    orderItem: item.orderItemId,\n                    sku: item.sku,\n                    qty: item.qtyToShip\n                });\n            });\n\n            data.orderId = formData['order_id'];\n            data.websiteId = formData.websiteId;\n            data = utils.serialize(utils.filterFormData(data));\n            data['form_key'] = window.FORM_KEY;\n\n            if (!this.sourceSelectionUrl || this.sourceSelectionUrl === 'undefined') {\n                return $.Deferred.resolve();\n            }\n\n            $('body').trigger('processStart');\n\n            $.ajax({\n                url: this.sourceSelectionUrl,\n                data: data,\n\n                /**\n                 * Success callback.\n                 *\n                 * @param {Object} response\n                 */\n                success: function (response) {\n                    var dataItems = this.source.get('data.items');\n\n                    _.each(dataItems, function (item) {\n                        if (response[item.orderItemId]) {\n                            this.source.set('data.items.' + item['record_id'] + '.sources', response[item.orderItemId]);\n                        }\n                    }.bind(this));\n                    this.source.trigger('reInitSources');\n                    this.source.set('data.sourceCodes', response.sourceCodes ? response.sourceCodes : []);\n                }.bind(this),\n\n                /**\n                 * Complete callback.\n                 */\n                complete: function () {\n                    $('body').trigger('processStop');\n                }\n            });\n        }\n    });\n});\n","Magento_InventoryShippingAdminUi/js/form/element/qty_to_deduct.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract',\n    'mageUtils'\n], function (Abstract, utils) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            sourceCode: null,\n            qtyAvailable: 0\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            var path,\n                qtyToShip,\n                isManageStock;\n\n            this._super();\n\n            //TODO: Is it right way?\n            path = utils.getPart(utils.getPart(this.parentScope, -2), -2);\n            qtyToShip = this.source.get(path + '.qtyToShip');\n            isManageStock = this.source.get(path + '.isManageStock');\n\n            this.validation['less-than-equals-to'] = isManageStock ? this.qtyAvailable : qtyToShip;\n\n            return this;\n        },\n\n        /**\n         * Toggle disabled state.\n         *\n         * @param {String} selected\n         */\n        toggleDisable: function (selected) {\n            this.disabled(selected ? selected.toString() !== this.sourceCode : !selected);\n        }\n    });\n});\n","Magento_InventoryShippingAdminUi/js/form/element/source_code.js":"define([\n    'underscore',\n    'Magento_Ui/js/form/element/select'\n], function (_, select) {\n    'use strict';\n\n    return select.extend({\n        /**\n         * @inheritdoc\n         */\n        setOptions: function (data) {\n            var result = this._super(data);\n\n            if (data.length === 1) {\n                this.value(data[0].value);\n            }\n\n            return result;\n        }\n    });\n});\n","Magento_InventoryShippingAdminUi/js/order/grid/cell/allocated-sources.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_InventoryShippingAdminUi/order/grid/cell/allocated-sources-cell.html',\n            itemsToDisplay: 5\n        },\n\n        /**\n         *\n         * @param {Array} record\n         * @returns {Array}\n         */\n        getTooltipData: function (record) {\n            return record[this.index];\n        },\n\n        /**\n         * @param {Object} record - Record object\n         * @returns {Array} Result array\n         */\n        getAllocatedSources: function (record) {\n            return this.getTooltipData(record).slice(0, this.itemsToDisplay);\n        }\n    });\n});\n","Amasty_MegaMenu/js/form/fields/submenu-type.js":"/**\n * Amasty MegaMenu Submenu Type Field\n */\n\ndefine([\n    'Magento_Ui/js/form/element/select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            activeLevel: 2,\n            listens: {\n                '${ $.provider }:data.hide_content': 'updateVisibility'\n            }\n        },\n\n        /**\n         * Submenu Type Field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            self.visible(!parseInt(self.source.data.hide_content));\n        },\n\n        /**\n         * Update Visibility method\n         *\n         * @params {String} value\n         */\n        updateVisibility: function (value) {\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            this.visible(!parseInt(value));\n        },\n\n        /**\n         * Validate Visibility method\n         */\n        validateVisibility: function () {\n            return !this.hidden;\n        }\n    });\n});\n","Amasty_MegaMenu/js/form/fields/error.js":"define([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            elementTmpl: 'Amasty_MegaMenu/form/error'\n        },\n\n        /**\n         * Subcategories Position Field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            self.visible(!self.hidden);\n        },\n    });\n});\n","Amasty_MegaMenu/js/form/fields/column-count.js":"/**\n * Amasty MegaMenu Column Count Field\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            activeLevel: 2,\n            listens: {\n                '${ $.provider }:data.hide_content': 'updateVisibility',\n                '${ $.provider }:data.submenu_type': 'updateType'\n            }\n        },\n\n        /**\n         * Column Count Field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            if (!parseInt(self.source.data.hide_content)) {\n                self.visible(!parseInt(self.source.data.submenu_type));\n            }\n        },\n\n        /**\n         * Update Visibility method\n         *\n         * @params {String} value\n         */\n        updateVisibility: function (value) {\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            if (parseInt(this.source.data.submenu_type)) {\n                return false;\n            }\n\n            this.visible(!parseInt(value));\n        },\n\n        /**\n         * Update Type method\n         *\n         * @params {String} value\n         */\n        updateType: function (value) {\n            var visibility = !parseInt(value);\n\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            if (parseInt(this.source.data.hide_content)) {\n                return false;\n            }\n\n            this.visible(visibility);\n        },\n\n        /**\n         * Validate Visibility method\n         */\n        validateVisibility: function () {\n            return !this.hidden;\n        }\n    });\n});\n","Amasty_MegaMenu/js/form/fields/hide-content.js":"/**\n * Amasty MegaMenu Hide Content Field\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (Component) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            activeLevel: 1,\n        },\n\n        /**\n         * Subcategories Position Field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            self.visible(self.validateVisibility());\n        },\n\n\n        /**\n         * Validate Visibility method\n         */\n        validateVisibility: function () {\n            return !this.hidden;\n        }\n    });\n});\n","Amasty_MegaMenu/js/form/fields/width-value.js":"/**\n * Amasty MegaMenu Width Value Field\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            listens: {\n                '${ $.provider }:data.hide_content': 'updateVisibility',\n                '${ $.provider }:data.width': 'updateType'\n            }\n        },\n\n        /**\n         * Width Value field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            self.visible(!parseInt(self.source.data.hide_content));\n        },\n\n        /**\n         * Update Visibility method\n         *\n         * @params {String} value\n         */\n        updateVisibility: function (value) {\n            if (!this.validateVisibility()) {\n                return false;\n            }\n\n            this.visible(!parseInt(value));\n        },\n\n        /**\n         * Update Type method\n         */\n        updateType: function () {\n            this.visible(this.validateVisibility());\n        },\n\n        /**\n         * Validate Visibility method\n         */\n        validateVisibility: function () {\n            return !this.hidden && this.source.data.width === '2';\n        }\n    });\n});\n","Amasty_MegaMenu/js/form/fields/width.js":"/**\n * Amasty MegaMenu Width Field\n */\n\ndefine([\n    'Magento_Ui/js/form/element/select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            activeLevel: 2,\n            listens: {\n                '${ $.provider }:data.hide_content': 'updateVisibility'\n            }\n        },\n\n        /**\n         * Subcategories Position Field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            self.visible(self.validateVisibility());\n        },\n\n        /**\n         * Update Visibility method\n         */\n        updateVisibility: function () {\n            this.visible(this.validateVisibility());\n        },\n\n        /**\n         * Validate Visibility method\n         */\n        validateVisibility: function () {\n            return !this.hidden && !parseInt(this.source.data.hide_content);\n        }\n    });\n});\n","Amasty_MegaMenu/js/form/fields/subcategories-position.js":"/**\n * Amasty MegaMenu Subcategories Position Field\n */\n\ndefine([\n    'Magento_Ui/js/form/element/select'\n], function (Select) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            activeLevel: 2,\n            listens: {\n                '${ $.provider }:data.hide_content': 'updateVisibility',\n                '${ $.provider }:data.submenu_type': 'updateVisibility'\n            }\n        },\n\n        /**\n         * Subcategories Position Field init method\n         */\n        initialize: function () {\n            var self = this;\n\n            self._super();\n\n            self.visible(self.validateVisibility());\n        },\n\n        /**\n         * Update Visibility method\n         */\n        updateVisibility: function () {\n            this.visible(this.validateVisibility());\n        },\n\n        /**\n         * Validate Visibility method\n         */\n        validateVisibility: function () {\n            return !this.hidden && !parseInt(this.source.data.hide_content) && (parseInt(this.source.data.submenu_type) || parseInt(this.level) > this.activeLevel);\n        }\n    });\n});\n","Magento_AdminNotification/toolbar_entry.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'jquery/ui',\n    'domReady!'\n], function ($) {\n    'use strict';\n\n    /**\n     * Mark notification as read via AJAX call.\n     *\n     * @param {String} notificationId\n     */\n    var markNotificationAsRead = function (notificationId) {\n            var requestUrl = $('.notifications-wrapper .admin__action-dropdown-menu').attr('data-mark-as-read-url');\n\n            $.ajax({\n                url: requestUrl,\n                type: 'POST',\n                dataType: 'json',\n                data: {\n                    id: notificationId\n                },\n                showLoader: false\n            });\n        },\n        notificationCount = $('.notifications-wrapper').attr('data-notification-count'),\n\n        /**\n         * Remove notification from the list.\n         *\n         * @param {jQuery} notificationEntry\n         */\n        removeNotificationFromList = function (notificationEntry) {\n            var notificationIcon, actionElement;\n\n            notificationEntry.remove();\n            notificationCount--;\n            $('.notifications-wrapper').attr('data-notification-count', notificationCount);\n\n            if (notificationCount == 0) {// eslint-disable-line eqeqeq\n                // Change appearance of the bubble and its behavior when the last notification is removed\n                $('.notifications-wrapper .admin__action-dropdown-menu').remove();\n                notificationIcon = $('.notifications-wrapper .notifications-icon');\n                notificationIcon.removeAttr('data-toggle');\n                notificationIcon.off('click.dropdown');\n                $('.notifications-action .notifications-counter').text('').hide();\n            } else {\n                // Change top counter only for allowable range\n                if (notificationCount <= 99) {\n                    $('.notifications-action .notifications-counter').text(notificationCount);\n                }\n                $('.notifications-entry-last .notifications-counter').text(notificationCount);\n                // Modify caption of the 'See All' link\n                actionElement = $('.notifications-wrapper .admin__action-dropdown-menu .last .action-more');\n                actionElement.text(actionElement.text().replace(/\\d+/, notificationCount));\n            }\n        },\n\n        /**\n         * Show notification details.\n         *\n         * @param {jQuery} notificationEntry\n         */\n        showNotificationDetails = function (notificationEntry) {\n            var notificationDescription = notificationEntry.find('.notifications-entry-description'),\n                notificationDescriptionEnd = notificationEntry.find('.notifications-entry-description-end');\n\n            if (notificationDescriptionEnd.length > 0) {\n                notificationDescriptionEnd.addClass('_show');\n            }\n\n            if (notificationDescription.hasClass('_cutted')) {\n                notificationDescription.removeClass('_cutted');\n            }\n        };\n\n    // Show notification description when corresponding item is clicked\n    $('.notifications-wrapper .admin__action-dropdown-menu .notifications-entry').on(\n        'click.showNotification',\n        function (event) {\n            // hide notification dropdown\n            $('.notifications-wrapper .notifications-icon').trigger('click.dropdown');\n\n            showNotificationDetails($(this));\n            event.stopPropagation();\n        }\n    );\n\n    // Remove corresponding notification from the list and mark it as read\n    $('.notifications-close').on('click.removeNotification', function (event) {\n        var notificationEntry = $(this).closest('.notifications-entry'),\n            notificationId = notificationEntry.attr('data-notification-id');\n\n        markNotificationAsRead(notificationId);\n        removeNotificationFromList(notificationEntry);\n\n        // Checking for last unread notification to hide dropdown\n        if (notificationCount == 0) {// eslint-disable-line eqeqeq\n            $('.notifications-wrapper').removeClass('active')\n                .find('.notifications-action')\n                .removeAttr('data-toggle')\n                .off('click.dropdown');\n        }\n        event.stopPropagation();\n    });\n\n    // Hide notifications bubble\n    if (notificationCount == 0) {// eslint-disable-line eqeqeq\n        $('.notifications-action .notifications-counter').hide();\n    } else {\n        $('.notifications-action .notifications-counter').show();\n    }\n});\n","Magento_AdminNotification/js/grid/listing.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/grid/listing',\n    'Magento_Ui/js/lib/spinner',\n    'jquery'\n], function (Listing, loader, $) {\n    'use strict';\n\n    return Listing.extend({\n        defaults: {\n            imports: {\n                totalRecords: '${ $.provider }:data.totalRecords'\n            },\n            selectors: {\n                collapsible: '.message-system-collapsible',\n                messages: '.message-system'\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .track({\n                    totalRecords: 0\n                });\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        showLoader: function () {\n            if (!this.source.firstLoad) {\n                this.fixLoaderHeight();\n                this._super();\n            }\n        },\n\n        /**\n         * Calculates loader height\n         *\n         * @param {Boolean} [closed]\n         */\n        fixLoaderHeight: function (closed) {\n            var $messagesBlock = $(this.selectors.messages),\n                $collapsibleBlock = $(this.selectors.collapsible),\n                resultHeight = 0;\n\n            if ($messagesBlock.length) {\n                resultHeight += $messagesBlock.outerHeight();\n            }\n\n            if ($collapsibleBlock.length && $collapsibleBlock.is(':visible') && !closed) {\n                resultHeight += $collapsibleBlock.outerHeight();\n            }\n\n            loader.get(this.name).height(resultHeight);\n        }\n    });\n});\n","Magento_AdminNotification/js/grid/columns/message.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/grid/columns/column',\n    'underscore'\n], function (Column, _) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_AdminNotification/grid/cells/message',\n            messageIndex: 'text',\n            fieldClass: {\n                message: true,\n                'message-warning': false,\n                'message-progress': false,\n                'message-success': false,\n                'message-error': false\n            },\n            statusMap: {\n                0: 'info',\n                1: 'progress',\n                2: 'success',\n                3: 'error'\n            }\n        },\n\n        /** @inheritdoc */\n        getLabel: function (record) {\n            return record[this.messageIndex];\n        },\n\n        /**\n         * Proxy to getLabel function with UnsanitizedHtml suffix\n         *\n         * @param {Object} record\n         * @returns {String}\n         */\n        getLabelUnsanitizedHtml: function (record) {\n            return this.getLabel(record);\n        },\n\n        /** @inheritdoc */\n        getFieldClass: function ($row) {\n            var status = this.statusMap[$row.status] || 'warning',\n                result = {};\n\n            result['message-' + status] = true;\n            result = _.extend({}, this.fieldClass, result);\n\n            return result;\n        }\n    });\n});\n","Magento_AdminNotification/js/system/messages/popup.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/modal'\n], function ($, modal) {\n    'use strict';\n\n    return function (data, element) {\n\n        if (modal.modal) {\n            modal.modal.html($(element).html());\n        } else {\n            modal.modal = $(element).modal({\n                modalClass: data.class,\n                type: 'popup',\n                buttons: []\n            });\n        }\n\n        modal.modal.modal('openModal');\n    };\n});\n","Magento_AdminNotification/system/notification.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'mage/template',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal'\n], function ($, mageTemplate) {\n    'use strict';\n\n    $.widget('mage.systemMessageDialog', $.mage.modal, {\n        options: {\n            modalClass: 'modal-system-messages',\n            systemMessageTemplate:\n                '<% _.each(data.items, function(item) { %>' +\n                    '<li class=\"message message-warning' +\n                        '<% if (item.severity == 1) { %>error<% } else { %>warning<% } %>\">' +\n                        '<%= item.text %>' +\n                    '</li>' +\n                '<% }); %>'\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this.options.title = $('#message-system-all').attr('title');\n            this._super();\n        },\n\n        /** @inheritdoc */\n        openModal: function (severity) {\n            var superMethod = $.proxy(this._super, this);\n\n            $.ajax({\n                url: this.options.ajaxUrl,\n                type: 'GET',\n                data: {\n                    severity: severity\n                }\n            }).done($.proxy(function (data) {\n                var tmpl = mageTemplate(this.options.systemMessageTemplate, {\n                    data: {\n                        items: data\n                    }\n                });\n\n                tmpl = $(tmpl);\n\n                this.element.html(\n                    $('<ul></ul>', {\n                        'class': 'message-system-list'\n                    }).append(tmpl)\n                ).trigger('contentUpdated');\n\n                superMethod();\n            }, this));\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        closeModal: function () {\n            this._super();\n        }\n    });\n\n    $(function () {\n        $('#system_messages .message-system-short .error').on('click', function () {\n            $('#message-system-all').systemMessageDialog('openModal', 1);\n        });\n\n        $('#system_messages .message-system-short .warning').on('click', function () {\n            $('#message-system-all').systemMessageDialog('openModal', 2);\n        });\n    });\n\n    return $.mage.systemMessageDialog;\n});\n","Magento_BannerPageBuilder/js/content-type/dynamic-block/preview.js":"/*eslint-disable */\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\ndefine([\"mage/translate\", \"Magento_PageBuilder/js/content-type-menu/hide-show-option\", \"Magento_PageBuilder/js/content-type/block/preview\"], function (_translate, _hideShowOption, _preview) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * @api\n   */\n  var Preview = /*#__PURE__*/function (_preview2) {\n    \"use strict\";\n\n    _inheritsLoose(Preview, _preview2);\n\n    function Preview() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _preview2.call.apply(_preview2, [this].concat(args)) || this;\n      _this.messages = {\n        NOT_SELECTED: (0, _translate)(\"Empty Dynamic Block\"),\n        UNKNOWN_ERROR: (0, _translate)(\"An unknown error occurred. Please try again.\")\n      };\n      return _this;\n    }\n\n    var _proto = Preview.prototype;\n\n    /**\n     * @inheritDoc\n     */\n    _proto.processBlockData = function processBlockData(data) {\n      // Only load if something changed\n      this.displayPreviewPlaceholder(data, \"block_id\");\n\n      if (data.block_id && data.template.length !== 0) {\n        this.processRequest(data, \"block_id\", \"name\");\n      }\n    }\n    /**\n     * Return an array of options\n     *\n     * @returns {OptionsInterface}\n     */\n    ;\n\n    _proto.retrieveOptions = function retrieveOptions() {\n      var options = _preview2.prototype.retrieveOptions.call(this);\n\n      options.hideShow = new _hideShowOption({\n        preview: this,\n        icon: _hideShowOption.showIcon,\n        title: _hideShowOption.showText,\n        action: this.onOptionVisibilityToggle,\n        classes: [\"hide-show-content-type\"],\n        sort: 40\n      });\n      return options;\n    };\n\n    return Preview;\n  }(_preview);\n\n  return Preview;\n});\n//# sourceMappingURL=preview.js.map","Magento_BannerPageBuilder/js/content-type/dynamic-block/mass-converter/widget-directive.js":"/*eslint-disable */\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\ndefine([\"Magento_PageBuilder/js/mass-converter/widget-directive-abstract\"], function (_widgetDirectiveAbstract) {\n  /**\n   * Copyright \u00a9 Magento, Inc. All rights reserved.\n   * See COPYING.txt for license details.\n   */\n\n  /**\n   * Enables the settings of the content type to be stored as a widget directive.\n   *\n   * @api\n   */\n  var WidgetDirective = /*#__PURE__*/function (_widgetDirectiveAbstr) {\n    \"use strict\";\n\n    _inheritsLoose(WidgetDirective, _widgetDirectiveAbstr);\n\n    function WidgetDirective() {\n      return _widgetDirectiveAbstr.apply(this, arguments) || this;\n    }\n\n    var _proto = WidgetDirective.prototype;\n\n    /**\n     * Convert value to internal format\n     *\n     * @param {object} data\n     * @param {object} config\n     * @returns {object}\n     */\n    _proto.fromDom = function fromDom(data, config) {\n      var attributes = _widgetDirectiveAbstr.prototype.fromDom.call(this, data, config);\n\n      data.template = attributes.template;\n      data.block_id = attributes.banner_ids;\n      return data;\n    }\n    /**\n     * Convert value to knockout format\n     *\n     * @param {object} data\n     * @param {object} config\n     * @returns {object}\n     */\n    ;\n\n    _proto.toDom = function toDom(data, config) {\n      var attributes = {\n        type: \"Magento\\\\Banner\\\\Block\\\\Widget\\\\Banner\",\n        display_mode: \"fixed\",\n        rotate: \"\",\n        template: data.template,\n        banner_ids: data.block_id,\n        unique_id: data.block_id,\n        type_name: \"Dynamic Blocks Rotator\"\n      };\n\n      if (!attributes.banner_ids || !attributes.template) {\n        return data;\n      }\n\n      data[config.html_variable] = this.buildDirective(attributes);\n      return data;\n    };\n\n    return WidgetDirective;\n  }(_widgetDirectiveAbstract);\n\n  return WidgetDirective;\n});\n//# sourceMappingURL=widget-directive.js.map","Magento_BannerPageBuilder/js/form/element/dynamic-block-chooser.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_PageBuilder/js/form/element/block-chooser',\n    'mage/translate'\n], function (BlockChooser, $t) {\n    'use strict';\n\n    return BlockChooser.extend({\n        defaults: {\n            metaRowIndex: 1\n        },\n\n        /**\n         * Retrieves the classes that should be applied to the next created meta row\n         * @return {String}\n         */\n        getNextMetaRowClasses: function () {\n            return 'data-row' + (this.metaRowIndex++ % 2 === 0 ? '' : ' _odd-row');\n        },\n\n        /**\n         * Determines the status label for the currently loaded block\n         *\n         * @returns {String}\n         */\n        getStatusLabel: function () {\n            return this.meta()['is_enabled'] === '1' ? $t('Enabled') : $t('Disabled');\n        },\n\n        /**\n         * Generates the customer segments display value\n         * @return {Array}\n         */\n        getCustomerSegments: function () {\n            return this.meta()['customer_segments'].length > 0\n                ? this.meta()['customer_segments']\n                : [$t('All Segments')];\n        },\n\n        /**\n         * Generates the catalog rules display value\n         * @return {Array}\n         */\n        getRelatedCatalogRules: function () {\n            return this.meta()['related_catalog_rules'];\n        },\n\n        /**\n         * Generates the cart rules display value\n         * @return {Array}\n         */\n        getRelatedCartRules: function () {\n            return this.meta()['related_cart_rules'];\n        }\n    });\n});\n","Magento_BannerPageBuilder/ts/babel/plugin-amd-to-magento-amd/ast-utils.js":"/* jscs:disable */\n/* eslint-disable */\n\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.extractDependencyAndFactory = extractDependencyAndFactory;\nexports.findAmdModule = findAmdModule;\nexports.extractDependencyMap = extractDependencyMap;\nexports.removeExportsDependency = removeExportsDependency;\nexports.isEsModulePropertyDefinition = isEsModulePropertyDefinition;\nexports.isObjectAssignment = isObjectAssignment;\nexports.isVoidExpression = isVoidExpression;\nexports.isInteropRequireCall = isInteropRequireCall;\nexports.isInteropRequireDefinition = isInteropRequireDefinition;\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar INTEROP_FUNCTION_NAME = '_interopRequire';\n\nvar findExpression = function findExpression(path) {\n    if (!t.isExpressionStatement(path.node)) {\n        return false;\n    }\n\n    return path.get('expression');\n};\n\nvar isObjectProperty = function isObjectProperty(path, objectName, propertyName) {\n    return t.isMemberExpression(path) && path.get('object').isIdentifier(t.identifier(objectName)) && path.get('property').isIdentifier(t.identifier(propertyName));\n};\n\nfunction extractDependencyAndFactory(path) {\n    var args = path.node.arguments;\n    var dependencies = path.get(\"arguments.\" + (args.length - 2));\n    var factory = path.get(\"arguments.\" + (args.length - 1));\n    return {\n        dependencies: dependencies,\n        factory: factory\n    };\n}\n\nfunction findAmdModule(path) {\n    if (!path.parentPath.isProgram()) {\n        return false;\n    }\n\n    var expression = findExpression(path);\n\n    if (!expression || !t.isCallExpression(expression) || !t.isIdentifier(expression.node.callee, {\n        name: 'define'\n    })) {\n        return false;\n    }\n\n    var _extractDependencyAnd = extractDependencyAndFactory(expression),\n        dependencies = _extractDependencyAnd.dependencies,\n        factory = _extractDependencyAnd.factory;\n\n    if (dependencies && factory) {\n        return expression;\n    }\n\n    return false;\n}\n\nfunction extractDependencyMap(path) {\n    var dependencyMap = {};\n\n    var _extractDependencyAnd2 = extractDependencyAndFactory(path),\n        dependencies = _extractDependencyAnd2.dependencies,\n        factory = _extractDependencyAnd2.factory;\n\n    var dependencyList = dependencies.node.elements;\n    var factoryParams = factory.node.params;\n    dependencyList.forEach(function (dependency, index) {\n        if (factoryParams[index]) {\n            dependencyMap[dependency.value] = factoryParams[index];\n        }\n    });\n    return dependencyMap;\n}\n\nfunction removeExportsDependency(path) {\n    var _extractDependencyAnd3 = extractDependencyAndFactory(path),\n        dependencies = _extractDependencyAnd3.dependencies,\n        factory = _extractDependencyAnd3.factory;\n\n    var dependencyMap = extractDependencyMap(path);\n\n    if (!dependencyMap.exports) {\n        return;\n    }\n\n    dependencies.node.elements = dependencies.node.elements.filter(function (item) {\n        return !t.isStringLiteral(item, {\n            value: 'exports'\n        });\n    });\n    factory.node.params = factory.node.params.filter(function (item) {\n        return !t.isIdentifier(item, dependencyMap.exports);\n    });\n}\n\nfunction isEsModulePropertyDefinition(path, scope) {\n    var callExpression = findExpression(path);\n    var callee = callExpression.get('callee');\n    var callArguments = callExpression.node.arguments;\n    var isObjectDefinePropertyCall = isObjectProperty(callee, 'Object', 'defineProperty');\n\n    if (isObjectDefinePropertyCall) {\n        var isEsModulePropertyInArguments = t.isStringLiteral(callArguments[1], {\n            value: '__esModule'\n        });\n        var isInScope = t.isIdentifier(callArguments[0], scope);\n        return isEsModulePropertyInArguments && isInScope;\n    }\n\n    return false;\n}\n\nfunction isObjectAssignment(path, objectId) {\n    var expression = t.isAssignmentExpression(path) ? path : findExpression(path);\n    var isMemberAssignment = t.isAssignmentExpression(expression) && t.isMemberExpression(expression.get('left'));\n\n    if (isMemberAssignment) {\n        return t.isNodesEquivalent(expression.get('left.object').node, objectId);\n    }\n\n    return false;\n}\n\nfunction isVoidExpression(path) {\n    return t.isUnaryExpression(path) && path.node.operator === 'void';\n}\n\nfunction isInteropRequireCall(path) {\n    var expression = findExpression(path);\n    var isAssignmentCall = t.isAssignmentExpression(expression) && t.isCallExpression(expression.get('right'));\n\n    if (isAssignmentCall) {\n        var callee = expression.get('right.callee');\n        return callee.isIdentifier() && callee.node.name.indexOf(INTEROP_FUNCTION_NAME) === 0;\n    }\n\n    return false;\n}\n\nfunction isInteropRequireDefinition(path) {\n    if (t.isFunction(path) && path.node.id) {\n        return path.node.id.name.indexOf(INTEROP_FUNCTION_NAME) === 0;\n    }\n\n    return false;\n}","Magento_BannerPageBuilder/ts/babel/plugin-amd-to-magento-amd/index.js":"/* jscs:disable */\n/* eslint-disable */\n\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = _default;\n\nvar _astUtils = require(\"./ast-utils\");\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar replaceExportAssignment = function replaceExportAssignment(path, state) {\n    var property = path.get('left.property');\n    var expression = path.get('right');\n    path.remove();\n\n    if ((0, _astUtils.isVoidExpression)(expression)) {\n        return;\n    }\n\n    if (property.isIdentifier({\n        name: 'default'\n    })) {\n        state.defaultExport = expression.node;\n        return;\n    }\n\n    state.exports.push(t.objectProperty(property.node, expression.node));\n};\n\nvar memberExpressionVisitor = {\n    MemberExpression: function MemberExpression(path, state) {\n        var matchedDependencies = state.dependencies.filter(function (item) {\n            return path.get('object').isIdentifier({\n                name: item.name\n            });\n        });\n        var isDefaultDependency = matchedDependencies.length === 1 && path.get('property').isIdentifier({\n            name: 'default'\n        });\n\n        if (isDefaultDependency) {\n            path.replaceWith(matchedDependencies[0]);\n        }\n    }\n};\nvar functionBodyVisitor = {\n    ExpressionStatement: function ExpressionStatement(path, state) {\n        if ((0, _astUtils.isEsModulePropertyDefinition)(path, state.scope)) {\n            path.remove();\n        }\n\n        if ((0, _astUtils.isObjectAssignment)(path, state.scope)) {\n            replaceExportAssignment(path.get('expression'), state);\n        }\n\n        if ((0, _astUtils.isInteropRequireCall)(path)) {\n            path.remove();\n        }\n    },\n    Function: function Function(path, state) {\n        if ((0, _astUtils.isInteropRequireDefinition)(path)) {\n            path.remove();\n        }\n\n        path.traverse(memberExpressionVisitor, state);\n    },\n    ClassMethod: function ClassMethod(path, state) {\n        path.traverse(memberExpressionVisitor, state);\n    },\n    DirectiveLiteral: function DirectiveLiteral(path) {\n        if (path.node.value === 'use strict') {\n            path.parentPath.remove();\n        }\n    },\n    MemberExpression: memberExpressionVisitor.MemberExpression\n};\n\nvar processAmdDefinition = function processAmdDefinition(path) {\n    var _extractDependencyAnd = (0, _astUtils.extractDependencyAndFactory)(path),\n        factory = _extractDependencyAnd.factory;\n\n    var dependencyMap = (0, _astUtils.extractDependencyMap)(path);\n\n    if (dependencyMap.exports) {\n        (0, _astUtils.removeExportsDependency)(path);\n        var state = {\n            scope: dependencyMap.exports,\n            dependencies: Object.values(dependencyMap),\n            exports: []\n        };\n        factory.traverse(functionBodyVisitor, state);\n        var returnStatement = t.objectExpression(state.exports);\n\n        if (state.defaultExport) {\n            returnStatement = state.defaultExport;\n\n            if (state.exports.length > 0) {\n                returnStatement = t.callExpression(t.memberExpression(t.identifier('Object'), t.identifier('assign')), [state.defaultExport, t.objectExpression(state.exports)]);\n            }\n        }\n\n        factory.get('body').pushContainer('body', t.returnStatement(returnStatement));\n    }\n};\n\nvar programVisitor = {\n    ExpressionStatement: function ExpressionStatement(path) {\n        var amdModule = (0, _astUtils.findAmdModule)(path);\n\n        if (amdModule) {\n            processAmdDefinition(amdModule);\n        }\n    }\n};\n\nfunction _default() {\n    return {\n        visitor: {\n            Program: {\n                exit: function exit(path) {\n                    path.traverse(programVisitor);\n                }\n            }\n        }\n    };\n}","Magento_BannerPageBuilder/ts/babel/plugin-resolve-magento-imports/index.js":"/* jscs:disable */\n/* eslint-disable */\n\n/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nvar path = require('path');\n\n/**\n * Convert the relative path imports within TypeScript into absolute paths with pre-fixed module name\n *\n * @returns {{visitor: {ImportDeclaration: visitor.ImportDeclaration}}}\n */\nmodule.exports = function () {\n    'use strict';\n\n    return {\n        visitor: {\n            /**\n             * Convert ../../utils/util import into Magento_Module/js/utils/util\n             *\n             * @param {Object} importPath\n             * @param {Object} state\n             * @constructor\n             */\n            ImportDeclaration: function (importPath, state) {\n                var importExpression = importPath.node.source.value;\n\n                if (!state.opts.prefix) {\n                    throw Error('Prefix must be defined');\n                }\n\n                // Is the file being imported from another directory?\n                if (!path.isAbsolute(importExpression) && importExpression.includes('./')) {\n                    importPath.node.source.value = path.resolve(\n                        path.dirname(state.file.opts.filenameRelative),\n                        importExpression\n                    ).replace(\n                        process.cwd(),\n                        state.opts.prefix.replace(/\\/+$/, '')\n                    );\n                }\n            }\n        }\n    };\n};\n","Magento_CurrencySymbol/js/symbols-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/mage'\n], function ($) {\n    'use strict';\n\n    return function (config, element) {\n        $(element)\n            .mage('form')\n            .mage('validation');\n\n        /**\n         * Toggle the field to use the default value\n         *\n         * @param {String} code\n         * @param {String} value\n         */\n        function toggleUseDefault(code, value) {\n            var checkbox = $('#custom_currency_symbol_inherit' + code),\n                input = $('#custom_currency_symbol' + code);\n\n            if (checkbox.is(':checked')) {\n                input.val(value);\n                input.prop('disabled', true);\n            } else {\n                input.prop('disabled', false);\n            }\n        }\n\n        window.toggleUseDefault = toggleUseDefault;\n    };\n});\n","Magento_LoginAsCustomerAdminUi/js/confirmation-popup.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'Magento_Ui/js/modal/confirm',\n    'jquery',\n    'ko',\n    'mage/translate',\n    'mage/template',\n    'underscore',\n    'Magento_Ui/js/modal/alert',\n    'text!Magento_LoginAsCustomerAdminUi/template/confirmation-popup/store-view-ptions.html'\n], function (Component, confirm, $, ko, $t, template, _, alert, selectTpl) {\n\n    'use strict';\n\n    return Component.extend({\n        /**\n         * Initialize Component\n         */\n        initialize: function () {\n            var self = this,\n                content;\n\n            this._super();\n\n            content = '<div class=\"message message-warning\">' + self.content + '</div>';\n\n            if (self.showStoreViewOptions) {\n                content = template(\n                    selectTpl,\n                    {\n                        data: {\n                            showStoreViewOptions: self.showStoreViewOptions,\n                            storeViewOptions: self.storeViewOptions,\n                            label: $t('Store')\n                        }\n                    }) + content;\n            }\n\n            /**\n             * Confirmation popup\n             *\n             * @param {String} url\n             * @returns {Boolean}\n             */\n            window.lacConfirmationPopup = function (url) {\n                confirm({\n                    title: self.title,\n                    content: content,\n                    modalClass: 'confirm lac-confirm',\n                    actions: {\n                        /**\n                         * Confirm action.\n                         */\n                        confirm: function () {\n                            var storeId = $('#lac-confirmation-popup-store-id').val(),\n                                formKey = $('input[name=\"form_key\"]').val(),\n                                params = {};\n\n                            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                            if (storeId) {\n                                params.store_id = storeId;\n                            }\n\n                            if (formKey) {\n                                params.form_key = formKey;\n                            }\n                            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n\n                            $.ajax({\n                                url: url,\n                                type: 'POST',\n                                dataType: 'json',\n                                data: params,\n                                showLoader: true,\n\n                                /**\n                                 * Open redirect URL in new window, or show messages if they are present\n                                 *\n                                 * @param {Object} data\n                                 */\n                                success: function (data) {\n                                    var messages = data.messages || [];\n\n                                    if (data.message) {\n                                        messages.push(data.message);\n                                    }\n\n                                    if (data.redirectUrl) {\n                                        window.open(data.redirectUrl);\n                                    } else if (messages.length) {\n                                        messages = messages.map(function (message) {\n                                            return _.escape(message);\n                                        });\n\n                                        alert({\n                                            content: messages.join('<br>')\n                                        });\n                                    }\n                                },\n\n                                /**\n                                 * Show XHR response text\n                                 *\n                                 * @param {Object} jqXHR\n                                 */\n                                error: function (jqXHR) {\n                                    alert({\n                                        content: _.escape(jqXHR.responseText)\n                                    });\n                                }\n                            });\n                        }\n                    },\n                    buttons: [{\n                        text: $t('Cancel'),\n                        class: 'action-secondary action-dismiss',\n\n                        /**\n                         * Click handler.\n                         */\n                        click: function (event) {\n                            this.closeModal(event);\n                        }\n                    }, {\n                        text: $t('Login as Customer'),\n                        class: 'action-primary action-accept',\n\n                        /**\n                         * Click handler.\n                         */\n                        click: function (event) {\n                            this.closeModal(event, true);\n                        }\n                    }]\n                });\n\n                return false;\n            };\n        }\n    });\n});\n","Magento_Marketplace/default.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return function (configFromPage) {\n        var url = configFromPage.url;\n\n        $.ajax({\n            method: 'GET',\n            url: url\n        }).done(function (data) {\n            $('div[data-role=partners-block]').html(data);\n        });\n    };\n});\n","Magento_Sitemap/js/form-submit-loader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return function (data, element) {\n\n        $(element).on('save', function () {\n            if ($(this).valid()) {\n                $('body').trigger('processStart');\n            }\n        });\n    };\n});\n","Amasty_ShopbyPage/js/selection.js":"define([\n    'prototype',\n    'Magento_Ui/js/modal/alert',\n], function (pr, alert) {\n    \"use strict\";\n    return {\n        loadUrl: null,\n        addUrl: null,\n        counter: 0,\n        init: function (loadUrl, addUrl, counter) {\n            loadUrl = loadUrl + (loadUrl.match(new RegExp('\\\\?')) ? '&isAjax=true' : '?isAjax=true');\n            addUrl = addUrl + (addUrl.match(new RegExp('\\\\?')) ? '&isAjax=true' : '?isAjax=true');\n            this.loadUrl = loadUrl;\n            this.addUrl = addUrl;\n            this.counter = counter;\n        },\n\n        load: function (areaId, idx, id) {\n            new Ajax.Request(this.loadUrl, {\n                parameters: {id: id, idx: idx},\n                loaderArea: $(areaId),\n                onSuccess: function (transport) {\n                    try {\n                        if (transport.responseText.isJSON()) {\n                            var response = transport.responseText.evalJSON();\n                            if (response.error) {\n                                alert({\n                                    content: response.message\n                                });\n                            }\n                            if (response.ajaxExpired && response.ajaxRedirect) {\n                                setLocation(response.ajaxRedirect);\n                            }\n                        } else {\n                            $(areaId).update(transport.responseText);\n                        }\n                    } catch (e) {\n                        $(areaId).update(transport.responseText);\n                    }\n                }\n            });\n        },\n\n        add: function (areaId, id) {\n            new Ajax.Request(this.addUrl, {\n                parameters: {\n                    id: id,\n                    counter: this.counter\n                },\n                onSuccess: function (transport) {\n                    try {\n                        if (transport.responseText.isJSON()) {\n                            var response = transport.responseText.evalJSON();\n                            if (response.error) {\n                                alert({\n                                    content: response.message\n                                });\n                            }\n                            if (response.ajaxExpired && response.ajaxRedirect) {\n                                setLocation(response.ajaxRedirect);\n                            }\n\n                            if (response.html) {\n                                $(areaId).insert({\n                                    'before': response.html\n                                });\n                                this.counter++;\n                            }\n                        }\n                    } catch (e) {\n                        $(areaId).insert({\n                            'before': transport.responseText\n                        });\n                    }\n                }.bind(this)\n            });\n        },\n\n        remove: function (areaId) {\n            $(areaId).remove();\n        }\n    };\n});\n","Amasty_Promo/js/utils.js":"/**\n * Utils\n */\n\ndefine([\n    'underscore'\n], function (_) {\n    'use strict';\n\n    return {\n        types: ['configurable', 'grouped', 'bundle'],\n\n        /**\n         * @param {Object} record\n         * @returns {Boolean}\n         */\n        isConfigurable: function (record) {\n            return _.contains(this.types, record['type_id']) || +record['has_options'] === 1;\n        }\n    };\n});\n","Amasty_Promo/js/form.js":"define([\n    'jquery',\n    'uiRegistry'\n], function ($, registry) {\n    var ampromoForm = {\n        update: function (type) {\n            var action = '',\n                ruleId = registry.get('sales_rule_form.sales_rule_form.conditions.conditions_apply_to.html_content').source.data.rule_id ?? '',\n                actionFieldSet = $('#' + type +'rule_actions_fieldset_'+ruleId).parent()\n\n            this.resetFields(type);\n            window.amPromoHide = 0;\n\n            actionFieldSet.show();\n            if (typeof window.amRulesHide !=\"undefined\" && window.amRulesHide == 1) {\n                actionFieldSet.hide();\n            }\n\n            var selector = $('[data-index=\"simple_action\"] select');\n            if (selector.length) {\n                if (type !== 'sales_rule_form') {\n                    action = selector[1] ? selector[1].value : selector[0].value ? selector[0].value : undefined;\n                } else {\n                    action = selector.val();\n                }\n            }\n\n            if (!action) {\n                action = 'by_percent';\n            }\n\n            if (action.match(/^ampromo/)) {\n                this.hideFields(['simple_free_shipping', 'apply_to_shipping'], type);\n            }\n\n            this.renameRulesSetting(action);\n            this.hideTabs();\n            switch (action) {\n                case 'ampromo_cart':\n                    actionFieldSet.hide();\n                    window.amPromoHide = 1;\n\n                    this.hideFields(['discount_qty', 'discount_step'], type);\n                    this.showFields(['ampromorule[sku]', 'ampromorule[type]', 'ampromorule[apply_tax]', 'ampromorule[apply_shipping]'], type);\n                    this.showPromoItemPriceTab();\n                    break;\n                case 'ampromo_items':\n                    this.showFields(['ampromorule[sku]', 'ampromorule[type]', 'ampromorule[apply_tax]', 'ampromorule[apply_shipping]'], type);\n                    this.showPromoItemPriceTab();\n                    break;\n                case 'ampromo_product':\n                    this.showFields(['ampromorule[apply_tax]', 'ampromorule[apply_shipping]'], type);\n                    this.showPromoItemPriceTab();\n                    break;\n                case 'ampromo_spent':\n                    this.showFields(['ampromorule[sku]', 'ampromorule[type]', 'ampromorule[apply_tax]', 'ampromorule[apply_shipping]'], type);\n                    this.showPromoItemPriceTab();\n                    break;\n                case 'ampromo_eachn':\n                    this.showFields(['ampromorule[sku]', 'ampromorule[type]', 'ampromorule[apply_tax]', 'ampromorule[apply_shipping]'], type);\n                    this.showPromoItemPriceTab();\n                    break;\n            }\n        },\n        showPromoItemPriceTab: function () {\n            $('[data-index=ampromorule_items_price]').show();\n        },\n\n        hidePromoItemPriceTab: function () {\n            $('[data-index=ampromorule_items_price]').hide();\n        },\n\n        resetFields: function (type) {\n            this.showFields([\n                'discount_qty', 'discount_step', 'apply_to_shipping', 'simple_free_shipping'\n            ], type);\n            this.hideFields(['ampromorule[sku]', 'ampromorule[type]', 'ampromorule[apply_tax]', 'ampromorule[apply_shipping]'], type);\n        },\n\n        hideFields: function (names, type) {\n            return this.toggleFields('hide', names, type);\n        },\n\n        showFields: function (names, type) {\n            return this.toggleFields('show', names, type);\n        },\n\n        addPrefix: function (names, type) {\n            for (var i = 0; i < names.length; i++) {\n                names[i] = type + '.' + type + '.' + 'actions.' + names[i];\n            }\n\n            return names;\n        },\n\n        toggleFields: function (method, names, type) {\n            registry.get(this.addPrefix(names, type), function () {\n                for (var i = 0; i < arguments.length; i++) {\n                    arguments[i][method]();\n                }\n            });\n        },\n\n        /**\n         *\n         * @param action\n         */\n        renameRulesSetting: function (action) {\n            var discountStep = $('[data-index=\"discount_step\"] label span'),\n                discountAmount = $('[data-index=\"discount_amount\"] label span');\n\n            switch (action) {\n                case 'ampromo_eachn':\n                    discountStep.text($.mage.__(\"Each N-th\"));\n                    discountAmount.text($.mage.__(\"Number Of Gift Items\"));\n                    break;\n                case 'ampromo_cart':\n                case 'ampromo_items':\n                case 'ampromo_product':\n                case 'ampromo_spent':\n                    discountAmount.text($.mage.__(\"Number Of Gift Items\"));\n                    break;\n                default:\n                    discountAmount.text($.mage.__(\"Discount Amount\"));\n                    discountStep.text($.mage.__(\"Discount Qty Step (Buy X)\"));\n                    break;\n            }\n        },\n        \n        hideTabs: function () {\n            this.hidePromoItemPriceTab();\n        }\n    };\n\n    return ampromoForm;\n});\n","Amasty_Promo/js/form_script.js":"require([\n    'jquery',\n    'Amasty_Promo/js/form',\n    'uiRegistry',\n    'Magento_Ui/js/lib/view/utils/async',\n    'Magento_Ui/js/modal/modal'\n], function ($, form, registry, async) {\n    var types = [\n        'sales_rule_form',\n        'salesrulestaging_upcoming_form',\n        'salesrulestaging_update_remove_form',\n        'salesrulestaging_update_form'\n    ];\n    async.async({selector: '[data-index=\"rule_information\"]'}, function () {\n        $('[data-index=\"actions\"] .fieldset-wrapper-title').click();\n        types.map(function (type) {\n            form.update(type);\n        });\n    });\n\n    typesFormUpdate();\n\n    $('body').on(\n        {\n            'click': function () {\n                typesFormUpdate();\n            }\n        },\n        '.schedule-actions a.action-menu-item, #staging_update_new'\n    );\n\n    function typesFormUpdate()\n    {\n        types.map(function (type) {\n            formUpdate(type);\n        });\n    }\n\n    function formUpdate(type)\n    {\n        async.async('[data-index=\"simple_action\"] select', type + '.' + type + '.' + 'actions', function () {\n            form.update(type);\n            registry.get(type + '.' + type + '.' + 'actions.simple_action', function (component) {\n                component.on('update', function () {\n                    form.update(type);\n                });\n            });\n        });\n    }\n});","Amasty_Promo/js/order/create/scripts-mixin.js":"define([\n    'prototype',\n    'underscore'\n], function ($, _) {\n    'use strict';\n\n    return function () {\n        window.AdminOrder.prototype.loadArea =\n            window.AdminOrder.prototype.loadArea.wrap(function (proceed, area, indicator, params) {\n                var areasToUpdateItems = ['shipping_method', 'billing_method', 'card_validation'];\n\n                if ((_.isString(area) && areasToUpdateItems.indexOf(area) !== -1)\n                    || (_.isArray(area) && area.intersect(areasToUpdateItems).length)\n                ) {\n                    area.push('items');\n                }\n\n                return proceed(area, indicator, params);\n            });\n    };\n});\n","Amasty_Promo/js/form/element/gift-image-toggle.js":"define([\n    'underscore',\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (_, checkbox) {\n    'use strict';\n\n    return checkbox.extend({\n        defaults: {\n            rulesActions: [\n                'ampromo_product',\n                'ampromo_items',\n                'ampromo_cart',\n                'ampromo_spent',\n                'ampromo_eachn'\n            ],\n            imports: {\n                checkVisibility: '${$.provider}:data.simple_action'\n            },\n        },\n\n        checkVisibility: function (value) {\n            if (_.contains(this.rulesActions, value)) {\n                this.visible(true);\n            } else {\n                this.visible(false);\n            }\n            return this;\n        }\n    });\n});\n","Amasty_Promo/js/form/element/modal/button.js":"/**\n * Gifts open modal button\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/form/components/button',\n    'uiRegistry'\n], function ($, Element, registry) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            gifts: {\n                available: 0,\n                selected: 0\n            },\n            promoPrefixText: '',\n            promoSuffixText: '',\n            modules: {\n                listingSource: 'amasty_promo_listing.amasty_promo_listing_data_source',\n                mainModal: 'index = amasty_promo_gift_selector_modal',\n                // eslint-disable-next-line max-len\n                productsListing: 'amasty_promo_items.amasty_promo_items.amasty_promo_gift_selector_modal.assign_promo_listing'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function (config, element) {\n            this._super();\n\n            registry.set(this.name, this);\n            this.chooser = $(element);\n            this.chooser.on('click', this.action.bind(this));\n\n            if (this.productsListing()) {\n                this.productsListing().setExternalValue({});\n            }\n\n            return this;\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe([ 'gifts' ]);\n\n            return this;\n        },\n\n        /**\n         * Handler to change grid rows according to changes in order creation page\n         * @returns {void}\n         */\n        onModalOpen: function () {\n            var modal = this.mainModal();\n\n            modal.options.promoPrefixText = this.promoPrefixText;\n            modal.options.promoSuffixText = this.promoSuffixText;\n            this.listingSource(function (listingDataProvider) {\n                if (!listingDataProvider.firstLoad) {\n                    listingDataProvider.params.filters_modifier = {};\n                    listingDataProvider.reload({ 'refresh': true });\n                }\n\n                listingDataProvider.trigger('resetGrid');\n            });\n            modal.initializedAvailablePromoCount(this.gifts().available);\n        }\n    });\n});\n","Amasty_Promo/js/modal/modal.js":"/**\n * Main modal component\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/modal/modal-component',\n    'Amasty_Promo/js/model/selected-items',\n    'mage/template',\n    'text!Amasty_Promo/template/modal/counter.html'\n], function ($, _, modalComponent, selectedItemsModel, template, counterTmpl) {\n    'use strict';\n\n    return modalComponent.extend({\n        defaults: {\n            initializedAvailablePromoCount: 0,\n            availablePromoCount: 0,\n            listens: {\n                initializedAvailablePromoCount: 'initAvailableCounter',\n                availablePromoCount: 'onChangeAvailablePromoCount'\n            },\n            options: {\n                promoPrefixText: '',\n                promoSuffixText: '',\n                promoCounterWrapperClass: 'ampromo-counter-wrapper',\n                promoCounterClass: 'ampromo-gifts-counter',\n                displayedPromoCount: 0\n            },\n            css: {\n                availableCounter: '-available',\n                notAvailableCounter: '-not-available'\n            },\n            counterTmpl: counterTmpl\n        },\n\n        /** @inheritdoc */\n        initModal: function () {\n            this._super();\n\n            $('.ampromo-gifts-modal .page-main-actions')\n                .append('<div class=\"' + this.options.promoCounterWrapperClass + '\"></div>');\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe(['availablePromoCount', 'initializedAvailablePromoCount']);\n\n            selectedItemsModel.selectedItems.subscribe(this.selectedItemsObserver.bind(this));\n\n            return this;\n        },\n\n        initAvailableCounter: function () {\n            this.availablePromoCount(this.initializedAvailablePromoCount());\n        },\n\n        /**\n         * Add Promo Counter Element to slide in modal window\n         * @returns {void}\n         */\n        onChangeAvailablePromoCount: function () {\n            if (this.availablePromoCount() > this.initializedAvailablePromoCount()) {\n                this.availablePromoCount(this.initializedAvailablePromoCount());\n\n                return; // prevent endless loop\n            }\n\n            if (+this.availablePromoCount() === +this.initializedAvailablePromoCount()) {\n                this.toggleActionButtonState(false);\n            }\n\n            if (this.availablePromoCount() < 0) {\n                this.availablePromoCount(0);\n\n                return; // prevent endless loop\n            }\n\n            this.options.displayedPromoCount = this.availablePromoCount();\n            this.updatePromoCounterLabel(_.clone(this.options));\n        },\n\n        /**\n         * @param {Object} data\n         * @returns {void}\n         */\n        updatePromoCounterLabel: function (data) {\n            var mainActionBlock = $('.' + data.promoCounterWrapperClass);\n\n            if (this.availablePromoCount() > 0) {\n                data.promoCounterClass += ' ' + this.css.availableCounter;\n            } else {\n                data.promoCounterClass += ' ' + this.css.notAvailableCounter;\n            }\n\n            mainActionBlock.html(\n                template(this.counterTmpl, { data: data })\n            );\n        },\n\n        /**\n         * @param {Array} selectedItems\n         * @returns {void}\n         */\n        selectedItemsObserver: function (selectedItems) {\n            this.toggleActionButtonState(!!selectedItems.length);\n            this.availablePromoCount(this.initializedAvailablePromoCount() - this.getAllSelectedQty(selectedItems));\n        },\n\n        /**\n         * @param {Array} selectedItems\n         * @returns {Number}\n         */\n        getAllSelectedQty: function (selectedItems) {\n            var sumQty = 0;\n\n            _.each(selectedItems, function (item) {\n                sumQty += +item.qty;\n            });\n\n            return sumQty;\n        },\n\n        /**\n         * @param {Boolean} state\n         * @returns {void}\n         */\n        toggleActionButtonState: function (state) {\n            var addButton = $('.ampromo-gifts-modal .page-main-actions .action-primary');\n\n            addButton.attr('disabled', !state);\n        }\n    });\n});\n","Amasty_Promo/js/modal/product/insert-listing.js":"/**\n * Save data component\n */\n\ndefine([\n    'underscore',\n    'Magento_Ui/js/form/components/insert-listing',\n    'Amasty_Promo/js/action/add-products'\n], function (_, InsertListing, addProducts) {\n    'use strict';\n\n    return InsertListing.extend({\n        defaults: {\n            configuredItemIds: [],\n            configuredProductsStorage: [],\n            addUrl: '',\n            optionNameRegex: '^[a-z_A-Z]*',\n            optionIdRegex: '\\\\d+'\n        },\n\n        /** @inheritdoc */\n        save: function () {\n            var payload = {},\n                productId,\n                itemData,\n                optionName,\n                optionId;\n\n            window.saveInProgress = true;\n\n            this._super();\n\n            if (_.isEmpty(this.externalValue())) {\n                window.saveInProgress = false;\n\n                return;\n            }\n\n            _.each(this.externalValue(), function (item) {\n                productId = parseInt(item.entity_id);\n                itemData = { product_id: productId };\n\n                if (!_.isEmpty(this.configuredProductsStorage[productId])) {\n                    itemData['bundle_option'] = {};\n                    itemData['bundle_option_qty'] = {};\n\n                    _.each(this.configuredProductsStorage[productId], function (configuration) {\n                        optionName = configuration.name.match(this.optionNameRegex)\n                            ? configuration.name.match(this.optionNameRegex)[0]\n                            : null;\n                        optionId = configuration.name.match(this.optionIdRegex)\n                            ? configuration.name.match(this.optionIdRegex)[0]\n                            : null;\n\n                        if (_.isUndefined(itemData[optionName])) {\n                            itemData[optionName] = {};\n                        }\n\n                        if (optionName !== null && optionId !== null) {\n                            itemData[optionName][optionId] = configuration.value;\n                        } else {\n                            itemData[configuration.name] = configuration.value;\n                        }\n                    }.bind(this));\n                }\n\n                payload[item.sku] = itemData;\n            }.bind(this));\n\n            addProducts(this.addUrl, payload);\n        },\n\n        /**\n         * Save product configuration for further adding\n         * @param {Number} productId\n         * @param {Object} formData\n         * @returns {void}\n         */\n        saveConfiguration: function (productId, formData) {\n            this.configuredProductsStorage[productId] = formData;\n            this.configuredItemIds.push(productId);\n            this.configuredItemIds = _.uniq(this.configuredItemIds);\n        },\n\n        /**\n         * Save qty from grid input to payload\n         * @param {Number} productId\n         * @param {Number} qty\n         * @returns {void}\n         */\n        saveQty: function (productId, qty) {\n            var savedProductConfig = this.configuredProductsStorage[productId],\n                qtyParamIndex;\n\n            if (_.isUndefined(savedProductConfig)) {\n                savedProductConfig = [ { name: 'qty', value: qty } ];\n                this.saveConfiguration(productId, savedProductConfig);\n\n                return;\n            }\n\n            qtyParamIndex = _.findIndex(savedProductConfig, function (param) {\n                return param.name === 'qty';\n            });\n\n            if (qtyParamIndex !== -1) {\n                savedProductConfig[qtyParamIndex].value = qty;\n            } else {\n                savedProductConfig[qtyParamIndex].push({ name: 'qty', value: qty });\n            }\n\n            this.saveConfiguration(productId, savedProductConfig);\n        }\n    });\n});\n","Amasty_Promo/js/modal/product/configure.js":"/* global productConfigure */\n/**\n * Configure modal component\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/modal/modal-component',\n    'Amasty_Promo/js/action/quantity',\n    'text!Amasty_Promo/template/modal/configure-form.html',\n    'Magento_Catalog/catalog/product/composite/configure'\n], function ($, _, modalComponent, quantityInputActions, configureFormTmpl) {\n    'use strict';\n\n    return modalComponent.extend({\n        defaults: {\n            currentProductId: null,\n            currentProductConfig: null,\n            origBlockForm: null,\n            origOpenCallback: null,\n            origConfirmCallback: null,\n            configureFormValidState: false,\n            selectors: {\n                confOptionsForm: '#ampromo-configure-form',\n                confOptionsFieldset: '#catalog_product_composite_configure_fields_configurable'\n            },\n            modules: {\n                productsListing: '${ $.parentName + \".amasty_promo_gift_selector_modal.assign_promo_listing\"}',\n                selectColumn: 'amasty_promo_listing.amasty_promo_listing.promo_columns.select'\n            }\n        },\n\n        /** @inheritdoc */\n        initModal: function () {\n            this._super();\n\n            this.modal.append(configureFormTmpl);\n            this.modal.find('form').mage('validation', { errorClass: 'mage-error' });\n            this.addMutationHandlersForConfigurableOptions();\n        },\n\n        /**\n         * When configurable option's values added -> execute observer and set saved value\n         * @returns {void}\n         */\n        addMutationHandlersForConfigurableOptions: function () {\n            var observerConfig = {\n                    attributes: false,\n                    childList: true,\n                    subtree: false\n                },\n                observer = new MutationObserver(this.setSavedConfigurableOption.bind(this));\n\n            $.async(this.selectors.confOptionsFieldset, function () {\n                this.currentProductConfig = this.productsListing().configuredProductsStorage[this.currentProductId];\n\n                _.each(this.currentProductConfig, function (configItem) {\n                    var itemSelector = '[name=\"' + configItem.name + '\"]';\n\n                    $(itemSelector).val(configItem.value);\n                    observer.observe(\n                        document.querySelector(this.selectors.confOptionsForm + ' ' + itemSelector),\n                        observerConfig\n                    );\n                }.bind(this));\n            }.bind(this));\n        },\n\n        /**\n         * Set configurable options from saved state\n         * @param {Array} mutationsList\n         * @returns {void}\n         */\n        setSavedConfigurableOption: function (mutationsList) {\n            var mutationTarget = mutationsList[0].target,\n                mutationTargetConfig,\n                changeEvent = new Event('change');\n\n            if (mutationTarget.tagName !== 'SELECT') {\n                return;\n            }\n\n            mutationTargetConfig = this.currentProductConfig.filter(function (configItem) {\n                return configItem.name === mutationTarget.name;\n            });\n\n            if (mutationTargetConfig.length === 0) {\n                return;\n            }\n\n            mutationTarget.value = mutationTargetConfig[0].value;\n            mutationTarget.dispatchEvent(changeEvent);\n        },\n\n        /**\n         * Load product configuration and open modal window\n         * @param {Number} productId\n         * @returns {void}\n         */\n        loadConfigurationAndOpenModal: function (productId) {\n            if (this.origBlockForm === null) {\n                this.origBlockForm = productConfigure.blockFormFields;\n                this.origOpenCallback = productConfigure._showWindow;\n                this.origConfirmCallback = productConfigure.onConfirmBtn;\n            }\n            this.currentProductId = productId;\n\n            // Magento composite configure component items\n            productConfigure.blockFormFields = this.modal.find('#product_composite_configure_form_fields')[0];\n            productConfigure.onConfirmBtn = this.saveConfigurationAndClose.bind(this);\n            productConfigure._showWindow = this.openModal.bind(this);\n\n            productConfigure._requestItemConfiguration('product_to_add', productId);\n        },\n\n        /**\n         * Save product configuration to products listing and close modal\n         * @returns {void}\n         */\n        saveConfigurationAndClose: function () {\n            var form = this.modal.find('form'),\n                qtyField = form.find('[name=\"qty\"]'),\n                qty = qtyField.length ? qtyField.val() : null;\n\n            if (form.valid()) {\n                this.configureFormValidState = true;\n                this.productsListing().saveConfiguration(this.currentProductId, form.serializeArray());\n                this.closeModal();\n                this.saveQtyToGrid(+this.currentProductId, +qty);\n            }\n        },\n\n        closeModal: function () {\n            this.restoreConfiguration();\n            this._super();\n\n            if (!this.configureFormValidState) {\n                this.selectColumn().deselect(this.currentProductId, true);\n            }\n\n            this.configureFormValidState = false;\n        },\n\n        /**\n         * Save product qty from configure popup to products grid\n         * @param {Number} productId\n         * @param {Number} qty\n         * @returns {void}\n         */\n        saveQtyToGrid: function (productId, qty) {\n            quantityInputActions.toggleQtyInput(productId, true);\n            quantityInputActions.setQtyValue(productId, qty);\n        },\n\n        /**\n         * Restore configure window to prevent conflicts with native product addition\n         * @returns {void}\n         */\n        restoreConfiguration: function () {\n            productConfigure.blockFormFields = this.origBlockForm;\n            productConfigure._showWindow = this.origOpenCallback;\n            productConfigure.onConfirmBtn = this.origConfirmCallback;\n            this.origBlockForm = null;\n            this.origOpenCallback = null;\n            this.origConfirmCallback = null;\n        }\n    });\n});\n","Amasty_Promo/js/modal/grid/column.js":"/**\n * Gifts grid column\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/grid/columns/column'\n], function ($, Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            modules: {\n                selectColumn: '${$.parentName}.select',\n                mainModal: 'index = amasty_promo_gift_selector_modal',\n            }\n        },\n\n        /**\n         * @param {Object} record\n         * @returns {Function}\n         */\n        getFieldHandler: function (record) {\n            return this.customColumnHandler.bind(this, record);\n        },\n\n        /**\n         * Custom handler for grid cells\n         * @param {Object} record\n         * @returns {void}\n         */\n        customColumnHandler: function (record) {\n            var selectColumn = this.selectColumn(),\n                recordId = selectColumn.getId(record._rowIndex, true);\n\n            if (this.mainModal().availablePromoCount() <= 0\n                && !selectColumn.isSelected(recordId, false)\n            ) {\n                return;\n            }\n\n            this.defaultColumnHandler(record);\n\n            if ($(event.target).attr('data-ampromo-js') === 'configure') {\n                if (!selectColumn.isSelected(recordId, false)) {\n                    selectColumn.select(recordId, false);\n                }\n\n                return;\n            }\n\n            selectColumn.toggleSelect(recordId, false);\n        },\n\n        /**\n         * @param {Object} record\n         * @returns {Null|Function}\n         */\n        defaultColumnHandler: function (record) {\n            if (this.hasFieldAction()) {\n                return this.applyFieldAction.bind(this, record._rowIndex);\n            }\n\n            return null;\n        }\n    });\n});\n","Amasty_Promo/js/modal/grid/columns/quantity.js":"/**\n * Gifts grid qty column\n */\n\ndefine([\n    'jquery',\n    'Amasty_Promo/js/modal/grid/column',\n    'Amasty_Promo/js/model/selected-items'\n], function ($, Column, selectedItemsModel) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            value: null,\n            disabled: true,\n            draggable: false,\n            modules: {\n                // eslint-disable-next-line max-len\n                productsListing: 'amasty_promo_items.amasty_promo_items.amasty_promo_gift_selector_modal.assign_promo_listing'\n            }\n        },\n\n        /** @inheritdoc */\n        initObservable: function () {\n            this._super()\n                .observe('qtyUpdated');\n\n            return this;\n        },\n\n        /**\n         * @param {Event} event\n         * @param {UIClass} component\n         * @returns {void}\n         */\n        onInput: function (event, component) {\n            var targetElement = event.target,\n                value = targetElement.value === '' ? null : +targetElement.value,\n                productId = targetElement.getAttribute('data-ampromo-product');\n\n            if (value > targetElement.max) {\n                targetElement.value = targetElement.max;\n            }\n\n            if (value <= 0 && !(value === null)) {\n                targetElement.value = 1;\n            }\n\n            component.qtyUpdated({ 'productId': productId, 'count': targetElement.value });\n            component.productsListing()\n                .saveQty(productId, targetElement.value);\n\n            if (selectedItemsModel.isItemSelected(+productId)) {\n                selectedItemsModel.updateSelectedItem(+productId, +targetElement.value);\n            }\n        },\n\n        /**\n         * @param {UIClass} component\n         * @param {Event} event\n         * @returns {void}\n         */\n        onChange: function (component, event) {\n            component.onInput(event, component);\n        },\n\n        onClick: function () {\n            // Prevent item select by qty input click\n            event.stopPropagation();\n        },\n\n        /**\n         * @param {Number} productId\n         * @returns {HTMLElement}\n         */\n        getElementByProductId: function (productId) {\n            return document.getElementById(this.index + productId);\n        }\n    });\n});\n","Amasty_Promo/js/modal/grid/columns/items-left.js":"/**\n * \"Items Left\" column component\n */\n\ndefine([\n    'jquery',\n    'Amasty_Promo/js/modal/grid/column'\n], function ($, Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            listens: {\n                '${$.parentName}.qty:qtyUpdated': 'updateItemsLeftCounter'\n            }\n        },\n\n        /**\n         * @param {Object} record\n         * @returns {Number}\n         */\n        getInitialCount: function (record) {\n            var qtyValue = $('#qty' + record['entity_id']).val();\n\n            return +record['max_available_qty'] - +qtyValue >= 0\n                ? record['max_available_qty'] - +qtyValue\n                : 0;\n        },\n\n        /**\n         * Update \"Items Left\" column after qty column change\n         * @param {Object} data\n         * @returns {void}\n         */\n        updateItemsLeftCounter: function (data) {\n            var leftElement = $('#ampromo-left-' + data.productId);\n\n            leftElement.html(+leftElement.attr('data-ampromo-max') - +data.count);\n        }\n    });\n});\n","Amasty_Promo/js/modal/grid/columns/select.js":"/**\n * Gifts grid select column\n */\n\ndefine([\n    'jquery',\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/grid/columns/multiselect',\n    'Amasty_Promo/js/action/quantity',\n    'Amasty_Promo/js/model/selected-items',\n    'Amasty_Promo/js/utils'\n], function ($, _, registry, Select, quantityInputActions, selectedItemsModel, utils) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            rowSelectorPattern: 'tr[data-repeat-index=\\'{rowIndex}\\']',\n            checkboxSelector: '.ampromo-gift-cell [data-action=\"select-row\"]',\n            headerTmpl: 'Amasty_Promo/modal/grid/column/select-header',\n            modules: {\n                mainModal: 'index = amasty_promo_gift_selector_modal',\n                configureModal: 'amasty_promo_items.amasty_promo_items.amasty_promo_gift_configure_product_modal',\n                // eslint-disable-next-line max-len\n                productsListing: 'amasty_promo_items.amasty_promo_items.amasty_promo_gift_selector_modal.assign_promo_listing'\n            },\n            listens: {\n                '${$.provider}:resetGrid': 'clearSelectedItems'\n            }\n        },\n\n        /**\n         * Open configuration modal if product is not simple\n         * @param {Object} record\n         * @returns {void}\n         */\n        openConfigModalOnSelect: function (record) {\n            if (utils.isConfigurable(record)) {\n                this.configureModal().loadConfigurationAndOpenModal(record['entity_id']);\n            }\n        },\n\n        /**\n         * Save product qty to listing\n         * @param {Number} productId\n         * @param {Number} qty\n         * @returns {void}\n         */\n        saveQtyToListing: function (productId, qty) {\n            if (!qty) {\n                return;\n            }\n\n            this.productsListing().saveQty(productId, qty);\n        },\n\n        /** @inheritdoc */\n        onSelectedChange: function (selected) {\n            var checkedItemId,\n                uncheckedItemId,\n                record,\n                self = this;\n\n            if (window.saveInProgress === true) {\n                return this;\n            }\n\n            if (!this.prevSelectedArray) {\n                this.prevSelectedArray = [];\n            }\n\n            this._super();\n\n            checkedItemId = _.difference(selected, this.prevSelectedArray)[0];\n            uncheckedItemId = _.difference(this.prevSelectedArray, selected)[0];\n\n            if (checkedItemId) {\n                record = this.getRecordByItemId(+checkedItemId);\n\n                this.toggleItemHandler(record, true);\n            }\n\n            if (uncheckedItemId) {\n                record = this.getRecordByItemId(+uncheckedItemId);\n\n                this.toggleItemHandler(record, false);\n            }\n\n            this.prevSelectedArray = _.clone(selected);\n\n            if (this.mainModal().availablePromoCount() <= 0) {\n                _.each(this.rows(), function (row, index) {\n                    if (!self.isSelected(index, row)) {\n                        $(self.rowSelectorPattern.replace('{rowIndex}', index)\n                            + ' '\n                            +  self.checkboxSelector).attr('disabled', true);\n                    }\n                })\n                // _.each($(this.checkboxSelector), function (checkbox) {\n                //     if (!checkbox.checked) {\n                //         checkbox.disabled = true;\n                //     }\n                // });\n            } else {\n                _.each($(this.checkboxSelector), function (checkbox) {\n                    checkbox.disabled = false;\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * @param {Number} itemId\n         * @returns {*}\n         */\n        getRecordByItemId: function (itemId) {\n            return this.rows().filter(function (row) {\n                return +row['entity_id'] === +itemId;\n            })[0];\n        },\n\n        /**\n         * @param {Object} record\n         * @param {Boolean} checkedState\n         * @returns {void}\n         */\n        toggleItemHandler: function (record, checkedState) {\n            var productId = +record['entity_id'],\n                productQty = +$('[data-ampromo-product=\"' + productId + '\"]').val();\n\n            if (checkedState) {\n                this.openConfigModalOnSelect(record);\n                this.saveQtyToListing(productId, productQty);\n                selectedItemsModel.addSelectedItem(productId, productQty);\n            } else {\n                selectedItemsModel.removeSelectedItem(productId);\n            }\n\n            quantityInputActions.toggleQtyInput(productId, checkedState);\n            quantityInputActions.setQtyValue(productId, checkedState ? 1 : null);\n        },\n\n        clearSelectedItems: function () {\n            selectedItemsModel.clearSelectedItems();\n            this.deselectAll();\n        }\n    });\n});\n","Amasty_Promo/js/modal/grid/columns/name.js":"/**\n * Gifts grid name column\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Amasty_Promo/js/modal/grid/column',\n    'Amasty_Promo/js/utils',\n    'Amasty_Promo/js/model/selected-items'\n], function ($, registry, Column, utils, selectedItemsModel) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            modules: {\n                configureModal: 'amasty_promo_items.amasty_promo_items.amasty_promo_gift_configure_product_modal',\n                mainModal: 'index = amasty_promo_gift_selector_modal',\n\n            }\n        },\n\n        /**\n         * Check configurable type\n         * @param {Object} record\n         * @returns {boolean}\n         */\n        isConfigurableType: function (record) {\n            return utils.isConfigurable(record);\n        },\n\n        /**\n         * @param {Object} record\n         * @param {Boolean} state\n         * @returns {void}\n         */\n        toggleQtyEnabledState: function (record, state) {\n            var qtyFieldSelector = '#qty' + record.entity_id;\n\n            if (!$(qtyFieldSelector)[0]) {\n                $.async('#qty' + record['entity_id'], function (qtyField) {\n                    $(qtyField).prop('disabled', !state);\n                });\n\n                return;\n            }\n\n            $(qtyFieldSelector).prop('disabled', !state);\n        },\n\n        /**\n         * Open configure modal\n         * @param {String} productId\n         * @returns {void}\n         */\n        openConfigureModal: function (productId) {\n            if (this.mainModal().availablePromoCount() <= 0 && !selectedItemsModel.isItemSelected(productId)) {\n                return;\n            }\n            this.configureModal().loadConfigurationAndOpenModal(productId);\n        }\n    });\n});\n","Amasty_Promo/js/model/selected-items.js":"/**\n * Selected free gifts model\n */\n\ndefine([\n    'ko',\n    'underscore'\n], function (ko, _) {\n    'use strict';\n\n    return {\n        selectedItems: ko.observableArray([]),\n\n        /**\n         * @param {Number} productId\n         * @param {Number} qty\n         * @returns {void}\n         */\n        addSelectedItem: function (productId, qty) {\n            var bufferArray = this.selectedItems();\n\n            bufferArray.push({ productId: productId, qty: qty });\n\n            this.selectedItems(bufferArray);\n        },\n\n        /**\n         * @param {Number} productId\n         * @param {Number} qty\n         * @returns {void}\n         */\n        updateSelectedItem: function (productId, qty) {\n            var bufferArray = this.selectedItems(),\n                alreadySelectedIndex;\n\n            _.each(bufferArray, function (item) {\n                if (+item.productId === +productId) {\n                    alreadySelectedIndex = bufferArray.indexOf(item);\n                }\n            });\n\n            if (!_.isUndefined(alreadySelectedIndex) && alreadySelectedIndex !== -1) {\n                bufferArray[alreadySelectedIndex].qty = qty;\n            }\n\n            this.selectedItems(bufferArray);\n        },\n\n        /**\n         * @param {Number} productId\n         * @returns {void}\n         */\n        removeSelectedItem: function (productId) {\n            var bufferArray = this.selectedItems();\n\n            bufferArray = bufferArray.filter(function (item) {\n                return +item.productId !== +productId;\n            });\n\n            this.selectedItems(bufferArray);\n        },\n\n        clearSelectedItems: function () {\n            this.selectedItems([]);\n        },\n\n        /**\n         * @param {Number} productId\n         * @returns {Boolean}\n         */\n        isItemSelected: function (productId) {\n            var selectedItems = this.selectedItems();\n\n            return _.some(selectedItems, function (item) {\n                return +item.productId === +productId;\n            });\n        }\n    };\n});\n","Amasty_Promo/js/action/quantity.js":"/**\n * Quantity input actions\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    return {\n        /**\n         * @param {Number} productId\n         * @param {Boolean} state\n         * @returns {void}\n         */\n        toggleQtyInput: function (productId, state) {\n            $('[data-ampromo-product=\"' + productId + '\"]').prop('disabled', !state);\n        },\n\n        /**\n         * @param {Number} productId\n         * @param {String} value\n         * @returns {void}\n         */\n        setQtyValue: function (productId, value) {\n            $('[data-ampromo-product=\"' + productId + '\"]').val(value).trigger('change');\n        }\n    }\n    ;\n});\n","Amasty_Promo/js/action/add-products.js":"/**\n * Add product action\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert'\n], function ($, alert) {\n    'use strict';\n\n    return function (serviceUrl, data) {\n        var payload = {\n            data: data\n        };\n\n        $('body').trigger('processStart');\n\n        $.ajax({\n            url: serviceUrl,\n            data: payload,\n            dataType: 'json',\n            method: 'POST'\n        }).done(function (response) {\n            if (response.success) {\n                order.itemsUpdate();\n            } else {\n                alert({ content: response.error });\n            }\n        }).fail(function (response) {\n            alert({ content: response.error });\n        }).always(function () {\n            $('body').trigger('processStop');\n            window.saveInProgress = false;\n        });\n    };\n});\n","Amasty_ShopbySeo/js/checker.js":"define([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'domReady'\n], function ($, modalConfirm) {\n    'use strict';\n\n    $.widget('mage.amConfigChecker', {\n        options: {\n            contentSelector: '#am_checker_message',\n            fieldsSelector: '#amasty_shopby_seo_url_special_char, #amasty_shopby_seo_url_option_separator'\n        },\n\n        _create: function () {\n            $(this.options.fieldsSelector).on('change', function (e) {\n                var specialChar = $('#amasty_shopby_seo_url_special_char').val(),\n                    separator = $('#amasty_shopby_seo_url_option_separator').val();\n                if (specialChar == separator) {\n                    modalConfirm({\n                        title: $.mage.__('Attention'),\n                        content: $(this.options.contentSelector).html(),\n                    });\n                }\n            }.bind(this));\n        }\n\n    });\n\n    return $.mage.amConfigChecker;\n});\n","Magento_GoogleTagManager/js/google-analytics.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/* jscs:disable */\n/* eslint-disable */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    function init(config) {\n        (function (d,s,u) {\n            var gtagScript = d.createElement(s);\n            gtagScript.type = 'text/javascript';\n            gtagScript.async = true;\n            gtagScript.src = u;\n            d.head.insertBefore(gtagScript, d.head.children[0]);\n        })(document, 'script', 'https://www.googletagmanager.com/gtag/js?id=' + config.measurementId);\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n        gtag('set', 'developer_id.dYjhlMD', true);\n        gtag('config', config.measurementId, { 'anonymize_ip': true });\n        dataLayer.push({\n            'ecommerce': {'currencyCode': config.storeCurrencyCode}\n        });\n        if (config.refundJson.hasOwnProperty('event')) {\n            dataLayer.push(config.refundJson);\n        }\n    }\n\n    /**\n     * @param {Object} config\n     */\n    return function (config) {\n        init(config);\n    }\n});\n","Magento_GoogleTagManager/js/google-tag-manager.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/* jscs:disable */\n/* eslint-disable */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    function init(config) {\n        var f, j, dl;\n        window.dataLayer = window.dataLayer || [];\n\n        (function (w, d, s, l, i) {\n            w[l] = w[l] || [];\n            w[l].push({\n                'gtm.start': new Date().getTime(),\n                event: 'gtm.js'\n            });\n            f = d.getElementsByTagName(s)[0];\n            j = d.createElement(s);\n            dl = l != 'dataLayer' ? '&l=' + l : '';\n            j.async = true;\n            j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n            f.parentNode.insertBefore(j, f);\n        })(window, document, 'script', 'dataLayer', config.gtmAccountId);\n        dataLayer.push({\n            'ecommerce': {'currencyCode': config.storeCurrencyCode}\n        });\n        if (config.refundJson.hasOwnProperty('event')) {\n            console.log(config.refundJson);\n            dataLayer.push(config.refundJson);\n        }\n    }\n\n    /**\n     * @param {Object} config\n     */\n    return function (config) {\n        init(config);\n    }\n});\n","Magento_ScalableInventory/js/components/deferred-stock-update.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @deprecated split database solution is deprecated and will be removed\n */\ndefine([\n    'Magento_Ui/js/form/components/group'\n], function (Group) {\n    'use strict';\n\n    return Group.extend({\n        defaults: {\n            modules: {\n                backordersField: '${ $.backordersField }'\n            }\n        },\n\n        /**\n         * Visibility listener\n         */\n        visibilityBackordersChanged: function () {\n            this.changeVisibility();\n        },\n\n        /**\n         * Value listener\n         */\n        valueBackordersChanged: function () {\n            this.changeVisibility();\n        },\n\n        /**\n         * Change visibility for deferredStockUpdate based on current visibility and value.\n         */\n        changeVisibility: function () {\n            if (this.backordersField()) {\n                if (this.backordersField().visible() && parseFloat(this.backordersField().value())) {\n                    this.visible(true);\n                } else {\n                    this.visible(false);\n                }\n            }\n        }\n    });\n});\n","Magento_Support/js/grid/columns/link.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/column'\n], function (Column) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Magento_Support/grid/cells/link'\n        },\n\n        /**\n         * Extracts records' data.\n         *\n         * @param {Object} record - Record object.\n         * @returns {Object}\n         */\n        getData: function (record) {\n            return record[this.index];\n        },\n\n        /**\n         * Extracts records' link data.\n         *\n         * @param {Object} record - Record object.\n         * @returns {String}\n         */\n        getHref: function (record) {\n            var data = this.getData(record);\n\n            return data.value.link;\n        },\n\n        /**\n         * Extracts records' label.\n         *\n         * @param {Object} record - Record object.\n         * @returns {String}\n         */\n        getLabel: function (record) {\n            return this.getData(record).label;\n        },\n\n        /**\n         * Extracts records' size data.\n         *\n         * @param {Object} record - Record object.\n         * @returns {String}\n         */\n        getSize: function (record) {\n            return this.getData(record).size;\n        },\n\n        /**\n         * Checks if record represents link.\n         *\n         * @param {Object} record - Record object.\n         * @returns {Boolean}\n         */\n        isLink: function (record) {\n            var data = this.getData(record);\n\n            return !!data.value.isLink;\n        },\n\n        /**\n         * Overrides base method, because this component\n         * can't have global field action.\n         *\n         * @returns {Boolean} False.\n         */\n        hasFieldAction: function () {\n            return false;\n        }\n    });\n});\n","Amasty_Geoip/js/image-optimization.js":"define([\n    'uiElement',\n    'jquery',\n    'mage/translate',\n    'Magento_Ui/js/modal/alert'\n], function (Element, $, $t, message) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            importItems: [],\n            downloadStatusWidth: 0,\n            initialDownloadPercent: 0,\n            importStatusWidth: 0,\n            downloadCounter: '',\n            importCounter: '',\n            downloadStarted: false,\n            isDownloadCompleted: false,\n            initialStatus: false,\n            importDone: false,\n            isShowImportCounter: false,\n            isShowDownloadCounter: false,\n            message: '',\n            messages: {\n                upToDate: $t('GeoIp data is up-to-date.'),\n                error: $t('Error.')\n            }\n\n        },\n\n        initialize: function () {\n            this._super();\n\n            this.initialStatus(this.getInitialStatus());\n            this.downloadStatusWidth(this.initialDownloadPercent);\n            this.importStatusWidth(this.initialDownloadPercent);\n            this.importDone(this.initialStatus());\n            this.isDownloadCompleted(this.initialStatus());\n            this.downloadStep = 1;\n            this.urls = [];\n            this.isDownload = false;\n        },\n\n        initObservable: function () {\n            this._super().observe([\n                'downloadStatusWidth',\n                'downloadCounter',\n                'importStatusWidth',\n                'downloadStarted',\n                'isDownloadCompleted',\n                'importDone',\n                'importCounter',\n                'isShowImportCounter',\n                'isShowDownloadCounter',\n                'initialStatus',\n                'message'\n            ]);\n\n            return this;\n        },\n\n        getInitialStatus: function () {\n            return !!this.initialDownloadPercent;\n        },\n\n        initImportAndDownload: function () {\n            this.initialStatus(false);\n            this.isDownloadCompleted(false);\n            this.importDone(false);\n            this.importStatusWidth(0);\n            this.importItems.each(function (item) {\n                this.runDownloading(item.start, item.process, item.commit, item.download);\n            }.bind(this));\n        },\n\n        initImport: function () {\n            this.importDone(false);\n            this.importStatusWidth(0);\n            this.importItems.each(function (item) {\n                this.run(item.start, item.process, item.commit, item.download);\n            }.bind(this));\n        },\n\n        runDownloading: function (startUrl, processUrl, commitUrl, startDownloadingUrl) {\n            this.isDownload = true;\n            this.isShowDownloadCounter(true);\n            this.downloadStarted(true);\n            this.downloadStatusWidth(30);\n            this.downloadCounter('0/3');\n\n            $.ajax({\n                url: startDownloadingUrl,\n                type: 'POST',\n                dataType: 'json',\n                data: { form_key: FORM_KEY }\n            }).done($.proxy(function (response) {\n                switch (response.status) {\n                    case 'finish_downloading':\n                        this.doneDownloading(startUrl, processUrl, commitUrl);\n                        break;\n                    case 'done':\n                        this.isShowDownloadCounter(false);\n                        this.downloadStatusWidth(100);\n                        this.isDownloadCompleted(true);\n                        this.importDone(true);\n                        this.initialStatus(true);\n                        this.importStatusWidth(100);\n                        this.message(this.messages.upToDate);\n                        break;\n                    case response.error:\n                        this.isShowDownloadCounter(false);\n                        this.message(this.messages.error);\n                        this.downloadStarted(false);\n                        this.downloadStatusWidth(0);\n                        message({ content: response.error });\n                        break;\n                    default:\n                        this.isShowDownloadCounter(false);\n                        this.downloadStarted(false);\n                }\n            }, this));\n        },\n\n        doneDownloading: function (startUrl, processUrl, commitUrl) {\n            if (this.downloadStep === 3) {\n                this.downloadStatusWidth(100);\n                this.isDownloadCompleted(true);\n                this.isShowDownloadCounter(false);\n\n                this.urls.each(function (type) {\n                    this.run(type[0], type[1], type[2]);\n                }.bind(this));\n\n                return this.run(startUrl, processUrl, commitUrl);\n            }\n\n            this.downloadStatusWidth(this.downloadStep * 30);\n            this.downloadCounter(this.downloadStep + '/3');\n\n            this.urls.push([startUrl, processUrl, commitUrl]);\n\n            this.downloadStep++;\n        },\n\n        run: function (startUrl, processUrl, commitUrl) {\n            $.ajax({\n                url: startUrl,\n                type: 'POST',\n                dataType: 'json',\n                data: { form_key: FORM_KEY, is_download: this.isDownload }\n            }).done(function (response) {\n                if (response.status === 'started') {\n                    this.isShowImportCounter(true);\n                    this.importCounter('0%');\n                    this.process(processUrl, commitUrl);\n                } else if (response.error) {\n                    this.importError(response);\n                }\n            }.bind(this));\n        },\n\n        process: function (processUrl, commitUrl) {\n            $.ajax({\n                url: processUrl,\n                type: 'POST',\n                dataType: 'json',\n                data: { form_key: FORM_KEY }\n            }).done(function (response) {\n                if (response.status == 'processing') {\n                    if (response.type === 'block') {\n                        this.importStatusWidth(response.position);\n                        this.importCounter(response.position + '%');\n                    }\n\n                    if (response.position == 100) {\n                        return this.commit(commitUrl);\n                    }\n\n                    this.process(processUrl, commitUrl);\n                } else if (response.error) {\n                    this.importError(response);\n                }\n            }.bind(this));\n        },\n\n        commit: function (commitUrl) {\n            $.ajax({\n                url: commitUrl,\n                type: 'POST',\n                dataType: 'json',\n                data: { form_key: FORM_KEY }\n            }).done(function (response) {\n                if (response.status == 'done') {\n                    this.done(response);\n                }\n            }.bind(this));\n        },\n\n        done: function (response) {\n            if (response.full_import_done == 1) {\n                location.reload();\n            }\n        },\n\n        importError: function (response) {\n            this.isShowImportCounter(false);\n            this.message(this.messages.error);\n            this.importDone(false);\n            this.importCounter(0);\n            message({ content: response.error });\n        }\n    });\n});\n","Amasty_SalesRuleWizard/js/steps/apply_settings.js":"// jscs:disable jsDoc\ndefine([\n    'uiComponent',\n    'jquery',\n    'underscore'\n], function (Component, $, _) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            modules: {\n                settingsForm: '${ $.formName }',\n                settingsFormFields: '${ $.formName }.general'\n            },\n            stepInitialized: false\n        },\n        currentScenario: '',\n        initialize: function () {\n            this._super();\n        },\n        render: function (wizard) {\n            //on show\n            this.wizard = wizard;\n\n            var selectedScenario = wizard.data.scenario;\n            if (selectedScenario != this.currentScenario) {\n                this.settingsForm(function (form) {\n                    form.reset();\n                });\n\n                this.settingsFormFields(function (formComponent) {\n                    formComponent.elems.each(function (element) {\n                        if (element.scenario) {\n                            var isVisible = false;\n                            element.scenario.each(function (scenario) {\n                                if (scenario == selectedScenario) {\n                                    isVisible = true;\n                                }\n                            });\n                            element.visible(isVisible);\n                        }\n                    });\n                    this.currentScenario = selectedScenario;\n                }.bind(this));\n            }\n        },\n        force: function (wizard) {\n            var form = this.settingsForm();\n            if (!form || !form.source) {\n                throw new Error($.mage.__('Form is undefined, please try again.'));\n            }\n            form.validate();\n\n            //save\n            if (form.source.get('params.invalid')) {\n                throw new Error($.mage.__('Step is invalid.'));\n            }\n            form.collectAdditionalData();\n            wizard.data.apply_settings = form.source.get('data');\n\n        },\n        back: function (wizard) {\n        }\n    });\n});\n","Amasty_SalesRuleWizard/js/steps/initial.js":"// jscs:disable jsDoc\ndefine([\n    'uiComponent',\n    'underscore'\n], function (Component, _) {\n    'use strict';\n\n    return Component.extend({\n        stepInitialized: false,\n        defaults: {\n            scenariosMap: {},\n            scenarios: {},\n            selectedType: '',\n            selectedScenario: '',\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            listens: {\n                selectedType: 'onScenarioChange',\n                selectedScenario: 'onScenarioChange'\n            }\n        },\n        initialize: function () {\n            this._super();\n\n            this.selectRuleType(this.selectedType());\n        },\n        initObservable: function () {\n            this._super().observe(['scenarios', 'selectedScenario', 'selectedType']);\n\n            return this;\n        },\n        onScenarioChange: function (scenario) {\n        },\n        selectRuleType: function (ruleType) {\n            _.each(this.scenariosMap, function (type, typeCode) {\n                if (typeCode == ruleType) {\n                    this.scenarios(type.scenarios);\n                }\n            }.bind(this));\n        },\n        render: function (wizard) {\n            this.wizard = wizard;\n        },\n        force: function (wizard) {\n            wizard.data.scenario = this.selectedScenario();\n\n            if (!wizard.data.scenario) {\n                throw new Error($.mage.__('Please select scenario.'));\n            }\n        },\n        back: function () {\n        }\n    });\n});\n","Amasty_SalesRuleWizard/js/steps/summary.js":"// jscs:disable jsDoc\ndefine([\n    'uiComponent',\n    'jquery',\n    'underscore',\n    'uiRegistry',\n    'mageUtils',\n    'uiLayout',\n    'Magento_Ui/js/form/client',\n    'Magento_Ui/js/lib/spinner'\n], function (Component, $, _, registry, utils, layout, Client, Spinner) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            stepInitialized: false,\n            nextLabelText: 'Save the Rule',\n            previewConfig: {\n                name: 'summary_preview',\n                component: 'Amasty_SalesRuleWizard/js/ui/preview',\n                template: 'Amasty_SalesRuleWizard/preview',\n                settings_data: 'amasty_promowizard_rule_settings.rule_settings_data_source:data',\n                apply_data: 'amasty_promowizard_apply_settings.rule_settings_data_source:data'\n            },\n            previewObserver: null,\n            clientConfig: {\n                urls: {\n                    save: '${ $.submit_url }',\n                    beforeSave: '${ $.validate_url }'\n                }\n            },\n            modules: {\n                previewComponent: '${ $.previewConfig.name }'\n            }\n        },\n\n        /**\n         * @returns {Object} Chainable.\n         */\n        initialize: function () {\n            this._super()\n                .initClient();\n\n            this.previewComponent(function (component) {\n                this.previewObserver(component);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * @returns {Object} Chainable.\n         */\n        initObservable: function () {\n            this._super().observe(['previewObserver']);\n\n            return this;\n        },\n\n        /**\n         * Init Preview module\n         *\n         * @returns {Object} Chainable.\n         */\n        initModules: function () {\n            this._super();\n            layout([this.previewConfig]);\n\n            return this;\n        },\n\n        /**\n         * Initializes client component.\n         */\n        initClient: function () {\n            this.client = new Client(this.clientConfig);\n\n            return this;\n        },\n\n        render: function (wizard) {\n            //on show\n            this.wizard = wizard;\n\n            var sourceDummy = {set: function (){}};\n\n            this.elems.each(function (element) {\n                element.source = sourceDummy;\n            });\n\n            if (wizard.data.scenario) {\n                var ruleNameComponent = this.getChild('rule_name'),\n                    scenariosData = wizard.getStep('0').scenarios();\n\n                var currentScenarioData = _.find(scenariosData, function (scenarioData) {\n                    return scenarioData.value == wizard.data.scenario;\n                });\n\n                ruleNameComponent.default = _.template(currentScenarioData.nameTemplate)({data: wizard.data});\n                ruleNameComponent.restoreToDefault();\n            }\n        },\n        force: function (wizard) {\n            //save\n            if (!wizard.data.additional) {\n                wizard.data.additional = {};\n            }\n            var isValid = true;\n\n            this.elems.each(function (element) {\n                if (!element.validate().valid) {\n                    isValid = false;\n                }\n                wizard.data.additional[element.index] = element.value();\n            });\n            if (!isValid) {\n                throw new Error($.mage.__('Step is invalid.'));\n            }\n\n            wizard.data.additional.description = this.previewComponent().getTextContent();\n\n            Spinner.show();\n\n            this.client.save(wizard.data, {\n                redirect: true,\n                ajaxSave: false,\n                ajaxSaveType: 'default'\n            });\n        },\n        back: function (wizard) {\n        }\n    });\n});\n","Amasty_SalesRuleWizard/js/steps/rule_settings.js":"// jscs:disable jsDoc\ndefine([\n    'uiComponent',\n    'jquery',\n    'underscore'\n], function (Component, $, _) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            notificationMessage: {\n                text: null,\n                error: null\n            },\n            modules: {\n                settingsForm: '${ $.formName }',\n                settingsFormFields: '${ $.formName }.general'\n            },\n            stepInitialized: false\n        },\n        currentScenario: '',\n        render: function (wizard) {\n            //on show\n            this.wizard = wizard;\n\n            var selectedScenario = wizard.data.scenario;\n            if (selectedScenario != this.currentScenario) {\n                this.settingsForm(function (form) {\n                    form.reset();\n                });\n\n                this.settingsFormFields(function (formComponent) {\n                    formComponent.elems.each(function (element) {\n                        if (element.scenario) {\n                            var isVisible = false;\n                            element.scenario.each(function (scenario) {\n                                if (scenario == selectedScenario) {\n                                    isVisible = true;\n                                }\n                            });\n                            element.visible(isVisible);\n                        }\n                    });\n                    this.currentScenario = selectedScenario;\n                }.bind(this));\n            }\n        },\n        force: function (wizard) {\n            var form = this.settingsForm();\n            if (!form || !form.source) {\n                throw new Error($.mage.__('Form is undefined, please try again.'));\n            }\n            form.validate();\n\n            //save\n            if (form.source.get('params.invalid')) {\n                throw new Error($.mage.__('Step is invalid.'));\n            }\n            if (this.settingsFormFields().getChild('ampromorule_sku').visible() && form.source.get('data.free_gifts.products') && form.source.get('data.free_gifts.products').length == 0) {\n                throw new Error($.mage.__('You should choose Promo products.'));\n            }\n\n            form.collectAdditionalData();\n            wizard.data.rule_settings = form.source.get('data');\n\n        },\n        back: function (wizard) {\n        }\n    });\n});\n","Amasty_SalesRuleWizard/js/ui/preview.js":"define([\n    'uiComponent',\n    'jquery',\n    'knockout',\n    'underscore',\n    'uiRegistry',\n    'mage/translate'\n], function (Component, $, ko, _, registry, $t) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            buyX: '',\n            productCondition: '',\n            receive: '',\n            applyType: '',\n            applyTime: '',\n            scenario: '',\n            discountStep: 1,\n            discountAmount: 0,\n            isProductConditions: 0,\n            productConditionsData: '',\n            isSameProduct: 0,\n            freeType: 0,\n            freeGiftsArray: [],\n            isCoupon: 0,\n            couponCode: '',\n            applyTimeData: '',\n            applyTimeLimit: 1,\n            isApplyConditions: 0,\n            applyConditionsData: '',\n            imports: {\n                scenario: \"promo-steps-wizard_step1:selectedScenario\",\n                discountStep: \"${ $.settings_data }.discount_step\",\n                isProductConditions: \"${ $.settings_data }.is_actions\",\n                productConditionsData: \"${ $.settings_data }.rule.actions\",\n                discountAmount: \"${ $.settings_data }.discount_amount\",\n                isSameProduct: \"${ $.settings_data }.is_same_product\",\n                freeType: \"${ $.settings_data }.extension_attributes.ampromo_rule.type\",\n                freeGiftsArray: \"${ $.settings_data }.free_gifts.products\",\n                isCoupon: \"${ $.apply_data }.is_coupon\",\n                couponCode: \"${ $.apply_data }.coupon_code\",\n                applyTimeData: \"${ $.apply_data }.apply_time\",\n                applyTimeLimit: \"${ $.apply_data }.maximum_times\",\n                isApplyConditions: \"${ $.apply_data }.is_conditions\",\n                applyConditionsData: \"${ $.apply_data }.rule.conditions\"\n            }\n        },\n        conditionText: '',\n        initObservable: function () {\n            this._super().observe([\n                'scenario',\n                'discountStep',\n                'isProductConditions',\n                'productConditionsData',\n                'discountAmount',\n                'isSameProduct',\n                'freeType',\n                'freeGiftsArray',\n                'isCoupon',\n                'couponCode',\n                'applyTimeData',\n                'applyTimeLimit',\n                'isApplyConditions',\n                'applyConditionsData'\n            ]);\n\n            this.buyX = ko.computed(function () {\n                var result = 'Should ',\n                    amount = (this.discountStep() * 1);\n                if (this.scenario() == 'spent_x_get_y') {\n                    result += 'spent ' + amount + ' on';\n                } else {\n                    result += 'buy ' + amount;\n                }\n\n                if (this.isProductConditions() == 1) {\n                    result += ' specified';\n                } else {\n                    result += ' any';\n                }\n                result += amount > 1 && this.scenario() != 'spent_x_get_y' ? ' products' : ' product';\n\n                return result;\n            }, this);\n\n            this.productCondition = ko.computed(function () {\n                if (this.isProductConditions() == 1 && this.productConditionsData()) {\n                    return this.collectProductConditions();\n                }\n\n                return '';\n            }, this);\n\n            this.receive = ko.computed(function () {\n                var amount = (this.discountAmount() * 1),\n                    result = 'To get ' + amount;\n\n                if (this.isSameProduct() == 1) {\n                    result += ' of the same product';\n                } else {\n                    result += amount > 1 ? ' products ' : ' product ';\n\n                    var names = [];\n                    this.freeGiftsArray.each(function (product) {\n                        names.push(product.name);\n                    });\n\n                    if (this.freeType() * 1) {\n                        result += ' to choose from';\n                    } else {\n                        result += ' of each products';\n                    }\n\n                    result += ' \"' + names.join('\", \"') + '\"';\n                }\n\n                return result + ' for free';\n            }, this);\n\n            this.applyType = ko.computed(function () {\n                var result = 'Your Rule will be triggered ';\n                if (this.isCoupon() == 0) {\n                    return result + 'automatically'\n                }\n\n                return result + 'by special coupon code \"' + this.couponCode() + '\"';\n            }, this);\n\n            this.applyTime = ko.computed(function () {\n                switch (this.applyTimeData()) {\n                    case 'first':\n                        return 'only First Time';\n                    case 'every':\n                        return 'Every Time';\n                    case 'limit':\n                        return 'Every Time with limit \"' + this.applyTimeLimit() + '\"';\n                }\n            }, this);\n\n            this.applyConditions = ko.computed(function () {\n                if (this.isApplyConditions() == 1 && this.applyConditionsData()) {\n                    return 'if the conditions are met: ' + this.collectApplyConditions();\n                }\n\n                return '';\n            }, this);\n\n            return this;\n        },\n        getTextContent: function () {\n            var result = this.buyX();\n\n            if (this.productCondition()) {\n                result += \"\\n\" + this.productCondition();\n            }\n            result += \"\\n\" + this.receive() + \"\\n\" + this.applyType() + ' ' + this.applyTime();\n            if (this.applyConditions()) {\n                result += \"\\n\" + this.applyConditions();\n            }\n\n            return this._convertToText(result);\n        },\n        /**\n         * @param {string} html\n         * @returns {string}\n         * @private\n         */\n        _convertToText: function (html) {\n            var tmp = document.createElement('div');\n            tmp.innerHTML = html;\n\n            return tmp.textContent || tmp.innerText;\n        },\n        collectProductConditions: function () {\n            this.conditionText = '<div class=\"condition\">';\n            var contents = $('#amasty_promowizard_rule_settingsrule_actions_fieldset_ > .rule-tree-wrapper').contents();\n            this._ruleTreeWalker(contents, false);\n            this.conditionText += '</div>';\n\n            return this.conditionText;\n        },\n        collectApplyConditions: function () {\n            this.conditionText = '<div class=\"condition\">';\n            var contents = $('#amasty_promowizard_apply_settingsrule_conditions_fieldset_ > .rule-tree-wrapper').contents();\n            this._ruleTreeWalker(contents, false);\n            this.conditionText += '</div>';\n\n            return this.conditionText;\n        },\n        /**\n         * @param {Array} contents\n         * @param {Boolean} onlyText\n         * @private\n         */\n        _ruleTreeWalker: function (contents, onlyText) {\n            _.each(contents, function (elem) {\n                if (elem.nodeType === 3) {\n                    if (elem.data) {\n                        this.conditionText += elem.data;\n                    }\n                } else if (onlyText) {\n                    return; //continue\n                } else if (elem.nodeName == 'SPAN') {\n                    this._ruleTreeWalker($(elem).children('.label').contents(), true);\n                } else if (elem.nodeName == 'UL') {\n                    this.conditionText += \"\\n\" + '<div class=\"condition\">';\n                    var children = $(elem).children('li'),\n                        max = children.length - 2;\n\n                    _.each(children, function (liElem, iteration) {\n                        this._ruleTreeWalker($(liElem).contents(), false);\n                        if (iteration < max) {\n                            this.conditionText += \"\\n\" + '<br/>';\n                        }\n                    }.bind(this));\n\n                    this.conditionText += \"\\n\" +'</div>';\n                }\n            }.bind(this));\n        }\n    });\n});\n","Amasty_SalesRuleWizard/js/ui/form/form.js":"define([\n    'underscore',\n    'jquery',\n    'Magento_Ui/js/form/form'\n], function (_, $, Form) {\n    'use strict';\n\n    /**\n     * Collect form data.\n     *\n     * @param {Array} items\n     * @returns {Object}\n     */\n    function collectData(items) {\n        var result = {},\n            name;\n\n        items = Array.prototype.slice.call(items);\n\n        items.forEach(function (item) {\n            name = arrayNameToPath(item.name);\n            switch (item.type) {\n                case 'checkbox':\n                    result[name] = +!!item.checked;\n                    break;\n\n                case 'radio':\n                    if (item.checked) {\n                        result[name] = item.value;\n                    }\n                    break;\n\n                case 'select-multiple':\n                    result[name] = _.pluck(item.selectedOptions, 'value');\n                    break;\n\n                default:\n                    result[name] = item.value;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     *  parse \"rule[conditions][1-1][value]\n     *  to \"rule.conditions.1-1.value\"\n     *\n     * @param {String} arrayName\n     * @return {String}\n     */\n    function arrayNameToPath(arrayName) {\n        var path = arrayName.replace(new RegExp(\"\\\\[]|]\", 'g'), '');\n        return path.replace(new RegExp(\"\\\\[\", 'g'), '.');\n    }\n\n    return Form.extend({\n        collectAdditionalData: function () {\n            var additional = collectData(this.additionalFields),\n                source = this.source;\n\n            _.each(additional, function (value, name) {\n                source.set('data.' + name, value);\n            });\n        }\n    });\n});","Amasty_Rules/js/form.js":"define([\n    'jquery',\n    'uiRegistry',\n    'mage/translate',\n], function ($, registry) {\n    var defaultOptions;\n    var amrulesForm = {\n        update: function (type) {\n            if (!defaultOptions) {\n                defaultOptions = [];\n                options = $('[data-index=\"amrulesrule[apply_discount_to]\"] select')[0].options;\n                $.each(options, function (key, el) {\n                    defaultOptions[key] = el.label;\n                });\n            }\n            $.each($('[data-index=\"amrulesrule[apply_discount_to]\"] select')[0].options, function (key, el) {\n                el.label = defaultOptions[key];\n                el.text = defaultOptions[key];\n            });\n            var action = '';\n            this.resetFields(type);\n            this.renameFieldsToBaseNames();\n            var actionFieldset = $('#' + type + 'rule_actions_fieldset_').parent();\n            var notice = $('[data-index=\"simple_action\"] .admin__field-note');\n            var discountStep = $('[data-index=\"discount_step\"]');\n            var promoCategories = $('[data-index=\"amrulesrule[promo_cats]\"]');\n            var discountQty = $('[data-index=\"discount_qty\"]');\n            var applyTo = require('uiRegistry').get(\"sales_rule_form.sales_rule_form.actions.actions_apply_to.html_content\");\n            var categoriesSetTooltip = $('[data-index=\"amrulesrule[promo_cats]\"] .admin__field-tooltip');\n            var skusSetTooltip = $('[data-index=\"amrulesrule[promo_skus]\"] .admin__field-tooltip');\n\n            window.amRulesHide = 0;\n\n            actionFieldset.show();\n            if (typeof window.amPromoHide != \"undefined\" && window.amPromoHide == 1) {\n                actionFieldset.hide();\n            }\n\n            var selector = $('[data-index=\"simple_action\"] select');\n            if (type !== 'sales_rule_form') {\n                action = selector[1] ? selector[1].value : selector[0].value;\n            } else {\n                action = selector.val();\n            }\n\n            this.checkFieldsValue();\n            this.renameRulesSetting(action);\n            this.changeNoticeValue(notice, action);\n            this.showElement(discountStep);\n            this.showElement(discountQty);\n            applyTo.visible(true);\n            this.showElement(notice);\n            this.hideElement(categoriesSetTooltip);\n            this.hideElement(skusSetTooltip);\n\n            if (action.match(/^ampromo/)) {\n                this.hideFields(['simple_free_shipping', 'apply_to_shipping'], type);\n            }\n\n            switch (action) {\n                case 'ampromo_cart':\n                    this.hideFields(['discount_qty', 'discount_step'], type);\n                    break;\n                case 'groupn':\n                    this.hideElement(discountQty);\n                    this.showElement(notice);\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'buyxgety_anyproducts':\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[nqty]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    this.showNote();\n                    break;\n                case 'thecheapest':\n                case 'thecheapest_fixprice':\n                case 'themostexpencive':\n                case 'moneyamount':\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'aftern_disc':\n                    this.renameDropdownOptions();\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'eachn_perc':\n                    this.showFields([\n                        'amrulesrule[use_for]',\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'groupn_disc':\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'eachn_fixdisc':\n                case 'eachn_fixprice':\n                    this.checkPriceSelector();\n                    this.showFields([\n                        'amrulesrule[use_for]',\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'aftern_fixdisc':\n                case 'aftern_fixed':\n                    this.checkPriceSelector();\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'eachmaftn_perc':\n                    this.renameDropdownOptions();\n                    this.showFields([\n                        'amrulesrule[eachm]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'eachmaftn_fixdisc':\n                case 'eachmaftn_fixprice':\n                    this.renameDropdownOptions();\n                    this.checkPriceSelector();\n                    this.showFields([\n                        'amrulesrule[eachm]',\n                        'amrulesrule[apply_discount_to]',\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'buyxgetn_fixprice':\n                case 'buyxgetn_fixdisc':\n                    this.checkPriceSelector();\n                    this.showFields([\n                        'amrulesrule[nqty]',\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    this.showPromoItems();\n                    this.showElement(promoCategories);\n                    this.showNote();\n                    break;\n                case 'buyxgetn_perc':\n                    this.showFields([\n                        'amrulesrule[nqty]',\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    this.showPromoItems();\n                    this.showElement(promoCategories);\n                    this.showNote();\n                    break;\n                case 'tiered_wholecheaper':\n                    this.hideElement(discountQty);\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    break;\n                case 'tiered_buyxgetcheapern':\n                    this.hideElement(discountQty);\n                    this.showFields([\n                        'amrulesrule[general_skip_settings]',\n                        'amrulesrule[skip_rule]',\n                        'amrulesrule[priceselector]',\n                        'amrulesrule[max_discount]'\n                    ], type);\n                    this.showPromoItems();\n                    this.showElement(promoCategories);\n                    break;\n                case 'setof_fixed':\n                case 'setof_percent':\n                    this.showElement(categoriesSetTooltip);\n                    this.showElement(skusSetTooltip);\n                    this.hideElement(discountStep);\n                    applyTo.visible(false);\n                    actionFieldset.hide();\n                    window.amRulesHide = 1;\n                    this.showFields(['amrulesrule[max_discount]'], type);\n                    this.showPromoItems();\n                    break;\n                default:\n                    this.hideElement(notice);\n            }\n\n            if (action.indexOf('fixprice') >= 0 || action == 'groupn' || action == 'setof_fixed') {\n                this.hideFields(['apply_to_shipping'], type);\n            }\n        },\n\n        renameDropdownOptions: function () {\n            var newOptions = {\n                'asc': $.mage.__('Cheapest products, considering rule logic'),\n                'desc': $.mage.__('Most expensive products, considering rule logic')\n            },\n                dropdown = $('[data-index=\"amrulesrule[apply_discount_to]\"] select')[0].options;\n            $.each(dropdown, function (key, el) {\n                el.label = newOptions[el.value];\n                el.text = newOptions[el.value];\n            });\n        },\n\n        checkPriceSelector: function () {\n            var priceselector = require('uiRegistry').get('sales_rule_form.sales_rule_form.actions.amrulesrule[priceselector]');\n\n            if (priceselector.value() != 0) {\n                priceselector.value(0);\n            }\n        },\n\n        showPromoItems: function () {\n            $('[data-index=\"promo_items\"]').show();\n        },\n\n        hidePromoItems: function () {\n            $('[data-index=\"promo_items\"], [data-index=\"discount_step\"] .admin__field-note').hide();\n        },\n\n        showNote: function () {\n            $('[data-index=\"discount_step\"] .admin__field-note').show();\n        },\n\n        resetFields: function (type) {\n            this.showFields([\n                'discount_qty', 'discount_step', 'apply_to_shipping', 'simple_free_shipping'\n            ], type);\n            this.hideFields([\n                'amrulesrule[general_skip_settings]',\n                'amrulesrule[skip_rule]',\n                'amrulesrule[max_discount]',\n                'amrulesrule[nqty]',\n                'amrulesrule[priceselector]',\n                'amrulesrule[eachm]',\n                'amrulesrule[apply_discount_to]',\n                'amrulesrule[use_for]'\n            ], type);\n            this.hidePromoItems();\n        },\n\n        hideFields: function (names, type) {\n            return this.toggleFields('hide', names, type);\n        },\n\n        showFields: function (names, type) {\n            return this.toggleFields('show', names, type);\n        },\n\n        addPrefix: function (names, type) {\n            for (var i = 0; i < names.length; i++) {\n                names[i] = type + '.' + type + '.' + 'actions.' + names[i];\n            }\n\n            return names;\n        },\n\n        toggleFields: function (method, names, type) {\n            registry.get(this.addPrefix(names, type), function () {\n                for (var i = 0; i < arguments.length; i++) {\n                    arguments[i][method]();\n                }\n            });\n        },\n\n        renameRulesSetting: function (action) {\n            var discountStep = $('[data-index=\"discount_step\"] label span'),\n                promoSkus = $('[data-index=\"amrulesrule[promo_skus]\"] label span'),\n                promoCats = $('[data-index=\"amrulesrule[promo_cats]\"] label span'),\n                discountAmount = $('[data-index=\"discount_amount\"] label span'),\n                discountQty = $('[data-index=\"discount_qty\"] label span'),\n                discountRuleTree = $('[data-index=\"actions\"] .rule-tree fieldset legend span'),\n                discountPromoItems = $('[data-index=\"promo_items\"] div strong span').first();\n\n            discountRuleTree.text($.mage.__(\"Apply the rule only to cart items matching the following conditions (leave blank for all items).\"));\n            discountPromoItems.text($.mage.__(\"Define Y product (X and Y are different products not in the same category)\"));\n            promoSkus.text($.mage.__(\"Promo SKU\"));\n            promoCats.text($.mage.__(\"Promo Categories\"));\n\n            switch (action) {\n                case 'thecheapest':\n                case 'themostexpencive':\n                    discountAmount.text($.mage.__(\"Discount Amount (in %)\"));\n                    discountStep.text($.mage.__(\"Discount Qty Step (Buy X)\"));\n                    break;\n                case 'buyxgety_anyproducts':\n                    discountAmount.text($.mage.__(\"Discount Amount (in %)\"));\n                    discountStep.text($.mage.__(\"Number of X Products\"));\n                    break;\n                case 'buy_x_get_y':\n                    discountStep.text($.mage.__(\"Buy N Products\"));\n                    discountAmount.text($.mage.__(\"Number of Products with Discount\"));\n                    break;\n                case 'tiered_wholecheaper':\n                    discountAmount.text($.mage.__(\"Discount Amount Step (\u2026 whole Cart 5$ Cheaper), in %\"));\n                    discountStep.text($.mage.__(\"Cost Step (For Each 100$ Spent \u2026), in $\"));\n                    break;\n                case 'tiered_buyxgetcheapern':\n                    discountAmount.text($.mage.__(\"Discount Amount Step (\u2026 get Y 5$ Cheaper), in %\"));\n                    discountStep.text($.mage.__(\"Cost Step (For Each 10$ Spent on X\u2026 ), in $\"));\n                    discountRuleTree.text($.mage.__(\"Define X product\"));\n                    break;\n                case 'eachn_perc':\n                    discountAmount.text($.mage.__(\"Discount Amount (in %)\"));\n                    discountStep.text($.mage.__(\"Each N-th\"));\n                    break;\n                case 'eachn_fixdisc':\n                case 'eachn_fixprice':\n                    discountAmount.text($.mage.__(\"Discount Amount\"));\n                    discountStep.text($.mage.__(\"Each N-th\"));\n                    break;\n                case 'eachmaftn_perc':\n                    discountAmount.text($.mage.__(\"Discount Amount (in %)\"));\n                    discountStep.text($.mage.__(\"Each Product (step)\"));\n                    break;\n                case 'eachmaftn_fixdisc':\n                case 'eachmaftn_fixprice':\n                    discountAmount.text($.mage.__(\"Discount Amount\"));\n                    discountStep.text($.mage.__(\"Each Product (step)\"));\n                    break;\n                case 'buyxgetn_perc':\n                    discountAmount.text($.mage.__(\"Discount Amount (in %)\"));\n                    discountStep.text($.mage.__(\"Number of X Products\"));\n                    discountRuleTree.text($.mage.__(\"Define X product (leave blank for any product)\"));\n                    break;\n                case 'buyxgetn_fixprice':\n                case 'buyxgetn_fixdisc':\n                    discountAmount.text($.mage.__(\"Discount Amount\"));\n                    discountStep.text($.mage.__(\"Number of X Products\"));\n                    discountRuleTree.text($.mage.__(\"Define X product (leave blank for any product)\"));\n                    break;\n                case 'groupn_disc':\n                case 'setof_percent':\n                    discountAmount.text($.mage.__(\"Discount Amount (in %)\"));\n                    discountQty.text($.mage.__(\"Max Number of Sets Discount is Applied To\"));\n                    discountStep.text($.mage.__(\"Discount Qty Step (Buy X)\"));\n                    discountPromoItems.text($.mage.__(\"Define Product Set\"));\n                    promoSkus.text($.mage.__(\"Set Items by SKU\"));\n                    promoCats.text($.mage.__(\"Set Items by Category IDs\"));\n                    break;\n                case 'setof_fixed':\n                    discountAmount.text($.mage.__(\"Discount Amount\"));\n                    discountQty.text($.mage.__(\"Max Number of Sets Discount is Applied To\"));\n                    discountPromoItems.text($.mage.__(\"Define Product Set\"));\n                    promoSkus.text($.mage.__(\"Set Items by SKU\"));\n                    promoCats.text($.mage.__(\"Set Items by Category IDs\"));\n                    break;\n                case 'ampromo_eachn':\n                    discountStep.text($.mage.__(\"Each N-th\"));\n                    discountAmount.text($.mage.__(\"Number Of Gift Items\"));\n                    break;\n                case 'ampromo_cart':\n                case 'ampromo_items':\n                case 'ampromo_product':\n                case 'ampromo_spent':\n                    discountAmount.text($.mage.__(\"Number Of Gift Items\"));\n                    break;\n                default:\n                    discountStep.text($.mage.__(\"Discount Qty Step (Buy X)\"));\n                    discountAmount.text($.mage.__(\"Discount Amount\"));\n                    break;\n            }\n        },\n\n        showElement: function (name) {\n            name.show();\n        },\n\n        hideElement: function (name) {\n            name.hide();\n        },\n\n        renameFieldsToBaseNames: function () {\n            var discountQty = $('[data-index=\"discount_qty\"] label span');\n            discountQty.text($.mage.__(\"Maximum Qty Discount is Applied To\"));\n        },\n\n        checkFieldsValue: function () {\n            var discountQty = require('uiRegistry').get('sales_rule_form.sales_rule_form.actions.discount_qty'),\n                discountStep = require('uiRegistry').get('sales_rule_form.sales_rule_form.actions.discount_step');\n\n            if (discountQty.value() < 0) {\n                discountQty.value(0);\n            }\n\n            if (discountStep.value() == 0 || discountStep.value() == '') {\n                discountStep.value(1);\n            }\n        },\n\n        changeNoticeValue: function (notice, action) {\n            var groupnNoticeText = $.mage.__('Please, change the priority of this rule to 0. If more than one rule has priority 0, the discount can be calculated incorrectly </br>'),\n                noticeContent = '',\n                productSetNotice = '<div>' + $.mage.__(\"WARNING: \\'Product set\\' rules always have the highest prioity. If you have many rules and they work simultaneously, \\'Product set\\' rule is applied before any other one. If you have multiple \\'Product set\\' rules, they will be applied according to their priorities (still before all the other types of rules).\") + '</div>';\n\n            switch (action) {\n                case 'buyxgety_anyproducts':\n                    noticeContent = this.formUserGuideLink();\n                    break;\n                case 'thecheapest':\n                case 'thecheapest_fixprice':\n                    noticeContent = this.formUserGuideLink('1#the_cheapest_also_for_buy_1_get_1_free');\n                    break;\n                case 'themostexpencive':\n                    noticeContent = this.formUserGuideLink('2#the_most_expensive');\n                    break;\n                case 'moneyamount':\n                    noticeContent = this.formUserGuideLink('3#get_y_for_each_x_spent');\n                    break;\n                case 'buyxgetn_perc':\n                case 'tiered_wholecheaper':\n                case 'tiered_buyxgetcheapern':\n                case 'buyxgetn_fixprice':\n                case 'buyxgetn_fixdisc':\n                    noticeContent = this.formUserGuideLink('4#buy_x_get_y_x_and_y_are_different_products');\n                    break;\n                case 'eachn_perc':\n                case 'eachn_fixdisc':\n                case 'eachn_fixprice':\n                    noticeContent = this.formUserGuideLink('5#each_n-th');\n                    break;\n                case 'eachmaftn_perc':\n                case 'eachmaftn_fixdisc':\n                case 'eachmaftn_fixprice':\n                    noticeContent = this.formUserGuideLink('6#each_product_after_n');\n                    break;\n                case 'setof_fixed':\n                case 'setof_percent':\n                    noticeContent = productSetNotice + this.formUserGuideLink('8#product_set');\n                    break;\n                case 'groupn_disc':\n                    noticeContent = this.formUserGuideLink('7#each_group_of_n');\n                    break;\n                case 'groupn':\n                    noticeContent = groupnNoticeText + this.formUserGuideLink('7#each_group_of_n');\n                    break;\n            }\n            $(notice).html(noticeContent);\n        },\n\n        formUserGuideLink: function (ruleIdentificator) {\n            return $.mage.__('Please see ')\n                + '<a href=\"https://amasty.com/docs/doku.php?id=magento_2%3Aspecial-promotions&utm_source=extension&utm_medium=link&utm_campaign=userguide_sp_m2_'\n                + ruleIdentificator\n                + '\"  target=\"_blank\">'\n                + $.mage.__('usage example') + '</a>';\n        }\n    };\n\n    return amrulesForm;\n});","Fastly_Cdn/js/backends.js":"define([\n    \"jquery\",\n    'Magento_Ui/js/modal/confirm',\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    'mage/translate',\n], function ($, confirmation, setServiceLabel, overlay, resetAllMessages, showErrorMessage) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        let backends;\n        let backend_name;\n        let active_version = serviceStatus.active_version;\n        let conditionName = null;\n        let applyIf = null;\n        let conditionPriority = null;\n        let backendModal;\n        let conditionModal;\n        let conditions;\n        let oldName;\n\n        /**\n         * Backend modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let backendOptions = {\n            title: jQuery.mage.__(' '),\n            content: function () {\n                return document.getElementById('fastly-create-backend-template').textContent;\n            },\n            actionOk: function () {\n                configureBackend(active_version);\n            }\n        };\n\n        let createBackendOptions = {\n            title: jQuery.mage.__('Create Backend'),\n            content: function () {\n                return document.getElementById('fastly-create-backend-template').textContent;\n            },\n            actionOk: function () {\n                createBackend(active_version);\n            }\n        };\n\n        let createConditionOptions = {\n            title: jQuery.mage.__('Create a new request condition'),\n            content: function () {\n                return document.getElementById('fastly-create-condition-template').textContent;\n            },\n            actionOk: function () {\n                createCondition();\n            },\n        };\n\n        /**\n         * Trigger the Backends list call\n         */\n        getBackends(active_version, false).done(function (response) {\n            $('.loading-backends').hide();\n            if (response !== false) {\n                if (response.backends.length > 0) {\n                    backends = response.backends;\n                    processBackends(response.backends);\n                } else {\n                    $('.no-backends').show();\n                }\n            }\n        });\n\n        /**\n         * Get the list of Backends\n         *\n         * @param active_version\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function getBackends(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.fetchBackendsUrl,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version}\n            });\n        }\n\n        function getAllConditions(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getAllConditionsUrl,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version}\n            });\n        }\n\n        function renderAllConditions(active_version, loaderVisibility)\n        {\n            $('#condition_name').val('');\n            $('#apply_if').val('');\n            $('#condition_priority').val('');\n            return getAllConditions(active_version, loaderVisibility)\n                .done(function (response) {\n                    let html = '';\n                    $('#attach_span').hide();\n                    if (response !== false) {\n                        conditions = response.conditions;\n                        html += '<option value=\"\">no condition</option>';\n                        $.each(conditions, function (index, condition) {\n                            if (condition.type === \"REQUEST\") {\n                                html += '<option value=\"'+condition.name+'\">'+condition.name+' ('+condition.type+') '+condition.statement+'</option>';\n                            }\n                        });\n                    }\n                    $('#conditions').show();\n                    $('#conditions').prop('disabled', false);\n                    $('#detach').show();\n                    $('#create-condition').show();\n                    $('#sep').show();\n                    $('#conditions').html(html);\n                })\n        }\n\n        /**\n         *\n         * @param {array} dataCenters\n         */\n        function generateDataCenterOptions(dataCenters)\n        {\n            $.each(dataCenters, function (i, group) {\n                let optGroup = $(document.createElement('optgroup'));\n                $(optGroup).attr('label', i);\n\n                $.each(group, function (j, dataCenter) {\n                    let option = $(document.createElement('option'));\n                    let text = $(document.createTextNode(dataCenter.label))\n\n                    $(option).append(text);\n                    $(option).val(dataCenter.value);\n                    $(optGroup).append(option);\n                });\n\n                $('#backend_shield').append(optGroup)\n            });\n        }\n\n        /**\n         * Process and display the list of Backends\n         *\n         * @param backends\n         */\n        function processBackends(backends)\n        {\n            $('#fastly-backends-list').html('');\n            $.each(backends, function (index, backend) {\n                let html = `<tr id=\"fastly_${index}\">\n                    <td>\n                        <input data-backendId='${index}' id='backend_${index}' value='${backend.name}' disabled='disabled' class='input-text' type='text'/>\n                    </td>\n                    <td class='col-actions'>\n                        <button class='action-delete fastly-edit-backend-icon' data-backend-id='${index}' id='fastly-edit-backend_${index}' title='Edit backend' type='button'></button>\n                        <button class='action-delete fastly-remove-backend-icon' data-backend-id='${index}' data-backend-name='${backend.name}' id='fastly-remove-backend_${index}' title='Remove backend' type='button'></button>\n                    </td>\n                </tr>`;\n                $('#fastly-backends-list').append(html);\n            });\n        }\n\n        /**\n         * Update the Backend configuration\n         */\n        function configureBackend()\n        {\n            let activate_backend = false;\n\n            if ($('#fastly_activate_backend').is(':checked')) {\n                activate_backend = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.configureBackendUrl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_backend,\n                    'old_name': oldName,\n                    'name': $('#backend_name').val(),\n                    'backend_address': $('#backend_address').val(),\n                    'auto_loadbalance': $('#auto_loadbalance').val(),\n                    'weight': $('#weight').val(),\n                    'shield': $('#backend_shield').val(),\n                    'use_ssl': $('input:radio[name=tls-radio]:checked').val(),\n                    'tls_yes_port': $('#tls-yes-port').val(),\n                    'tls_no_port': $('#tls-no-port').val(),\n                    'ssl_check_cert': $('input:radio[name=certificate-radio]:checked').val(),\n                    'ssl_cert_hostname': $('#certificate-hostname').val(),\n                    'ssl_sni_hostname': $('#sni-hostname').val(),\n                    'ssl_ca_cert': $('#tls-ca-certificate').val(),\n                    'min_tls_version': $('#minimum-tls').val(),\n                    'max_tls_version': $('#maximum-tls').val(),\n                    'ssl_ciphers': $('#ciphersuites').val(),\n                    'max_conn': $('#backend_maximum_connections').val(),\n                    'error_threshold': $('#backend_error_threshold').val(),\n                    'connect_timeout': $('#backend_connect_timeout').val(),\n                    'first_byte_timeout': $('#backend_first_byte_timeout').val(),\n                    'between_bytes_timeout': $('#backend_between_bytes_timeout').val(),\n                    'override_host': $('#override_host').val(),\n                    'condition_name': $('#condition_name').val(),\n                    'apply_if': $('#apply_if').val(),\n                    'condition_priority': $('#condition_priority').val(),\n                    'request_condition': $('#conditions').val()\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        $('#fastly-success-backend-button-msg').text($.mage.__('Backend \"%1\" is successfully updated.').replace('%1', backend_name)).show();\n                        active_version = response.active_version;\n                        backendModal.modal('closeModal');\n                        getBackends(active_version, false).done(function (resp) {\n                            $('.loading-backends').hide();\n                            if (resp !== false) {\n                                if (resp.backends.length > 0) {\n                                    backends = resp.backends;\n                                    processBackends(resp.backends);\n                                } else {\n                                    $('.no-backends').show();\n                                }\n                            }\n                        })\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                }\n            });\n        }\n\n        function createBackend(active_version)\n        {\n            let activate_backend = false;\n\n            if ($('#fastly_activate_backend').is(':checked')) {\n                activate_backend = true;\n            }\n\n            let condition = $('#conditions').val();\n            let backendName = $('#backend_name').val();\n            let backendAddress = $('#backend_address').val();\n            let backendShield = $('#backend_shield').val();\n            let enableTls = $('input:radio[name=tls-radio]:checked').val();\n            let tlsYesPort = $('#tls-yes-port').val();\n            let tlsNoPort = $('#tls-no-port').val();\n            let verifyCertificate = $('input:radio[name=certificate-radio]:checked').val();\n            let certificateHostname = $('#certificate-hostname').val();\n            let sniHostname = $('#sni-hostname').val();\n            let matchSni = $('#match-sni').is(':checked');\n            let tlsCaCertificate = $('#tls-ca-certificate').val();\n            let minimumTls = $('#minimum-tls').val();\n            let maximumTls = $('#maximum-tls').val();\n            let ciphersuites = $('#ciphersuites').val();\n            let tlsClientCertificate = $('#tls-client-certificate').val();\n            let tlsClientKey = $('#tls-client-key').val();\n            let maximumConnections = $('#backend_maximum_connections').val();\n            let errorThreshold = $('#backend_error_threshold').val();\n            let connectionTimeout = $('#backend_connect_timeout').val();\n            let firstByteTimeout = $('#backend_first_byte_timeout').val();\n            let betweenBytesTimeout = $('#backend_between_bytes_timeout').val();\n            let autoLoadBalance = $('#auto_loadbalance').val();\n            let weight = $('#weight').val();\n            let overrideHost = $('#override_host').val();\n            let conditionName = $('#condition_name').val();\n            let applyIf = $('#apply_if').val();\n            let conditionPriority = $('#condition_priority').val();\n            let requestCondition = $('#conditions').val();\n\n            $.ajax({\n                type: \"POST\",\n                url: config.createBackendUrl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_backend,\n                    'name': backendName,\n                    'address': backendAddress,\n                    'shield': backendShield,\n                    'use_ssl': enableTls,\n                    'tls_yes_port': tlsYesPort,\n                    'tls_no_port': tlsNoPort,\n                    'ssl_check_cert': verifyCertificate,\n                    'ssl_cert_hostname': certificateHostname,\n                    'ssl_sni_hostname': sniHostname,\n                    'match_sni': matchSni,\n                    'ssl_ca_cert': tlsCaCertificate,\n                    'max_tls_version': maximumTls,\n                    'min_tls_version': minimumTls,\n                    'ssl_ciphers': ciphersuites,\n                    'ssl_client_cert': tlsClientCertificate,\n                    'ssl_client_key': tlsClientKey,\n                    'max_conn': maximumConnections,\n                    'error_threshold': errorThreshold,\n                    'connect_timeout': connectionTimeout,\n                    'first_byte_timeout': firstByteTimeout,\n                    'between_bytes_timeout': betweenBytesTimeout,\n                    'auto_loadbalance': autoLoadBalance,\n                    'weight': weight,\n                    'form': true,\n                    'override_host': overrideHost,\n                    'condition_name': conditionName,\n                    'apply_if': applyIf,\n                    'condition_priority': conditionPriority,\n                    'request_condition': requestCondition\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        $('#fastly-success-backend-button-msg').text($.mage.__('Backend \"%1\" is successfully created.').replace('%1', backendName)).show();\n                        active_version = response.active_version;\n                        backendModal.modal('closeModal');\n                        $('#fastly_add_backend_button').remove();\n                        $('#fastly_cancel_backend_button').remove();\n                        $('.hostname').remove();\n                        $('.backend-note').remove();\n                        $('#fastly_create_backend_button').show();\n                        getBackends(active_version, false).done(function (resp) {\n                            $('.loading-backends').hide();\n                            if (resp !== false) {\n                                if (resp.backends.length > 0) {\n                                    backends = resp.backends;\n                                    processBackends(resp.backends);\n                                } else {\n                                    $('.no-backends').show();\n                                }\n                            }\n                        });\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                }\n            });\n        }\n\n        function createCondition()\n        {\n            let conditionName = $('#condition_name_modal').val();\n            let applyIf = $('#apply_if_modal').val();\n            let conditionPriority = $('#condition_priority_modal').val();\n            if (applyIf.length > 512) {\n                showErrorMessage('The expression cannot contain more than 512 characters.');\n                return;\n            } else if (applyIf.length < 1 || conditionName.length < 1) {\n                showErrorMessage('Please fill in the required fields.');\n                return;\n            } else if (isNaN(parseInt(conditionPriority))) {\n                showErrorMessage('Priority value must be an integer.');\n                return;\n            }\n\n            $('#conditions').prop('disabled', true);\n            $('#conditions').html('<option value=\"'+conditionName+'\" selected=\"selected\">'+conditionName+' (REQUEST) '+applyIf+'</option>');\n            $('#condition_name').val(conditionName);\n            $('#apply_if').val(applyIf);\n            $('#condition_priority').val(conditionPriority);\n            $('#detach').hide();\n            $('#create-condition').show();\n            $('#sep').hide();\n            conditionModal.modal('closeModal');\n            $('.fastly-message-error').hide();\n        }\n\n        function deleteBackend(active_version, backend_name)\n        {\n            $.ajax({\n                type: \"POST\",\n                url: config.deleteBackendUrl,\n                data: {\n                    'active_version': active_version,\n                    'name': backend_name\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        $('#fastly-success-backend-button-msg').text($.mage.__('Backend \"%1\" was successfully deleted.').replace('%1', backend_name)).show();\n                        active_version = response.active_version;\n                        $('.loading-backends').show();\n                        $('#fastly-backends-list').html('');\n                        getBackends(active_version, false).done(function (resp) {\n                            $('.loading-backends').hide();\n                            if (resp !== false) {\n                                if (resp.backends.length > 0) {\n                                    backends = resp.backends;\n                                    processBackends(resp.backends);\n                                } else {\n                                    $('.no-backends').show();\n                                }\n                            }\n                        });\n                    } else {\n                        $('#fastly-error-backend-button-msg').text(response.msg).show();\n                    }\n                }\n            });\n        }\n\n        $('body').on('click', '#fastly_create_backend_button', function () {\n            let hostname = $('<input type=\"text\" class=\"hostname\">');\n            let addBtn = $('<button id=\"fastly_add_backend_button\" title=\"Add\" type=\"button\" class=\"action-default scalable\" style=\"margin-right: 10px\"><span>Add</span></button>');\n            let cancelBtn = $('<button id=\"fastly_cancel_backend_button\" title=\"Cancel\" type=\"button\" class=\"action-default scalable\" style=\"\"><span>Cancel</span></button>');\n            $(this).after(hostname);\n            hostname.after(addBtn);\n            addBtn.after(cancelBtn);\n            hostname.after('<p class=\"note backend-note\">Enter a hostname or IPv4 address for the backend</p>');\n            $(this).hide();\n            hostname.focus();\n        });\n\n        $('body').on('click', '#fastly_add_backend_button', function () {\n            let hostnameVal = $('.hostname').val();\n            if (hostnameVal !== '') {\n                if (isAlreadyConfigured !== true) {\n                    $(this).attr('disabled', true);\n                    return alert($.mage.__('Please save config prior to continuing.'));\n                }\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                }).done(function (checkService) {\n                    $.ajax({\n                        type: \"POST\",\n                        url: config.createBackendUrl,\n                        showLoader: true,\n                        data: {\n                            address: hostnameVal,\n                            form: false\n                        }\n                    }).done(function (response) {\n                        if (response.status !== false) {\n                            active_version = checkService.active_version;\n                            let next_version = checkService.next_version;\n                            let service_name = checkService.service.name;\n\n                            overlay(createBackendOptions);\n                            backendModal = modal;\n                            setServiceLabel(active_version, next_version, service_name);\n                            $('.upload-button span').text('Create');\n                            $('#conditions').hide();\n                            $('#detach').hide();\n                            $('#create-condition').hide();\n                            $('#sep').hide();\n                            $('#backend_address').val(hostnameVal);\n                            $('#sni-hostname').val(hostnameVal);\n                            $('#certificate-hostname').val(hostnameVal);\n                            verifyCertificateNotification();\n\n                            if ($('#auto_loadbalance').val() === '0') {\n                                $('.weight').hide();\n                            } else {\n                                $('.weight').show();\n                            }\n                            $('#tls-no-port').attr('disabled', true);\n\n                            generateDataCenterOptions(response.data_centers);\n\n                        } else {\n                            $('#fastly-error-create-backend-button-msg').text($.mage.__(response.msg)).show();\n                        }\n                    });\n                });\n            }\n        });\n\n        $('body').on('click', '#fastly_cancel_backend_button', function () {\n            $('#fastly_add_backend_button').remove();\n            $('#fastly_cancel_backend_button').remove();\n            $('.hostname').remove();\n            $('.backend-note').remove();\n            $('#fastly_create_backend_button').show();\n        });\n\n        $('body').on('change', '#auto_loadbalance', function () {\n            if (this.value === '1') {\n                $('.weight').show();\n            } else {\n                $('.weight').hide();\n            }\n        });\n\n        $('body').on('click', 'input:radio[name=tls-radio]', function () {\n            if (this.value === '0') {\n                $('#certificate-yes').attr('disabled', true);\n                $('#certificate-no').attr('disabled', true);\n                $('#certificate-hostname').attr('disabled', true);\n                $('#tls-yes-port').attr('disabled', true);\n                $('#tls-no-port').attr('disabled', false);\n                $('#sni-hostname').attr('disabled', true);\n                $('#match-sni').attr('disabled', true);\n                $('#tls-ca-certificate').attr('disabled', true);\n                $('#minimum-tls').attr('disabled', true);\n                $('#maximum-tls').attr('disabled', true);\n                $('#ciphersuites').attr('disabled', true);\n                $('#tls-client-certificate').attr('disabled', true);\n                $('#tls-client-key').attr('disabled', true);\n            } else {\n                $('#certificate-yes').attr('disabled', false);\n                $('#certificate-no').attr('disabled', false);\n                $('#certificate-hostname').attr('disabled', false);\n                $('#tls-yes-port').attr('disabled', false);\n                $('#tls-no-port').attr('disabled', true);\n                $('#sni-hostname').attr('disabled', false);\n                $('#match-sni').attr('disabled', false);\n                $('#tls-ca-certificate').attr('disabled', false);\n                $('#minimum-tls').attr('disabled', false);\n                $('#maximum-tls').attr('disabled', false);\n                $('#ciphersuites').attr('disabled', false);\n                $('#tls-client-certificate').attr('disabled', false);\n                $('#tls-client-key').attr('disabled', false);\n            }\n        });\n\n        $('body').on('click', 'input:radio[name=certificate-radio]', function () {\n            if (this.value === '0') {\n                $('#certificate-hostname').attr('disabled', true);\n                $('#match-sni').attr('disabled', true);\n            } else {\n                $('#certificate-hostname').attr('disabled', false);\n                $('#match-sni').attr('disabled', false);\n            }\n        });\n\n        function initValues(backend)\n        {\n            $('#backend_name').val(backend.name);\n            $('#backend_address').val(backend.address);\n            $('#backend_shield option[value=\\'' + backend.shield +'\\']').attr('selected','selected');\n            let loadBalance = backend.auto_loadbalance === true ? 1 : 0;\n            $('#auto_loadbalance option[value=\\'' + loadBalance +'\\']').attr('selected', 'selected');\n            $('#weight').val(backend.weight);\n\n            if (!loadBalance) {\n                $('#weight').parent().parent().hide();\n            }\n\n            if (backend.request_condition) {\n                renderAllConditions(active_version, true).done(function () {\n                    $('#conditions').val(backend.request_condition);\n                })\n            } else {\n                $('#conditions').hide();\n                $('#detach').hide();\n                $('#create-condition').hide();\n                $('#sep').hide();\n            }\n\n            if (backend.ssl_check_cert !== false) {\n                $('#certificate-yes').prop('checked', true);\n                $('#certificate-hostname').val(backend.ssl_cert_hostname);\n            } else {\n                $('#certificate-no').prop('checked', true);\n                $('#certificate-hostname').prop('disabled', true);\n                $('#match-sni').prop('disabled', true);\n            }\n\n            if (backend.use_ssl) {\n                $('#tls-yes').prop('checked', true);\n                $('#tls-no').prop('checked', false);\n                $('#tls-no-port').prop('disabled', true);\n            } else {\n                $('#tls-yes').prop('checked', false);\n                $('#tls-no').prop('checked', true);\n                $('#tls-no-port').val(backend.port);\n                $('#certificate-hostname').prop('disabled', true);\n                $('#tls-ca-certificate').prop('disabled', true);\n                $('#certificate-yes').prop('disabled', true);\n                $('#certificate-no').prop('disabled', true);\n                $('#sni-hostname').prop('disabled', true);\n                $('#minimum-tls').prop('disabled', true);\n                $('#match-sni').prop('disabled', true);\n                $('#maximum-tls').prop('disabled', true);\n                $('#ciphersuites').prop('disabled', true);\n                $('#tls-client-key').prop('disabled', true);\n                $('#tls-yes-port').prop('disabled', true);\n                $('#tls-client-certificate').prop('disabled', true);\n            }\n\n            if (backend.auto_loadbalance !== true) {\n                $('#weight').parent().parent().hide();\n            }\n\n            $('#certificate-hostname').val(backend.ssl_cert_hostname);\n            $('#sni-hostname').val(backend.ssl_sni_hostname);\n            $('#tls-ca-certificate').val(backend.ssl_ca_cert);\n            $('#minimum-tls').val(backend.min_tls_version);\n            $('#maximum-tls').val(backend.max_tls_version);\n            $('#ciphersuites').val(backend.ssl_ciphers);\n            $('#tls-client-certificate').val(backend.ssl_client_cert);\n            $('#tls-client-key').val(backend.ssl_client_key);\n            $('#backend_maximum_connections').val(backend.max_conn);\n            $('#backend_error_threshold').val(backend.error_threshold);\n            $('#backend_connect_timeout').val(backend.connect_timeout);\n            $('#backend_first_byte_timeout').val(backend.first_byte_timeout);\n            $('#backend_between_bytes_timeout').val(backend.between_bytes_timeout);\n            $('#override_host').val(backend.override_host);\n        }\n\n        function verifyCertificateNotification()\n        {\n            $('#certificate-no').on('change', function () {\n                $('#certificate-no-msg').empty();\n                let msg = document.createTextNode('Not verifying the certificate has serious security implications,' +\n                    ' including vulnerability to');\n\n                let a = document.createElement('a');\n                let text = document.createTextNode(' man-in-the-middle attacks.');\n                a.appendChild(text);\n                a.title = 'man-in-the-middle attacks';\n                a.href = 'https://en.wikipedia.org/wiki/Man-in-the-middle_attack';\n                a.target = '_blank';\n                $('#certificate-no-msg').append(msg);\n                $('#certificate-no-msg').append(a);\n            });\n            $('#certificate-yes').on('change', function () {\n                $('#certificate-no-msg').empty();\n            });\n        }\n        /**\n         * Edit Backend button on click event\n         */\n        $('body').on('click', 'button.fastly-edit-backend-icon', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            let backend_id = $(this).data('backend-id');\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (checkService) {\n                active_version = checkService.active_version;\n                let next_version = checkService.next_version;\n                let service_name = checkService.service.name;\n\n                getBackends(active_version, true).done(function (response) {\n                    if (response !== false) {\n                        if (response.backends.length > 0) {\n                            backends = response.backends;\n                        }\n                    }\n\n                    if (backends != null && backend_id != null) {\n                        overlay(backendOptions);\n                        backendModal = modal;\n                        setServiceLabel(active_version, next_version, service_name);\n                        generateDataCenterOptions(response.data_centers);\n                        initValues(backends[backend_id]);\n                        verifyCertificateNotification();\n                        oldName = $('#backend_name').val();\n                        $('.upload-button span').text('Update');\n                        backend_name = backends[backend_id].name;\n                        $('.modal-title').text($.mage.__('Backend \"%1\" configuration').replace('%1', backend_name));\n\n                        if (typeof response.data_centers === \"undefined\")\n                            return;\n                    }\n                });\n            });\n        });\n\n        $('body').on('click', 'button.fastly-remove-backend-icon', function () {\n            let backend_name = $(this).data('backend-name');\n            confirmation({\n                title: $.mage.__('Warning!'),\n                content: $.mage.__('Confirm that you want to delete: %1').replace('%1', backend_name),\n                actions: {\n                    confirm: function() {\n                        $.ajax({\n                            type: \"GET\",\n                            url: config.serviceInfoUrl,\n                            showLoader: true\n                        }).done(function (checkService) {\n                            active_version = checkService.active_version;\n                            deleteBackend(active_version, backend_name);\n                        });\n                    },\n                }\n            });\n        });\n\n        $('body').on('click', '#attach', function () {\n            renderAllConditions(active_version, true)\n        });\n\n        $('body').on('click', '#detach', function () {\n            $('#conditions').html('');\n            $('#conditions').hide();\n            $('#detach').hide();\n            $('#sep').hide();\n            $('#create-condition').hide();\n            $('#attach_span').show();\n        });\n\n        $('body').on('click', '#create-condition', function () {\n            overlay(createConditionOptions);\n            conditionModal = modal;\n            $('.upload-button span').text('Create');\n        });\n    }\n});\n\n","Fastly_Cdn/js/basic-authentication.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    \"showSuccessMessage\",\n    \"Magento_Ui/js/modal/confirm\",\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, showSuccessMessage, confirm) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        /* Auth button messages */\n        let successAuthBtnMsg = $('#fastly-success-auth-button-msg');\n        let errorAuthBtnMsg = $('#fastly-error-auth-button-msg');\n\n        /* Auth list messages */\n        let successAuthListBtnMsg = $('#fastly-success-auth-list-button-msg');\n        let errorAuthListBtnMsg = $('#fastly-error-auth-list-button-msg');\n\n        /* Auth state elements*/\n        let authStateSpan = $('#auth_state_span');\n        let authStateMsgSpan = $('#fastly_auth_state_message_span');\n\n        let authStatus = true;\n        let authDictStatus = null;\n\n        let active_version = serviceStatus.active_version;\n\n        authStateSpan.find('.processing').show();\n\n        /**\n         * Basic Authentication VCL snippet upload modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let authenticationOptions = {\n            title: jQuery.mage.__(' '),\n                content: function () {\n                return document.getElementById('fastly-auth-template').textContent;\n            },\n            actionOk: function () {\n                toggleAuth(active_version);\n            }\n        };\n\n        /**\n         * Basic Authentication container creation modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let authenticationContainerOptions = {\n            title: jQuery.mage.__('Create container for authenticated users'),\n                content: function () {\n                return document.getElementById('fastly-auth-container-template').textContent;\n            },\n            actionOk: function () {\n                createAuth(active_version);\n            }\n        };\n\n        /**\n         * Basic Authentication users modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let authenticationItemsOptions = {\n            title: jQuery.mage.__('Basic Authentication users'),\n                content: function () {\n                return document.getElementById('fastly-auth-items-template').textContent;\n            },\n            actionOk: function () {\n            }\n        };\n\n        /**\n         * Basic Authentication delete all users modal overlay otions\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let authenticationContainerDeleteOptions = {\n            title: jQuery.mage.__('Delete all authenticated users'),\n                content: function () {\n                return document.getElementById('fastly-auth-delete-template').textContent;\n            },\n            actionOk: function () {\n                deleteMainAuth(active_version);\n            }\n        };\n\n        /**\n         * Trigger the Basic Authentication status call\n         */\n        getAuthSetting(active_version).done(function (response) {\n            authStateSpan.find('.processing').hide();\n            let authStateEnabled = authStateMsgSpan.find('#auth_state_enabled');\n            let authStateDisabled = authStateMsgSpan.find('#auth_state_disabled');\n\n            if (response.status === true) {\n                if (authStateDisabled.is(\":hidden\")) {\n                    authStateEnabled.show();\n                }\n            } else if (response.status === false) {\n                if (authStateEnabled.is(\":hidden\")) {\n                    authStateDisabled.show();\n                }\n            } else {\n                authStateMsgSpan.find('#auth_state_unknown').show();\n            }\n        }).fail(function () {\n            authStateSpan.find('.processing').hide();\n            authStateMsgSpan.find('#auth_state_unknown').show();\n        });\n\n\n        /**\n         * Queries the Fastly API to retrieve the Basic Authentication status\n         *\n         * @param active_version\n         * @returns {*}\n         */\n        function getAuthSetting(active_version)\n        {\n            return $.ajax({\n                type: \"POST\",\n                url: config.checkAuthSettingUrl,\n                showLoader: false,\n                data: {'active_version': active_version}\n            });\n        }\n\n        /**\n         * Queries the Fastly API to retrieve the list of Basic Authentication users\n         *\n         * @param active_version\n         * @returns {*}\n         */\n        function listAuths(active_version)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getAuths,\n                showLoader: true,\n                data: {'active_version': active_version}\n            });\n        }\n\n        /**\n         * Process and display basic Authentication users\n         *\n         * @param auths\n         */\n        function processAuths(auths)\n        {\n            let html = '';\n            $.each(auths, function (index, auth) {\n                html += '<tr><td>' +\n                    '<input name=\"auth_user\" value=\"'+ auth.item_key +'\" data-keyid=\"'+ auth.item_key_id +'\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\" disabled></td>' +\n                    '<td><input name=\"auth_pass\" value=\"********\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\" disabled></td>' +\n                    '<td class=\"col-actions\">' +\n                    '<button class=\"action-delete remove_item_auth\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>' +\n                    '</td></tr>';\n            });\n            overlay(authenticationItemsOptions);\n            $('.upload-button').remove();\n\n            if (html !== '') {\n                $('#auth-items-table > tbody').html(html);\n            }\n        }\n\n        /**\n         * Save Basic Authentication user\n         *\n         * @param item_key\n         * @param item_value\n         * @returns {*}\n         */\n        function saveAuthItem(item_key, item_value)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.createAuthItem,\n                showLoader: true,\n                data: {'active_version': active_version, 'auth_user': item_key, 'auth_pass': item_value},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        /**\n         * Delete a Basic Authentication user\n         *\n         * @param item_key_id\n         * @returns {*}\n         */\n        function deleteAuthItem(item_key_id)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.deleteAuthItem,\n                showLoader: true,\n                data: {'active_version': active_version, 'item_key_id': item_key_id},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        /**\n         * Toggle Basic Authentication VCL snippet\n         *\n         * @param active_version\n         */\n        function toggleAuth(active_version)\n        {\n            let activate_auth_flag = false;\n\n            if ($('#fastly_activate_auth').is(':checked')) {\n                activate_auth_flag = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.toggleAuthSettingUrl,\n                data: {\n                    'activate_flag': activate_auth_flag,\n                    'active_version': active_version\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        modal.modal('closeModal');\n                        let disabledOrEnabled = 'disabled';\n                        let statusStr = $.mage.__('disabled');\n\n                        if (authStatus === false) {\n                            disabledOrEnabled = 'enabled';\n                            statusStr = $.mage.__('enabled');\n                        } else {\n                            disabledOrEnabled = 'disabled';\n                        }\n\n                        successAuthBtnMsg.text($.mage.__('Basic Authentication is successfully %1.').replace('%1', statusStr)).show();\n\n                        if (disabledOrEnabled === 'enabled') {\n                            authStateMsgSpan.find('#auth_state_disabled').hide();\n                            authStateMsgSpan.find('#auth_state_enabled').show();\n                        } else {\n                            authStateMsgSpan.find('#auth_state_enabled').hide();\n                            authStateMsgSpan.find('#auth_state_disabled').show();\n                        }\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Delete the Basic Authentication container and turn off Basic Authentication\n         */\n        function deleteMainAuth()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.deleteAuth,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successAuthBtnMsg.text($.mage.__('Basic Authentication is successfully turned off.')).show();\n                        authStateMsgSpan.find('#auth_state_disabled').show();\n                        authStateMsgSpan.find('#auth_state_enabled').hide();\n                        active_version = response.active_version;\n                        authDictStatus = false;\n                        modal.modal('closeModal');\n                        return successAuthListBtnMsg.text($.mage.__('Authentication users removed.')).show();\n                    } else {\n                        if (response.not_exists === true) {\n                            authDictStatus = false;\n                        }\n                        resetAllMessages();\n                        modal.modal('closeModal');\n                        return errorAuthListBtnMsg.text($.mage.__(response.msg)).show();\n                    }\n                },\n                error: function () {\n                    authStateMsgSpan.find('#enable_auth_state_unknown').show();\n                    return errorAuthListBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Create the Basic Authentication dictionary container\n         */\n        function createAuth()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.createAuth,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        authDictStatus = true;\n                        successAuthListBtnMsg.text($.mage.__('Authentication dictionary is successfully created.')).show();\n                        active_version = response.active_version;\n                        modal.modal('closeModal');\n                        processAuths(response.auths);\n                    } else if (response.status === 'empty') {\n                        processAuths([]);\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n\n                },\n                error: function () {\n                    return errorAuthListBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Add Basic Authentication user button on click event\n         */\n        $('body').on('click', '#add-auth-item', function () {\n            $('#auth-items-table > tbody').append('<tr><td><input name=\"auth_user\" required=\"required\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                '<td><input name=\"auth_pass\" required=\"required\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                '<td class=\"col-actions\">' +\n                '<button class=\"action-delete fastly-save-action save_item_auth\" title=\"Save\" type=\"button\"><span>Save</span></button>' +\n                '<button class=\"action-delete remove_item_auth\"  title=\"Delete\" type=\"button\" hidden><span>Delete</span></button>' +\n                '</td></tr>');\n        });\n\n        /**\n         * Save Basic Authentication user button on click event\n         */\n        $('body').on('click', '.save_item_auth', function () {\n            let keyField = $(this).closest('tr').find(\"input[name='auth_user']\");\n            let valueField = $(this).closest('tr').find(\"input[name='auth_pass']\");\n            let item_key = keyField.val();\n            let item_value = valueField.val();\n            let errors = false;\n\n            if (item_value === '') {\n                errors = true;\n                valueField.css('border-color', '#e22626');\n            } else {\n                valueField.css('border-color', '#878787');\n            }\n\n            if (errors) {\n                resetAllMessages();\n                return showErrorMessage($.mage.__('Please enter all required fields.'));\n            }\n\n            let self = this;\n\n            saveAuthItem(item_key, item_value).done(function (response) {\n                if (response.status === true) {\n                    $(self).closest('tr').find(\"input[name='auth_user']\").prop('disabled', true);\n                    $(self).closest('tr').find(\"input[name='auth_user']\").data('keyid', btoa(item_key + ':' + item_value));\n                    $(self).closest('tr').find(\"input[name='auth_pass']\").prop('disabled', true);\n                    $(self).closest('tr').find(\".save_item_auth\").hide();\n                    $(self).closest('tr').find(\".remove_item_auth\").show();\n                    showSuccessMessage($.mage.__('Authentication entry is successfully saved.'));\n                } else {\n                    showErrorMessage(response.msg);\n                }\n            }).fail(function () {\n                showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n            });\n        });\n\n        /**\n         * Remove Basic Authentication user on click event\n         */\n        $('body').on('click', '.remove_item_auth', function () {\n            let valueField = $(this).closest('tr').find(\"input[name='auth_user']\");\n            let self = this;\n            let authItemKeyId = valueField.data('keyid');\n\n            confirm({\n                title: 'Delete Authentication Item',\n                content: \"Are you sure you want to delete this item?\",\n                actions: {\n                    confirm: function () {\n                        deleteAuthItem(authItemKeyId).done(function (response) {\n                            if (response.status === true) {\n                                $(self).closest('tr').remove();\n                                showSuccessMessage($.mage.__('Authentication item is successfully deleted.'));\n                            } else if (response.status === 'empty') {\n                                showErrorMessage($.mage.__(response.msg));\n                            }\n                        }).fail(function () {\n                            showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n                        });\n                    },\n                    cancel: function () {}\n                }\n            });\n        });\n\n        /**\n         * Remove Basic Authentication dictionary button on clikc event\n         */\n        $('body').on('click', '.remove_auth_dictionary', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorAuthListBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                overlay(authenticationContainerDeleteOptions);\n                setServiceLabel(active_version, next_version, service_name);\n\n            }).fail(function () {\n                return errorAuthListBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * Toggle Basic Authentication button on click event\n         */\n        $('#fastly_enable_auth_button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (service) {\n                if (service.status === false) {\n                    return errorAuthBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                getAuthSetting(active_version).done(function (response) {\n                    authStatus = response.status;\n                }).fail(function () {\n                    showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'))\n                });\n\n                // Check if Users are available and Auth can be enabled\n                let enableMsg = false;\n                $.ajax({\n                    type: \"GET\",\n                    url: config.checkAuthUsersAvailable,\n                    data: {'active_version': active_version},\n                    showLoader: true,\n                    success: function (response) {\n                        if (response.status === 'empty') {\n                            enableMsg = response.msg;\n                        }\n\n                        overlay(authenticationOptions);\n                        setServiceLabel(active_version, next_version, service_name);\n                        let upload_button = $('.upload-button span');\n\n                        if (authStatus === false) {\n                            $('.modal-title').text($.mage.__('You are about to enable Basic Authentication'));\n                            upload_button.text('Enable');\n                        } else {\n                            $('.modal-title').text($.mage.__('You are about to disable Basic Authentication'));\n                            upload_button.text('Disable');\n                        }\n\n                        if (enableMsg) {\n                            let enableAuthOverlayMsg =  $('.fastly-message-error');\n                            enableAuthOverlayMsg.text($.mage.__(response.msg)).show();\n                        }\n                    }\n                });\n            }).fail(function () {\n                return errorAuthBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * Add Basic Authentication dictionary container button on click event\n         */\n        $('#add-auth-container-button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true,\n                success: function (service) {\n                    if (service.status === false) {\n                        return errorAuthListBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                    }\n\n                    active_version = service.active_version;\n                    let next_version = service.next_version;\n                    let service_name = service.service.name;\n\n                    listAuths(active_version).done(function (authResp) {\n                        if (authResp.status === true) {\n                            processAuths(authResp.auths);\n                        } else if (authResp.status === 'empty') {\n                            processAuths([]);\n                        } else {\n                            overlay(authenticationContainerOptions);\n                        }\n                        setServiceLabel(active_version, next_version, service_name);\n                    }).fail(function () {\n                        return errorAuthListBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                    });\n                },\n                fail: function () {\n                    return errorAuthListBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        });\n    }\n});\n","Fastly_Cdn/js/blocking.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    \"Magento_Ui/js/modal/prompt\",\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, prompt) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        /* Blocking state elements*/\n        let blockingStateSpan = $('#blocking_state_span');\n        let blockingStateMsgSpan = $('#fastly_blocking_state_message_span');\n        let blocking = true;\n        /* Blocking button messages */\n        let successBlockingBtnMsg = $('#fastly-success-blocking-button-msg');\n        let errorBlockingBtnMsg = $('#fastly-error-blocking-button-msg');\n        /* Update Blocking button messages */\n        let blockingSuccessBtnMsg = $('#fastly-update-blocking-success-button-msg');\n        let blockingErrorBtnMsg = $('#fastly-update-blocking-error-button-msg');\n        let blockingWarningBtnMsg = $('#fastly-update-blocking-warning-button-msg');\n        /* <select> elements */\n        let blockingTypeSelect = $('#system_full_page_cache_fastly_fastly_blocking_blocking_type');\n        let countryListSelect = $('#system_full_page_cache_fastly_fastly_blocking_block_by_country');\n        let aclSelect = $('#system_full_page_cache_fastly_fastly_blocking_block_by_acl');\n\n        countryListSelect.add(aclSelect).on('change', function () {\n            blockingWarningBtnMsg.text($.mage.__('Changes not active until Update Blocking Configuration is clicked')).show();\n        });\n\n\n        let active_version = serviceStatus.active_version;\n\n        blockingStateSpan.find('.processing').show();\n\n        /**\n         * Blocking modal overlay options\n         *\n         * @type {{id: string, title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let blockingOptions = {\n            id: 'fastly-blocking-options',\n            title: jQuery.mage.__(' '),\n                content: function () {\n                return document.getElementById('fastly-blocking-template').textContent;\n            },\n            actionOk: function () {\n                toggleBlocking(active_version);\n            }\n        };\n\n        /**\n         * Trigger the Blocking status call\n         */\n        getBlockingSetting(active_version, false).done(function (response) {\n            blockingStateSpan.find('.processing').hide();\n            let blockingStateEnabled = blockingStateMsgSpan.find('#blocking_state_enabled');\n            let blockingStateDisabled = blockingStateMsgSpan.find('#blocking_state_disabled');\n\n            if (response.status === true) {\n                if (blockingStateDisabled.is(\":hidden\")) {\n                    blockingStateEnabled.show();\n                }\n            } else if (response.status === false) {\n                if (blockingStateEnabled.is(\":hidden\")) {\n                    blockingStateDisabled.show();\n                }\n            } else {\n                blockingStateMsgSpan.find('#blocking_state_unknown').show();\n            }\n        }).fail(function () {\n            blockingStateSpan.find('.processing').hide();\n            blockingStateMsgSpan.find('#blocking_state_unknown').show();\n        });\n\n        /**\n         * Queries Fastly API to retrieve blocking setting\n         *\n         * @param active_version\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function getBlockingSetting(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"POST\",\n                url: config.checkBlockingSettingUrl,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version}\n            });\n        }\n\n        /**\n         * Toggle Blocking button on click event\n         */\n        $('#fastly_blocking_button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (service) {\n                if (service.status === false) {\n                    return errorBlockingBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                getBlockingSetting(active_version, true).done(function (response) {\n                    overlay(blockingOptions);\n                    setServiceLabel(active_version, next_version, service_name);\n                    let upload_button = $('.upload-button span');\n\n                    if (response.status === false) {\n                        $('.modal-title').text($.mage.__('You are about to enable Blocking'));\n                        upload_button.text('Enable');\n                    } else {\n                        $('.modal-title').text($.mage.__('You are about to disable Blocking'));\n                        upload_button.text('Disable');\n                    }\n                    blocking = response.status;\n                }).fail(function () {\n                    showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'))\n                });\n\n            }).fail(function () {\n                return errorBlockingBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * Update Blocking button on click event\n         */\n        $('#fastly_update_blocking_button').on('click', function () {\n            resetAllMessages();\n\n            $.ajax({\n                type: \"POST\",\n                url: config.updateBlockingUrl,\n                showLoader: true,\n                data: {\n                    'service_id': $('#system_full_page_cache_fastly_fastly_service_id').val(),\n                    'api_key': $('#system_full_page_cache_fastly_fastly_api_key').val(),\n                    'acls': $('#system_full_page_cache_fastly_fastly_blocking_block_by_acl').serializeArray(),\n                    'countries': $('#system_full_page_cache_fastly_fastly_blocking_block_by_country').serializeArray(),\n                    'blocking_type': $('#system_full_page_cache_fastly_fastly_blocking_blocking_type').val()\n                },\n                cache: false,\n                success: function (response) {\n                    if (response.status === false) {\n                        return blockingErrorBtnMsg.text($.mage.__(response.msg)).show();\n                    } else {\n                        return blockingSuccessBtnMsg.text($.mage.__('Blocking snippet has been updated successfully.')).show();\n                    }\n                },\n                error: function () {\n                    return blockingErrorBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        });\n\n        /**\n         * Blocking Type on change event\n         */\n        $('#system_full_page_cache_fastly_fastly_blocking_blocking_type').on('change', function () {\n            if (this.value === '1') {\n                prompt({\n                    title: 'Blocking Type: Allowlist',\n                    content: 'Turning on this feature will block ALL access except for users from designated countries/ACLs. ' +\n                        'Please make sure you as the admin user are in one of the lists since you WILL lose access to the admin pages. ' +\n                        'Only way to fix it is via Fastly management UI. Please type \"I ACKNOWLEDGE\"' +\n                        ' in the box below if you are sure you want to do this.',\n                    actions: {\n                        confirm: function (input) {\n                            if (input !== 'I ACKNOWLEDGE') {\n                                $('#system_full_page_cache_fastly_fastly_blocking_blocking_type').val('0');\n                            }\n                            blockingWarningBtnMsg.text($.mage.__('Please Update Blocking Configuration')).show();\n                        },\n                        cancel: function () {\n                            $('#system_full_page_cache_fastly_fastly_blocking_blocking_type').val('0');\n                        },\n                        always: function () {}\n                    }\n                });\n            }\n        });\n\n        /**\n         * Toggle Blocking VCL snippet\n         *\n         * @param active_version\n         */\n        function toggleBlocking(active_version)\n        {\n            let activate_blocking_flag = false;\n\n            if ($('#fastly_activate_blocking').is(':checked')) {\n                activate_blocking_flag = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.toggleBlockingSettingUrl,\n                data: {\n                    'activate_flag': activate_blocking_flag,\n                    'active_version': active_version,\n                    'acls': $('#system_full_page_cache_fastly_fastly_blocking_block_by_acl').serializeArray(),\n                    'countries': $('#system_full_page_cache_fastly_fastly_blocking_block_by_country').serializeArray(),\n                    'blocking_type': $('#system_full_page_cache_fastly_fastly_blocking_blocking_type').val()\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        modal.modal('closeModal');\n                        let disabledOrEnabled = 'disabled';\n                        let statusStr = $.mage.__('disabled');\n\n                        if (blocking === false) {\n                            disabledOrEnabled = 'enabled';\n                            statusStr = $.mage.__('enabled');\n                        } else {\n                            disabledOrEnabled = 'disabled';\n                        }\n\n                        successBlockingBtnMsg.text($.mage.__('Blocking is successfully %1.').replace('%1', statusStr)).show();\n\n                        if (disabledOrEnabled === 'enabled') {\n                            blockingStateMsgSpan.find('#blocking_state_disabled').hide();\n                            blockingStateMsgSpan.find('#blocking_state_enabled').show();\n                        } else {\n                            blockingStateMsgSpan.find('#blocking_state_enabled').hide();\n                            blockingStateMsgSpan.find('#blocking_state_disabled').show();\n                        }\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                }\n            });\n        }\n    }\n});\n","Fastly_Cdn/js/custom-snippets.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    \"showSuccessMessage\",\n    \"Magento_Ui/js/modal/confirm\",\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, showSuccessMessage, confirm) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n        /* Custom snippet button messages */\n        let successCustomSnippetBtnMsg = $('#fastly-success-custom-snippet-button-msg');\n        let errorCustomSnippetBtnMsg = $('#fastly-error-custom-snippet-button-msg');\n\n        let active_version = serviceStatus.active_version;\n        let snippets;\n        let snippet_id;\n        let closestTr;\n\n        invokeAppendingTableRowWithDivOnTable();\n        checkUpdateFlag();\n\n        function checkUpdateFlag()\n        {\n            $.ajax({\n                type: 'GET',\n                url: config.getUpdateFlag,\n                showLoader: false,\n                success: function (response) {\n                    if (response.flag !== true) {    //if VCL is not Uploaded\n                        $(\".changed-vcl-snippet-warning\").text($.mage.__(response.msg)).show().off('click');\n                    }\n                }\n            })\n        }\n\n        /**\n         * Custom Snippet creation modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let customSnippetOptions = {\n            title: jQuery.mage.__('You are about to create a Custom Snippet '),\n            content: function () {\n                return document.getElementById('fastly-custom-snippet-template').textContent;\n            },\n            actionOk: function () {\n                saveCustomSnippet();\n            }\n        };\n\n        let deleteCustomSnippetOptions = {\n            title: jQuery.mage.__('You are about to delete a Custom Snippet '),\n            content: function () {\n                return document.getElementById('fastly-delete-custom-snippet-template').textContent;\n            },\n            actionOk: function () {\n                deleteCustomSnippet(snippet_id);\n            }\n        };\n\n        /**\n         * Custom Snippet edit modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let customSnippetEditOptions = {\n            title: jQuery.mage.__('You are about to edit a Custom Snippet '),\n            content: function () {\n                return document.getElementById('fastly-custom-snippet-edit-template').textContent;\n            },\n            actionOk: function () {\n                updateCustomSnippet();\n            }\n        };\n\n        function invokeAppendingTableRowWithDivOnTable()\n        {\n            if ($('#warning-message-after-change').length !== 0) {\n                return;\n            }\n\n            appendTableRowWithDiv(\n                $('#row_system_full_page_cache_fastly_fastly_custom_snippets .form-list > tbody'),\n                'warning-message-after-change',\n                'message message-warning changed-vcl-snippet-warning',\n                {\n                    'font-size': '1.2rem',\n                    'margin-top': '5px',\n                    'padding': '1.4rem 4rem 1.4rem 5.5rem',\n                    'display': 'none'\n                }\n            );\n        }\n\n        function appendTableRowWithDiv(field, id, classSelector, style)\n        {\n            let tr = document.createElement('tr');\n            let td = document.createElement('td');\n            let td2 = document.createElement('td');\n            let td3 = document.createElement('td');\n            let div = document.createElement('div');\n            div.setAttribute('class', classSelector);\n            div.setAttribute('id', id);\n            td.setAttribute('class', 'label');\n            tr.append(td);\n            td2.setAttribute('class', 'value');\n            td2.append(div);\n            tr.append(td2);\n            tr.append(td3);\n            field.append(tr);\n            $(\"#\" + id).css(style);\n        }\n\n        /**\n         * Trigger the Custom Snippet list call\n         */\n        getCustomSnippets(false).done(function (response) {\n            $('.loading-snippets').hide();\n            if (response.status !== false) {\n                snippets = response.snippets;\n                processCustomSnippets(snippets);\n            } else {\n                $('.no-snippets').show();\n            }\n        });\n\n        /**\n         * Save a Custom Snippet\n         */\n        function saveCustomSnippet()\n        {\n            let custom_name = $('#custom_snippet_name').val();\n            let custom_type = $('#custom_snippet_type').val();\n            let custom_priority = $('#custom_snippet_priority').val();\n            let custom_vcl = $('#custom_snippet_content').val();\n            let msgWarning = $('.fastly-message-error');\n\n            if (!custom_name || !custom_type || !custom_priority || !custom_vcl) {\n                msgWarning.text($.mage.__('Please fill out the required fields.')).show();\n                return;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.createCustomSnippetUrl,\n                data: {\n                    'name': custom_name,\n                    'type': custom_type,\n                    'priority': custom_priority,\n                    'vcl': custom_vcl,\n                    'edit': false\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        active_version = response.active_version;\n                        modal.modal('closeModal');\n                        successCustomSnippetBtnMsg.text($.mage.__('Custom snippet successfully created.')).show();\n                        setUpdateFlagToFalse();\n                        getCustomSnippets().done(function (snippetsResp) {\n                            $('.loading-snippets').hide();\n                            if (snippetsResp.status !== false) {\n                                snippets = snippetsResp.snippets;\n                                processCustomSnippets(snippets);\n                            } else {\n                                $('.no-snippets').show();\n                            }\n                        });\n                    } else {\n                        msgWarning.text($.mage.__(response.msg)).show();\n                    }\n                },\n                error: function () {\n                    return errorCustomSnippetBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Retrieve a Custom Snippet\n         *\n         * @returns {*}\n         */\n        function getCustomSnippets()\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getCustomSnippetsUrl,\n                showLoader: false\n            });\n        }\n\n        /**\n         * Process and display Custom Snippets\n         *\n         * @param snippets\n         */\n        function processCustomSnippets(snippets)\n        {\n            let html = '';\n            $.each(snippets, function (index, snippet) {\n                html += \"<tr id='fastly_\" + index + \"'>\";\n                html += \"<td><input data-snippetId='\" + index + \"' id='snippet_\" + index + \"' value='\" + snippet + \"' disabled='disabled' class='input-text' type='text'></td>\";\n                html += \"<td class='col-actions'><button class='action-delete fastly-edit-snippet-icon' data-snippet-id='\" + snippet + \"' id='fastly-edit-snippet\" + index + \"' title='Edit custom snippet' type='button'></button>\";\n                html += \"<span>&nbsp;&nbsp;</span><button class='action-delete fastly-delete-snippet-icon' data-snippet-id='\" + snippet + \"' id='fastly-delete-snippet\" + index + \"' title='Delete custom snippet' type='button'></button></td></tr>\"\n            });\n            if (html !== '') {\n                $('.no-snippets').hide();\n            }\n            $('#fastly-snippets-list').html(html);\n        }\n\n        /**\n         * set flag \"updated\" to false inside core_config_data when VCL is modified\n         */\n        function setUpdateFlagToFalse()\n        {\n            $.ajax({\n                type: 'GET',\n                url: config.changeUpdateFlag,\n                showLoader: true,\n                success: function (response) {\n                    $(\".changed-vcl-snippet-warning\").text($.mage.__(response.msg)).show().off('click');\n                }\n            })\n        }\n\n        /**\n         * Delete a Custom Snippet\n         *\n         * @param snippet_id\n         * @returns {*}\n         */\n        function deleteCustomSnippet(snippet_id)\n        {\n            let activate_flag = false;\n\n            if ($('#fastly_delete_custom_snippet_activate').is(':checked')) {\n                activate_flag = true;\n            }\n            return $.ajax({\n                type: \"GET\",\n                url: config.deleteCustomSnippet,\n                showLoader: true,\n                data: {\n                    'snippet_id': snippet_id,\n                    'active_version': active_version,\n                    'activate_flag': activate_flag\n                },\n                beforeSend: function () {\n                    resetAllMessages();\n                },\n                success: function (response) {\n                    if (response.status === true) {\n                        modal.modal('closeModal');\n                        closestTr.remove();\n                        successCustomSnippetBtnMsg.text($.mage.__('Custom snippet successfully deleted.')).show();\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Update a Custom Snippet\n         */\n        function updateCustomSnippet()\n        {\n            let custom_name = $('#custom_snippet_name').val();\n            let original_name = $('#original_snippet_name').val();\n            let custom_type = $('#custom_snippet_type').val();\n            let custom_priority = $('#custom_snippet_priority').val();\n            let custom_vcl = $('#custom_snippet_content').val();\n            let msgWarning = $('.fastly-message-error');\n\n            if (!custom_name || !custom_type || !custom_priority || !custom_vcl) {\n                msgWarning.text($.mage.__('Please fill out the required fields.')).show();\n                return;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.createCustomSnippetUrl,\n                data: {\n                    'name': custom_name,\n                    'type': custom_type,\n                    'priority': custom_priority,\n                    'vcl': custom_vcl,\n                    'edit': true,\n                    'original': original_name\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        active_version = response.active_version;\n                        modal.modal('closeModal');\n                        successCustomSnippetBtnMsg.text($.mage.__('Custom snippet successfully updated.')).show();\n                        setUpdateFlagToFalse();\n                        getCustomSnippets(false).done(function (snippetsResp) {\n                            $('.loading-snippets').hide();\n                            if (snippetsResp.status !== false) {\n                                if (snippetsResp.snippets.length > 0) {\n                                    let snippets = snippetsResp.snippets;\n                                    processCustomSnippets(snippets);\n                                } else {\n                                    $('.no-snippets').show();\n                                }\n                            }\n                        })\n                    } else {\n                        msgWarning.text($.mage.__(response.msg)).show();\n                    }\n                },\n                error: function () {\n                    return errorCustomSnippetBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Custom Snippet create button on click event\n         */\n        $('#fastly_custom_vcl_button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorCustomSnippetBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n                setServiceLabel(active_version, next_version, service_name);\n                overlay(customSnippetOptions);\n                $('.upload-button span').text('Create');\n            }).fail(function () {\n                return errorCustomSnippetBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * Custom Snippet delete button on click event\n         */\n        $('body').on('click', 'button.fastly-delete-snippet-icon', function () {\n            snippet_id = $(this).data('snippet-id');\n            closestTr = $(this).closest('tr');\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorCustomSnippetBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n                overlay(deleteCustomSnippetOptions);\n                $('.fastly-message-notice').text('You are about to delete the ' + snippet_id + ' custom snippet.').show();\n                $('.maintenance-checkbox-container').hide();\n                $.when(\n                    $.ajax({\n                        type: \"GET\",\n                        url: config.checkCustomSnippet,\n                        data: {\n                            'snippet_id': snippet_id,\n                            'active_version': active_version\n                        },\n                        showLoader: true\n                    })\n                ).done(function (response) {\n                    if (response.status === true) {\n                        setServiceLabel(active_version, next_version, service_name);\n                        $('.maintenance-checkbox-container').show();\n                    }\n                });\n                $('.upload-button span').text('Delete');\n            }).fail(function () {\n                return errorCustomSnippetBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * Custom Snippet edit button on click event\n         */\n        $('body').on('click', 'button.fastly-edit-snippet-icon', function () {\n            let snippet_id = $(this).data('snippet-id');\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorCustomSnippetBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n                setServiceLabel(active_version, next_version, service_name);\n                $.when(\n                    $.ajax({\n                        type: \"GET\",\n                        url: config.getCustomSnippet,\n                        data: {'snippet_id': snippet_id},\n                        showLoader: true,\n                    })\n                ).done(function (response) {\n                    if (response.status === true) {\n                        overlay(customSnippetEditOptions);\n                        $('.upload-button span').text('Save');\n                        $('#custom_snippet_name').val(response.name);\n                        $('#original_snippet_name').val(response.original);\n                        $('#custom_snippet_type').val(response.type);\n                        $('#custom_snippet_priority').val(response.priority);\n                        $('#custom_snippet_content').val(response.content);\n                    }\n                });\n            }).fail(function () {\n                return errorCustomSnippetBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n    }\n});","Fastly_Cdn/js/custom-synthetic-pages.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        /* Error page HTML button */\n        let successHtmlBtnMsg = $('#fastly-success-html-page-button-msg');\n        let errorHtmlBtnMsg = $('#fastly-error-html-page-button-msg');\n        /* WAF page HTML button */\n        let successWafBtnMsg = $('#fastly-success-waf-page-button-msg');\n        let errorWafBtnMsg = $('#fastly-error-waf-page-button-msg');\n\n        let active_version = serviceStatus.active_version;\n\n        let maxChars = 65535;\n        let msgWarning = $('.fastly-message-error');\n\n        let wafPageRow = $('#row_system_full_page_cache_fastly_fastly_error_maintenance_page_waf_page');\n        let wafPage = getWafPageRespObj(active_version);\n\n        wafPage.done(function (checkWafResponse) {\n            if (checkWafResponse.status === false) {\n                wafPageRow.hide();\n            }\n        });\n\n        let errorPageOptions = {\n            title: jQuery.mage.__('Update Error Page Content'),\n                content: function () {\n                return document.getElementById('fastly-error-page-template').textContent;\n            },\n            actionOk: function () {\n                saveErrorHtml(active_version);\n            }\n        };\n\n        let removeErrorPageOptions = {\n            title: jQuery.mage.__('Remove Error Page Content'),\n            content: function () {\n                return document.getElementById('fastly-remove-error-page-template').textContent;\n            },\n            actionOk: function () {\n                removeErrorHtml(active_version);\n            }\n        };\n\n        let wafPageOptions = {\n            title: jQuery.mage.__('Update WAF Page Content'),\n                content: function () {\n                return document.getElementById('fastly-waf-page-template').textContent;\n            },\n            actionOk: function () {\n                saveWafHtml(active_version);\n            }\n        };\n\n        getWafPageRespObj(active_version, false).done(function (checkWafResponse) {\n            if (checkWafResponse.status !== false) {\n                wafPageRow.show();\n            }\n        });\n\n        // Queries Fastly API to retrieve error page response object\n        function getErrorPageRespObj(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getErrorPageRespObj,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version}\n            });\n        }\n\n        // Queries Fastly API to retrieve WAF page response object\n        function getWafPageRespObj(active_version)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getWafPageRespObj,\n                showLoader: true,\n                data: {'active_version': active_version}\n            });\n        }\n\n        // Save Error Page Html\n        function saveErrorHtml()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n            let errorHtmlChars = $('#error_page_html').val().length;\n            if (errorHtmlChars >= maxChars) {\n                msgWarning.text($.mage.__('The HTML must contain less than %1 characters. Current number of characters: %2').replace('%1', maxChars).replace('%2',errorHtmlChars));\n                msgWarning.show();\n                return;\n            }\n            $.ajax({\n                type: \"POST\",\n                url: config.saveErrorPageHtmlUrl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'html': $('#error_page_html').val()\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successHtmlBtnMsg.text($.mage.__('Error page HTML is successfully updated.')).show();\n                        active_version = response.active_version;\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorHtmlBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        // Remove custom synthetic error page\n        function removeErrorHtml()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n            $.ajax({\n                type: \"POST\",\n                url: config.removeErrorPageHtmlUrl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successHtmlBtnMsg.text($.mage.__('Error page HTML is successfully removed.')).show();\n                        active_version = response.active_version;\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorHtmlBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        // Save WAF Page Html\n        function saveWafHtml()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n            let wafHtmlChars = $('#waf_page_content').val().length;\n            if (wafHtmlChars >= maxChars) {\n                msgWarning.text($.mage.__('The content must contain less than %1 characters. Current number of characters: %2').replace('%1', maxChars).replace('%2', wafHtmlChars));\n                msgWarning.show();\n                return;\n            }\n            $.ajax({\n                type: \"POST\",\n                url: config.saveWafPageUrl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'content': $('#waf_page_content').val(),\n                    'status': $('#waf_page_status').val(),\n                    'content_type': $('#waf_page_type').val()\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successWafBtnMsg.text($.mage.__('WAF page is successfully updated.')).show();\n                        active_version = response.active_version;\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorWafBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Set Error Page HTML button\n         */\n        $('#fastly_error_page_button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorHtmlBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                getErrorPageRespObj(active_version, true).done(function (response) {\n                    overlay(errorPageOptions);\n                    setServiceLabel(active_version, next_version, service_name);\n\n                    $('.upload-button span').text('Update');\n                    if (response.status === true) {\n                        $('#error_page_html').text(response.errorPageResp.content).html();\n                    }\n                }).fail(function () {\n                    showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n                });\n\n            }).fail(function () {\n                return errorHtmlBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        $('#fastly_error_page_remove_button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorHtmlBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                overlay(removeErrorPageOptions);\n                setServiceLabel(active_version, next_version, service_name);\n                $('.upload-button span').text('Remove');\n            }).fail(function () {\n                return errorHtmlBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n\n        /**\n         * Set WAF Page HTML button\n         */\n        $('#fastly_waf_page_button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorWafBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                getWafPageRespObj(active_version, true).done(function (response) {\n                    overlay(wafPageOptions);\n                    setServiceLabel(active_version, next_version, service_name);\n\n                    $('.upload-button span').text('Update');\n                    if (response.status === true) {\n                        $('#waf_page_content').text(response.wafPageResp.content).html();\n                        $('#waf_page_status').val(response.wafPageResp.status);\n                        $('#waf_page_type').val(response.wafPageResp.content_type);\n                    }\n                }).fail(function () {\n                    showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n                });\n\n            }).fail(function () {\n                return errorWafBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n    }\n});\n","Fastly_Cdn/js/domains.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    \"Magento_Ui/js/modal/confirm\",\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, confirm) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        let domains;\n        let current_domains;\n        let active_version = serviceStatus.active_version;\n        let errorDomainsBtnMsg = $('#fastly-error-domains-button-msg');\n        let successDomainsBtnMsg = $('#fastly-success-domains-button-msg');\n\n        let domainsListOptions = {\n            title: jQuery.mage.__('Domains'),\n            content: function () {\n                return document.getElementById('fastly-domains-list-template').textContent;\n            },\n            actionOk: function () {\n                pushDomains(active_version);\n            }\n        };\n\n        /**\n         * Trigger the Domains list call\n         */\n        getDomains(active_version, false).done(function (response) {\n            $('.loading-domains').hide();\n            if (response !== false) {\n                if (response.domains.length > 0) {\n                    domains = response.domains;\n                    processDomains(response.domains);\n                } else {\n                    $('.no-domains').show();\n                }\n            }\n        });\n\n        /**\n         * Get the list of Domains\n         *\n         * @param active_version\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function getDomains(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getDomainsUrl,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version}\n            });\n        }\n\n        /**\n         * Process and display the list of Domains\n         *\n         * @param domains\n         */\n        function processDomains(domains)\n        {\n            $('#fastly-domains-list').html('');\n            $.each(domains, function (index, domain) {\n                let html = \"<tr id='fastly_\" + index + \"'>\";\n                html += \"<td><span><b>\"+domain.name+\"</b></span><p class='note'>\"+domain.comment+\"</p></td></tr>\";\n                $('#fastly-domains-list').append(html);\n            });\n        }\n\n        /**\n         * Process and display the list of domains in the manage Domains modal\n         *\n         * @param domains\n         * @param store\n         */\n        function processDomainsList(domains, store)\n        {\n            let html = '';\n            $.each(domains, function (index, domain) {\n                html += '<tr><td>' +\n                    '<input name=\"domain[]\" value=\"'+ domain.name +'\" class=\"input-text admin__control-text domain-name-field\" type=\"text\" disabled></td>' +\n                    '<td><input name=\"comment[]\" value=\"'+ domain.comment +'\" class=\"input-text admin__control-text comment-field\" type=\"text\" disabled></td>' +\n                    '<td class=\"col-actions\">';\n\n                if (store.indexOf(domain.name) < 0) {\n                    html += '<button class=\"action-delete remove_domain\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>';\n                }\n                html += '</td></tr>';\n            });\n            overlay(domainsListOptions);\n            $('.upload-button span').text('Activate');\n            if (html !== '') {\n                $('#domains-list-table > tbody').html(html);\n            }\n        }\n\n        function pushDomains(active_version)\n        {\n            let domains = [];\n            $('input[name=\"domain[]\"').each(function () {\n                let new_domain = $(this).val();\n                let new_comment = $(this).closest('tr').find(\"input[name='comment[]']\").val();\n                domains.push({\n                    name: new_domain,\n                    comment: new_comment\n                });\n            });\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.pushDomainsUrl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'domains': domains,\n                    'current_domains': current_domains\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successDomainsBtnMsg.text($.mage.__('Domains successfully updated.')).show();\n                        active_version = response.active_version;\n                        getDomains(active_version, false).done(function (response) {\n                            $('.loading-domains').hide();\n                            if (response !== false) {\n                                if (response.domains.length > 0) {\n                                    domains = response.domains;\n                                    processDomains(response.domains);\n                                } else {\n                                    $('.no-domains').show();\n                                }\n                            }\n                        });\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorDomainsBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Manage domains button on click event\n         */\n        $('#manage-domains-button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true,\n                success: function (service) {\n                    if (service.status === false) {\n                        return errorDomainsBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                    }\n\n                    active_version = service.active_version;\n                    let next_version = service.next_version;\n                    let service_name = service.service.name;\n\n                    getDomains(active_version, true).done(function (response) {\n                        if (response.status === true) {\n                            processDomainsList(response.domains, response.store);\n                            current_domains = response.domains;\n                        } else {\n                            processDomainsList([]);\n                        }\n                        setServiceLabel(active_version, next_version, service_name);\n                    }).fail(function () {\n                        return errorDomainsBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                    });\n                },\n                fail: function () {\n                    return errorDomainsBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        });\n\n        $('body').on('click', '#add-domain', function () {\n            $('#domains-list-table > tbody').append('<tr><td>' +\n                '<input name=\"domain[]\" value=\"\" class=\"input-text admin__control-text domain-name-field\" type=\"text\"></td>' +\n                '<td><input name=\"comment[]\" value=\"\" class=\"input-text admin__control-text comment-field\" type=\"text\"></td>' +\n                '<td class=\"col-actions\">' +\n                '<button class=\"action-delete remove_domain\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>' +\n                '</td></tr>');\n        });\n\n        $('body').on('click', '.remove_domain', function () {\n            let closestTr = $(this).closest('tr');\n            let domainName = closestTr.find('.domain-name-field').val();\n            if (!domainName) {\n                closestTr.remove();\n            } else {\n                confirm({\n                    title: 'Remove Domain',\n                    content: 'Are you sure you want to remove the <b>'+domainName+'</b> domain?',\n                    actions: {\n                        confirm: function () {\n                            closestTr.remove();\n                        },\n                        cancel: function () {}\n                    }\n                });\n            }\n        });\n    }\n});\n","Fastly_Cdn/js/edge-acl.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    \"showSuccessMessage\",\n    \"Magento_Ui/js/modal/confirm\",\n    'underscore',\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, showSuccessMessage, confirm, _) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        /* ACL button messages */\n        let successAclBtnMsg = $('#fastly-success-acl-button-msg');\n        let errorAclBtnMsg = $('#fastly-error-acl-button-msg');\n        let warningAclBtnMsg = $('#fastly-warning-acl-button-msg');\n\n        /* ACL negated checkbox title */\n        let acl_negated_title = \"Negates another ACL entry.\\n\\n\" +\n            \"Example: If you have a purge_allow_acl that has \"+\n            \"192.168.1.0/24 but you add negated IP : 192.168.1.4, \"+\n            \"it means every IP in 192.168.1.0/24 range has access except for 192.168.1.4.\";\n\n        let itemsHtml;\n        let aclItems;\n        let acl_id;\n        let acls;\n\n        let active_version = serviceStatus.active_version;\n\n        /**\n         * ACL container modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let aclContainerOptions = {\n            title: jQuery.mage.__('Create ACL container'),\n            content: function () {\n                return document.getElementById('fastly-acl-container-template').textContent;\n            },\n            actionOk: function () {\n                createAcl(active_version);\n            }\n        };\n\n        /**\n         * ACL container item modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let aclItemOptions = {\n            title: jQuery.mage.__('ACL items'),\n            content: function () {\n                return document.getElementById('fastly-acl-items-template').textContent;\n            },\n            actionOk: function () {\n            }\n        };\n\n        /**\n         * ACL container delete modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let aclDeleteContainerOptions = {\n            title: jQuery.mage.__('Delete ACL containers'),\n            content: function () {\n                return document.getElementById('fastly-delete-acl-container-template').textContent;\n            },\n            actionOk: function () {\n                deleteAcl(active_version);\n            }\n        };\n\n        /**\n         * Trigger ACL container list\n         */\n        listAcls(active_version, false).done(function (response) {\n            $('.loading-acls').hide();\n            if (response.status !== false) {\n                if (response.status !== false) {\n                    if (response.acls.length > 0) {\n                        acls = response.acls;\n                        processAcls(response.acls);\n                    } else {\n                        $('.no-acls').show();\n                    }\n                }\n            }\n        }).fail(function () {\n            return errorAclBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n        });\n\n        /**\n         * Create ACL container\n         */\n        function createAcl()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.createAcl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'acl_name': $('#acl_name').val()\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successAclBtnMsg.text($.mage.__('ACL is successfully created.')).show();\n                        active_version = response.active_version;\n                        // Fetch acls\n                        listAcls(active_version, false).done(function (list) {\n                            $('.loading-acls').hide();\n                            if (list.status !== false) {\n                                if (list.status !== false) {\n                                    if (list.acls.length > 0) {\n                                        acls = list.acls;\n                                        processAcls(list.acls);\n                                        $('.no-acls').hide();\n                                    } else {\n                                        $('.no-acls').show();\n                                    }\n                                }\n                            }\n                        }).fail(function () {\n                            return errorAclBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                        });\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorAclBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Process and display the list of ACL containers\n         *\n         * @param acls\n         */\n        function processAcls(acls)\n        {\n            let html = '';\n            $.each(acls, function (index, acl) {\n                html += \"<tr id='fastly_acl_\" + index + \"'>\";\n                html += \"<td><input data-aclId='\"+ acl.id + \"' id='acl_\" + index + \"' value='\"+ acl.name +\"' disabled='disabled' class='input-text' type='text'></td>\";\n                html += \"<td class='col-actions'>\" +\n                    \"<button class='action-delete fastly-edit-acl-icon' data-acl-id='\" + acl.id + \"' data-acl-name='\" + acl.name + \"'id='fastly-edit-acl_\"+ index + \"' title='Edit ACL' type='button'>\" +\n                    \"<button class='action-delete fastly-delete-acl-icon' data-acl-id='\" + acl.name + \"' id='fastly-delete-acl_\"+ index + \"' title='Delete ACL' type='button'>\" +\n                    \"</td></tr>\";\n            });\n            if (html !== '') {\n                $('.no-acls').hide();\n            }\n            $('#fastly-acls-list').html(html);\n        }\n\n        /**\n         * Queries Fastly API to retrieve the list of ACL containers\n         *\n         * @param active_version\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function listAcls(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getAcls,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version},\n                beforeSend: function () {\n                    $('.loading-acls').show();\n                }\n            });\n        }\n\n        /**\n         * Save ACL container item\n         *\n         * @param acl_id\n         * @param item_value\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function saveEdgeAclItem(acl_id, item_value, comment_value, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.createAclItem,\n                showLoader: loaderVisibility,\n                data: {'acl_id': acl_id, 'item_value': item_value, 'comment_value': comment_value},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        /**\n         * Delete ACL container\n         */\n        function deleteAcl()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            let del_acl = $(\"input[name='acl']\").val();\n\n            $.ajax({\n                type: \"POST\",\n                url: config.deleteAcl,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'acl': del_acl\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successAclBtnMsg.text($.mage.__('ACL successfully deleted.')).show();\n                        active_version = response.active_version;\n                        // Fetch ACLs\n                        listAcls(active_version, false).done(function (aclResp) {\n                            $('.loading-acls').hide();\n                            if (aclResp.status !== false) {\n                                if (aclResp.acls.length > 0) {\n                                    acls = aclResp.acls;\n                                    processAcls(aclResp.acls);\n                                } else {\n                                    $('#fastly-acls-list').html('');\n                                    $('.no-acls').show();\n                                }\n                            }\n                        }).fail(function () {\n                            return errorAclBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                        });\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorAclBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Delete ACL container item\n         *\n         * @param acl_id\n         * @param acl_item_id\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function deleteEdgeAclItem(acl_id, acl_item_id, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.deleteAclItem,\n                showLoader: loaderVisibility,\n                data: {'acl_id': acl_id, 'acl_item_id': acl_item_id},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        function updateEdgeAclItem(acl_id, acl_item_id, item_value, comment_value, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.updateAclItem,\n                showLoader: loaderVisibility,\n                data: {'acl_id': acl_id, 'acl_item_id': acl_item_id, 'item_value': item_value, 'comment_value': comment_value},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        /**\n         * ACL container add button on click event\n         */\n        $('#add-acl-container-button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorAclBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                overlay(aclContainerOptions);\n                setServiceLabel(active_version, next_version, service_name);\n                $('.upload-button span').text('Create');\n\n            }).fail(function () {\n                return errorAclBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * ACL container edit button on click event\n         */\n        $('body').on('click', 'button.fastly-edit-acl-icon', function () {\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (checkService) {\n                active_version = checkService.active_version;\n                let next_version = checkService.next_version;\n                let service_name = checkService.service.name;\n                setServiceLabel(active_version, next_version, service_name);\n            });\n\n            acl_id = $(this).data('acl-id');\n            let acl_name = $(this).data('acl-name');\n\n            // Handle ACLs\n            if (acls != null && acl_id != null) {\n                $.ajax({\n                    type: \"POST\",\n                    url: config.getAclItems,\n                    showLoader: true,\n                    data: {'acl_id': acl_id}\n                }).done(function (response) {\n                    if (response.status !== false) {\n                        aclItems = response.aclItems;\n                        itemsHtml = '';\n                        if (response.aclItems.length > 0) {\n                            $.each(response.aclItems, function (index, item) {\n                                let ip_output;\n                                if (item.subnet) {\n                                    ip_output = item.ip + '/' + item.subnet;\n                                } else {\n                                    ip_output = item.ip;\n                                }\n                                if (item.negated === '1') {\n                                    ip_output = '!' + ip_output;\n                                }\n                                let created_at = new Date(item.created_at);\n                                itemsHtml += '<tr><td>' +\n                                    '<input name=\"value\" data-type=\"acl\" data-id=\"'+ _.escape(item.id) +'\" value=\"'+ _.escape(ip_output) +'\" class=\"input-text admin__control-text acl-items-field\" type=\"text\" disabled></td>' +\n                                    '<td><input name=\"comment\" data-type=\"acl\" value=\"'+ _.escape(item.comment) +'\" class=\"input-text admin__control-text acl-comment\" type=\"text\" disabled></td>' +\n                                    '<td><div class=\"admin__control-text dialog-item acl-date\">' + created_at.toUTCString() + '</div></td>' +\n                                    '<td class=\"col-actions\">' +\n                                    '<button class=\"action-delete fastly-edit-action edit_acl_item\"  title=\"Edit\" type=\"button\"><span>Edit</span></button>' +\n                                    '<button class=\"action-delete remove_acl_item\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>' +\n                                    '</td></tr>';\n                            });\n                        } else {\n                            itemsHtml += '<tr><td>' +\n                                '<input name=\"value\" data-type=\"acl\" data-id=\"\" value=\"\" class=\"input-text admin__control-text acl-items-field\" type=\"text\"></td>' +\n                                '<td><input name=\"comment\" data-type=\"acl\" value=\"\" class=\"input-text admin__control-text acl-comment\" type=\"text\"></div></td>' +\n                                '<td><div class=\"admin__control-text dialog-item acl-date\"></div></td>' +\n                                '<td class=\"col-actions\">' +\n                                '<button class=\"action-delete fastly-save-action save_acl_item\" title=\"Save\" type=\"button\"><span>Save</span></button>' +\n                                '</td></tr>';\n                        }\n                    }\n\n                    overlay(aclItemOptions);\n                    $('.modal-title').text($.mage.__('\"%1\" ACL container items').replace('%1', acl_name));\n                    $('.upload-button').remove();\n\n                    $('#acl-items-table > tbody').html(itemsHtml);\n                });\n            }\n        });\n\n        /**\n         * ACL container add item button on click event\n         */\n        $('body').on('click', '#add-acl-item', function (e) {\n            $('#acl-items-table > tbody').append('<tr>' +\n                '<td><input name=\"value\" data-type=\"acl\" data-id=\"\" required=\"required\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                '<td><input name=\"comment\" data-type=\"acl\" value=\"\" class=\"input-text admin__control-text acl-comment\" type=\"text\"></div></td>' +\n                '<td><div class=\"admin__control-text dialog-item acl-date\"></div></td>' +\n                '<td class=\"col-actions\">' +\n                '<button class=\"action-delete fastly-save-action save_acl_item\" title=\"Save\" type=\"button\"><span>Save</span></button>' +\n                '</td></tr>');\n        });\n\n        /**\n         * ACL container save item button on click event\n         */\n        $('body').on('click', '.save_acl_item', function () {\n            let valueField = $(this).closest('tr').find(\"input[name='value']\");\n            let commentField = $(this).closest('tr').find(\"input[name='comment']\");\n            let item_value = valueField.val();\n            let comment_value = commentField.val();\n            let errors = false;\n\n            if (item_value === '') {\n                errors = true;\n                valueField.css('border-color', '#e22626');\n            } else {\n                valueField.css('border-color', '#878787');\n            }\n\n            if (errors) {\n                resetAllMessages();\n                return showErrorMessage($.mage.__('Please enter all required fields.'));\n            }\n\n            let self = this;\n\n            saveEdgeAclItem(acl_id, item_value, comment_value, true).done(function (response) {\n                if (response.status === true) {\n                    let created_at = new Date(response.created_at);\n                    $(self).closest('tr').find(\"input[name='value']\").prop('disabled', true);\n                    $(self).closest('tr').find(\"input[name='comment']\").prop('disabled', true);\n                    $(self).closest('tr').find(\".acl-comment\").val(response.comment);\n                    $(self).closest('tr').find(\".acl-date\").html(created_at.toUTCString());\n                    let newElement = $(self).closest('tr').find(\"input[name='value']\")[0];\n                    newElement.setAttribute('data-id', response.id);\n                    $(self).closest('tr').find(\".col-actions\").html(\n                        '<button class=\"action-delete fastly-edit-action edit_acl_item\"  title=\"Edit\" type=\"button\"><span>Edit</span></button>'+\n                        '<button class=\"action-delete remove_acl_item\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>'\n                    );\n\n                    showSuccessMessage($.mage.__('ACL item is successfully saved.'));\n                } else {\n                    showErrorMessage(response.msg);\n                }\n            }).fail(function () {\n                showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n            });\n        });\n\n        /**\n         * ACL container remove item button on click event\n         */\n        $('body').on('click', '.remove_acl_item', function () {\n            let valueField = $(this).closest('tr').find(\"input[name='value']\");\n            let acl_item_id = valueField.data('id');\n            let acl_item_name = valueField.val();\n            let self = this;\n\n            confirm({\n                title: 'Delete Dictionary Item',\n                content: 'Are you sure you want to delete the ACL item with the \"'+acl_item_name+'\" IP value?',\n                actions: {\n                    confirm: function () {\n                        deleteEdgeAclItem(acl_id, acl_item_id, true).done(function (response) {\n                            if (response.status === true) {\n                                $(self).closest('tr').remove();\n                                showSuccessMessage($.mage.__('ACL item is successfully deleted.'));\n                            }\n                        }).fail(function () {\n                            showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n                        });\n                    },\n                    cancel: function () {}\n                }\n            });\n        });\n\n        $('body').on('click', '.edit_acl_item', function () {\n            let valueField = $(this).closest('tr').find(\"input[name='value']\");\n            let commentField = $(this).closest('tr').find(\"input[name='comment']\");\n            let self = this;\n            valueField.prop('disabled', false);\n            commentField.prop('disabled', false);\n            $(self).removeClass('fastly-edit-action');\n            $(self).removeClass('edit_acl_item');\n            $(self).addClass('fastly-save-action');\n            $(self).addClass('update_acl_item');\n        });\n\n        $('body').on('click', '.update_acl_item', function () {\n            let valueField = $(this).closest('tr').find(\"input[name='value']\");\n            let commentField = $(this).closest('tr').find(\"input[name='comment']\");\n            let acl_item_id = valueField.data('id');\n            let item_value = valueField.val();\n            let comment_value = commentField.val();\n            let self = this;\n\n            updateEdgeAclItem(acl_id, acl_item_id, item_value, comment_value, true).done(function (response) {\n                if (response.status === true) {\n                    $(self).closest('tr').find(\"input[name='value']\").prop('disabled', true);\n                    $(self).closest('tr').find(\"input[name='comment']\").prop('disabled', true);\n                    $(self).closest('tr').find(\".acl-comment\").val(response.comment);\n                    $(self).closest('tr').find(\".col-actions\").html(\n                        '<button class=\"action-delete fastly-edit-action edit_acl_item\"  title=\"Edit\" type=\"button\"><span>Edit</span></button>'+\n                        '<button class=\"action-delete remove_acl_item\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>'\n                    );\n                    showSuccessMessage($.mage.__('ACL item is successfully updated.'));\n                } else {\n                    showErrorMessage(response.msg);\n                }\n            }).fail(function () {\n                showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n            });\n        });\n\n        /**\n         * ACL container delete button on click event\n         */\n        $('body').on('click', 'button.fastly-delete-acl-icon', function () {\n            acl_id = $(this).data('acl-id');\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (checkService) {\n                active_version = checkService.active_version;\n                let next_version = checkService.next_version;\n                let service_name = checkService.service.name;\n\n                if (acls != null && acl_id != null) {\n                    let aclHtml = '<input name=\"acl\" value=\"' + acl_id + '\" class=\"input-text admin__control-text acl-field\" type=\"hidden\" disabled>';\n                    overlay(aclDeleteContainerOptions);\n                    setServiceLabel(active_version, next_version, service_name);\n                    let containerWarning = $('#fastly-container-warning');\n                    $('.modal-title').text($.mage.__('Delete \"%1\" ACL container').replace('%1', acl_id));\n                    containerWarning.text($.mage.__('You are about to delete the \"%1\" ACL container.').replace('%1', acl_id));\n                    containerWarning.show();\n                    if (aclHtml !== '') {\n                        $('#delete-acl-container').html(aclHtml);\n                    }\n                }\n            });\n        });\n\n    }\n});\n","Fastly_Cdn/js/edge-dictionaries.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    \"showSuccessMessage\",\n    \"Magento_Ui/js/modal/confirm\",\n    'underscore',\n    'mage/translate'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, showSuccessMessage, confirm, _) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n\n        /* Dictionary button messages */\n        let successDictionaryBtnMsg = $('#fastly-success-dictionary-button-msg');\n        let errorDictionaryBtnMsg = $('#fastly-error-dictionary-button-msg');\n\n        let itemsHtml;\n        let dictionaryItems;\n        let dictionary_id;\n        let dictionaries;\n\n        let active_version = serviceStatus.active_version;\n\n        /**\n         * Dictionary container modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let dictionaryContainerOptions = {\n            title: jQuery.mage.__('Create dictionary container'),\n                content: function () {\n                return document.getElementById('fastly-dictionary-container-template').textContent;\n            },\n            actionOk: function () {\n                createDictionary(active_version);\n            }\n        };\n\n        /**\n         * Dictionary container items modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let dictionaryItemOptions = {\n            title: jQuery.mage.__('Dictionary items'),\n                content: function () {\n                return document.getElementById('fastly-dictionary-item-template').textContent;\n            },\n            actionOk: function () {\n            }\n        };\n\n        /**\n         * Dictionary container delete modal overlay options\n         *\n         * @type {{title: *, content: (function(): string), actionOk: actionOk}}\n         */\n        let dictionaryDeleteContainerOptions = {\n            title: jQuery.mage.__('Delete dictionary containers'),\n                content: function () {\n                return document.getElementById('fastly-delete-dictionary-container-template').textContent;\n            },\n            actionOk: function () {\n                deleteDictionary(active_version);\n            }\n        };\n\n        /**\n         * Trigger Dictionary container list\n         */\n        listDictionaries(active_version, false).done(function (response) {\n            $('.loading-dictionaries').hide();\n            if (response.status !== false) {\n                if (response.status !== false) {\n                    if (response.dictionaries.length > 0) {\n                        dictionaries = response.dictionaries;\n                        processDictionaries(response.dictionaries);\n                    } else {\n                        $('.no-dictionaries').show();\n                    }\n                }\n            }\n        }).fail(function () {\n            return errorDictionaryBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n        });\n\n        /**\n         * Create Dictionary container\n         */\n        function createDictionary()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            $.ajax({\n                type: \"POST\",\n                url: config.createDictionary,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'dictionary_name': $('#dictionary_name').val()\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successDictionaryBtnMsg.text($.mage.__('Dictionary is successfully created.')).show();\n                        active_version = response.active_version;\n                        // Fetch dictionaries\n                        listDictionaries(active_version, false).done(function (list) {\n                            $('.loading-dictionaries').hide();\n                            if (list.status !== false) {\n                                if (list.status !== false) {\n                                    if (list.dictionaries.length > 0) {\n                                        dictionaries = list.dictionaries;\n                                        processDictionaries(list.dictionaries);\n                                        $('.no-dictionaries').hide();\n                                    } else {\n                                        $('.no-dictionaries').show();\n                                    }\n                                }\n                            }\n                        }).fail(function () {\n                            return errorDictionaryBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                        });\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorDictionaryBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Process and display Dictionary container\n         *\n         * @param dictionaries\n         */\n        function processDictionaries(dictionaries)\n        {\n            let html = '';\n            $.each(dictionaries, function (index, dictionary) {\n                html += \"<tr id='fastly_dict_\" + index + \"'>\";\n                html += \"<td><input data-dictionaryId='\"+ dictionary.id + \"' id='dict_\" + index + \"' value='\"+ dictionary.name +\"' disabled='disabled' class='input-text' type='text'></td>\";\n                html += \"<td class='col-actions'>\" +\n                    \"<button class='action-delete fastly-edit-dictionary-icon' data-dictionary-id='\" + dictionary.id + \"' data-dictionary-name='\" + dictionary.name + \"' id='fastly-edit-dictionary_\"+ index + \"' title='Edit dictionary' type='button'>\" +\n                    \"<button class='action-delete fastly-delete-dictionary-icon' data-dictionary-id='\" + dictionary.name + \"' id='fastly-delete-dictionary_\"+ index + \"' title='Delete dictionary' type='button'>\" +\n                    \"</td></tr>\";\n            });\n            if (html !== '') {\n                $('.no-dictionaries').hide();\n            }\n            $('#fastly-dictionaries-list').html(html);\n        }\n\n        /**\n         * Queries Fastly API to retrieve the list of Dictionary containers\n         *\n         * @param active_version\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function listDictionaries(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getDictionaries,\n                showLoader: loaderVisibility,\n                data: {'active_version': active_version},\n                beforeSend: function () {\n                    $('.loading-dictionaries').show();\n                }\n            });\n        }\n\n        /**\n         * Save Dictionary container item\n         *\n         * @param dictionary_id\n         * @param item_key\n         * @param item_value\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function saveEdgeDictionaryItem(dictionary_id, item_key, item_value, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.createDictionaryItem,\n                showLoader: loaderVisibility,\n                data: {'dictionary_id': dictionary_id, 'item_key': item_key, 'item_value': item_value},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        /**\n         * Delete Dictionary container\n         */\n        function deleteDictionary()\n        {\n            let activate_vcl = false;\n\n            if ($('#fastly_activate_vcl').is(':checked')) {\n                activate_vcl = true;\n            }\n\n            let del_dictionary = $(\"input[name='dictionary']\").val();\n\n            $.ajax({\n                type: \"POST\",\n                url: config.deleteDictionary,\n                data: {\n                    'active_version': active_version,\n                    'activate_flag': activate_vcl,\n                    'dictionary': del_dictionary\n                },\n                showLoader: true,\n                success: function (response) {\n                    if (response.status === true) {\n                        successDictionaryBtnMsg.text($.mage.__('Dictionary successfully deleted.')).show();\n                        active_version = response.active_version;\n                        // Fetch dictionaries\n                        listDictionaries(active_version, false).done(function (dictResp) {\n                            $('.loading-dictionaries').hide();\n                            if (dictResp.status !== false) {\n                                if (dictResp.dictionaries.length > 0) {\n                                    dictionaries = dictResp.dictionaries;\n                                    processDictionaries(dictResp.dictionaries);\n                                } else {\n                                    $('#fastly-dictionaries-list').html('');\n                                    $('.no-dictionaries').show();\n                                }\n                            }\n                        }).fail(function () {\n                            return errorDictionaryBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                        });\n                        modal.modal('closeModal');\n                    } else {\n                        resetAllMessages();\n                        showErrorMessage(response.msg);\n                    }\n                },\n                error: function () {\n                    return errorDictionaryBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n                }\n            });\n        }\n\n        /**\n         * Delete Dictionary container item\n         *\n         * @param dictionary_id\n         * @param item_key\n         * @param loaderVisibility\n         * @returns {*}\n         */\n        function deleteEdgeDictionaryItem(dictionary_id, item_key, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.deleteDictionaryItem,\n                showLoader: loaderVisibility,\n                data: {'dictionary_id': dictionary_id, 'item_key': item_key},\n                beforeSend: function () {\n                    resetAllMessages();\n                }\n            });\n        }\n\n        /**\n         * Dictionary container add button on click event\n         */\n        $('#add-dictionary-container-button').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.when(\n                $.ajax({\n                    type: \"GET\",\n                    url: config.serviceInfoUrl,\n                    showLoader: true\n                })\n            ).done(function (service) {\n                if (service.status === false) {\n                    return errorDictionaryBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n                let next_version = service.next_version;\n                let service_name = service.service.name;\n\n                overlay(dictionaryContainerOptions);\n                setServiceLabel(active_version, next_version, service_name);\n                $('.upload-button span').text('Create');\n\n            }).fail(function () {\n                return errorDictionaryBtnMsg.text($.mage.__('An error occurred while processing your request. Please try again.')).show();\n            });\n        });\n\n        /**\n         * Dictionary container edit button on click event\n         */\n        $('body').on('click', 'button.fastly-edit-dictionary-icon', function () {\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (checkService) {\n                active_version = checkService.active_version;\n                let next_version = checkService.next_version;\n                let service_name = checkService.service.name;\n                setServiceLabel(active_version, next_version, service_name);\n            });\n\n            dictionary_id = $(this).data('dictionary-id');\n            let dictionary_name = $(this).data('dictionary-name');\n            // Handle Dictionaries\n            if (dictionaries != null && dictionary_id != null) {\n                $.ajax({\n                    type: \"POST\",\n                    url: config.getDictionaryItems,\n                    showLoader: true,\n                    data: {'dictionary_id': dictionary_id}\n                }).done(function (response) {\n                    if (response.status !== false) {\n                        dictionaryItems = response.dictionaryItems;\n                        itemsHtml = '';\n                        if (response.dictionaryItems.length > 0) {\n                            $.each(response.dictionaryItems, function (index, item) {\n                                itemsHtml += '<tr><td>' +\n                                    '<input name=\"key\" value=\"'+ _.escape(item.item_key) +'\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\" disabled></td>' +\n                                    '<td><input name=\"value\" data-type=\"dictionary\" value=\"'+ _.escape(item.item_value) +'\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                                    '<td class=\"col-actions\">' +\n                                    '<button class=\"action-delete fastly-save-action save_dictionary_item\" title=\"Save\" type=\"button\"><span>Save</span></button>' +\n                                    '<button class=\"action-delete remove_dictionary_item\"  title=\"Delete\" type=\"button\"><span>Delete</span></button>' +\n                                    '</td></tr>';\n                            });\n                        } else {\n                            itemsHtml += '<tr><td>' +\n                                '<input name=\"key\" value=\"\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                                '<td><input name=\"value\" data-type=\"dictionary\" value=\"\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                                '<td class=\"col-actions\">' +\n                                '<button class=\"action-delete fastly-save-action save_dictionary_item\" title=\"Save\" type=\"button\"><span>Save</span></button>' +\n                                '</td></tr>';\n                        }\n                    }\n\n                    overlay(dictionaryItemOptions);\n                    $('.modal-title').text($.mage.__('\"%1\" dictionary container items').replace('%1', dictionary_name));\n                    $('.upload-button').remove();\n\n                    $('#dictionary-items-table > tbody').html(itemsHtml);\n                });\n            }\n        });\n\n        /**\n         * Dictionary container add item button on click event\n         */\n        $('body').on('click', '#add-dictionary-item', function () {\n            $('#dictionary-items-table > tbody').append('<tr><td><input name=\"key\" required=\"required\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                '<td><input name=\"value\" data-type=\"dictionary\" required=\"required\" class=\"input-text admin__control-text dictionary-items-field\" type=\"text\"></td>' +\n                '<td class=\"col-actions\">' +\n                '<button class=\"action-delete fastly-save-action save_dictionary_item\" title=\"Save\" type=\"button\"><span>Save</span></button>' +\n                '<button class=\"action-delete remove_dictionary_item\"  title=\"Delete\" type=\"button\" hidden><span>Delete</span></button>' +\n                '</td></tr>');\n        });\n\n        /**\n         * Dictionary container save item on click event\n         */\n        $('body').on('click', '.save_dictionary_item', function () {\n            let keyField = $(this).closest('tr').find(\"input[name='key']\");\n            let valueField = $(this).closest('tr').find(\"input[name='value']\");\n            let item_key = keyField.val();\n            let item_value = valueField.val();\n            let errors = false;\n\n            if (item_key === '') {\n                errors = true;\n                keyField.css('border-color', '#e22626');\n            } else {\n                keyField.css('border-color', '#878787');\n            }\n\n            if (item_value === '') {\n                errors = true;\n                valueField.css('border-color', '#e22626');\n            } else {\n                valueField.css('border-color', '#878787');\n            }\n\n            if (errors) {\n                resetAllMessages();\n                return showErrorMessage($.mage.__('Please enter all required fields.'));\n            }\n\n            let self = this;\n\n            saveEdgeDictionaryItem(dictionary_id, item_key, item_value, true).done(function (response) {\n                if (response.status === true) {\n                    $(self).closest('tr').find(\"input[name='key']\").prop('disabled', true);\n                    $(self).closest('tr').find(\".remove_dictionary_item\").show();\n                    showSuccessMessage($.mage.__('Dictionary item is successfully saved.'));\n                } else {\n                    showErrorMessage(response.msg);\n                }\n            }).fail(function () {\n                showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n            });\n        });\n\n        /**\n         * Dictionary container remove item on click event\n         */\n        $('body').on('click', '.remove_dictionary_item', function () {\n            let item_key = $(this).closest('tr').find(\"input[name='key']\").val();\n            let self = this;\n            confirm({\n                title: 'Delete Dictionary Item',\n                content: 'Are you sure you want to delete the \"'+item_key+'\" dictionary item?',\n                actions: {\n                    confirm: function () {\n                        deleteEdgeDictionaryItem(dictionary_id, item_key, true).done(function (response) {\n                            if (response.status === true) {\n                                $(self).closest('tr').remove();\n                                showSuccessMessage($.mage.__('Dictionary item is successfully deleted.'));\n                            }\n                        }).fail(function () {\n                            showErrorMessage($.mage.__('An error occurred while processing your request. Please try again.'));\n                        });\n                    },\n                    cancel: function () {}\n                }\n            });\n        });\n\n        /**\n         * Dictionary container delete button on click event\n         */\n        $('body').on('click', 'button.fastly-delete-dictionary-icon', function () {\n            dictionary_id = $(this).data('dictionary-id');\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (checkService) {\n                active_version = checkService.active_version;\n                let next_version = checkService.next_version;\n                let service_name = checkService.service.name;\n\n                if (dictionaries != null && dictionary_id != null) {\n                    let dictionaryHtml = '<input name=\"dictionary\" value=\"' + dictionary_id + '\" class=\"input-text admin__control-text dictionary-field\" type=\"hidden\" disabled>';\n                    overlay(dictionaryDeleteContainerOptions);\n                    setServiceLabel(active_version, next_version, service_name);\n                    let containerWarning = $('#fastly-container-warning');\n                    $('.modal-title').text($.mage.__('Delete \"%1\" Dictionary container').replace('%1', dictionary_id));\n                    containerWarning.text($.mage.__('You are about to delete the \"%1\" Dictionary container.').replace('%1', dictionary_id));\n                    containerWarning.show();\n                    if (dictionaryHtml !== '') {\n                        $('#delete-dictionary-container').html(dictionaryHtml);\n                    }\n                }\n            });\n        });\n\n    }\n});\n","Fastly_Cdn/js/error-message.js":"define([\n    \"jquery\"\n], function ($) {\n    return function showErrorMessage(msg)\n    {\n        /**\n         * Show error message\n         *\n         * @type {*|jQuery|HTMLElement}\n         */\n        let msgError = $('.fastly-message-error');\n        msgError.html($.mage.__(msg));\n        msgError.show();\n        msgError.focus();\n    }\n});","Fastly_Cdn/js/export.js":"define([\n    \"jquery\",\n    \"setServiceLabel\",\n    \"overlay\",\n    \"resetAllMessages\",\n    \"showErrorMessage\",\n    'mage/translate',\n    'importExportRenderer'\n], function ($, setServiceLabel, overlay, resetAllMessages, showErrorMessage, translate, importExportRenderer) {\n    return function (config, serviceStatus, isAlreadyConfigured) {\n        let successExportBtnMsg = $('#fastly-success-export-button-msg');\n        let errorExportBtnMsg = $('#fastly-error-export-button-msg');\n\n        let active_version = serviceStatus.active_version;\n        let customSnippets;\n        let acls;\n        let dictionaries;\n        let activeModules;\n        let adminTimeout = $(\"#system_full_page_cache_fastly_fastly_advanced_configuration_admin_path_timeout\").val();\n\n\n        let exportOptions = {\n            id: 'fastly-export-options',\n            title: jQuery.mage.__(' '),\n            content: function () {\n                return document.getElementById('fastly-export-template').textContent;\n            },\n            actionOk: function () {\n                fastlyExport(active_version);\n            }\n        };\n\n        $('#fastly_export').on('click', function () {\n            if (isAlreadyConfigured !== true) {\n                $(this).attr('disabled', true);\n                return alert($.mage.__('Please save config prior to continuing.'));\n            }\n\n            resetAllMessages();\n\n            $.ajax({\n                type: \"GET\",\n                url: config.serviceInfoUrl,\n                showLoader: true\n            }).done(function (service) {\n                if (service.status === false) {\n                    return errorExportBtnMsg.text($.mage.__('Please check your Service ID and API token and try again.')).show();\n                }\n\n                active_version = service.active_version;\n\n                getExportData(active_version, true).done(function (response) {\n                    overlay(exportOptions);\n                    $('.modal-title').text($.mage.__('Export Edge ACLs, Edge Dictionaries, Active Edge Modules and Custom Snippets'));\n                    $('.upload-button span').text('Export');\n                    let html = '';\n                    customSnippets = response.custom_snippets;\n                    dictionaries = response.dictionaries;\n                    acls = response.acls;\n                    activeModules = response.active_modules;\n\n                    html += importExportRenderer.renderEdgeAcls(acls);\n\n                    html += importExportRenderer.renderEdgeDisctionaries(dictionaries);\n\n                    html += importExportRenderer.renderCustomSnippets(customSnippets);\n\n                    html += importExportRenderer.renderActiveEdgeModules(activeModules);\n\n                    html += `<div class=\"admin__field field\">\n                        <div class=\"admin__field-control export-field\">\n                            <label class=\"admin__field-label\"><b>Advanced Configuration</b></label>\n                        </div>\n                    </div>`;\n\n                    html += importExportRenderer.renderAdminPathTimeout(adminTimeout);\n\n                    $('.question').html(html);\n                });\n            });\n        });\n\n        function getExportData(active_version, loaderVisibility)\n        {\n            return $.ajax({\n                type: \"GET\",\n                url: config.getExportDataUrl,\n                showLoader: loaderVisibility\n            });\n        }\n\n        function fastlyExport()\n        {\n            let checkedAcls = {};\n            $('.export-acl:checked').each(function () {\n                let aclId = $(this).attr('id');\n                $.each(acls, function (index, acl) {\n                    if (aclId === acl.id) {\n                        checkedAcls[acl.id] = acl.name\n                    }\n                });\n            });\n\n            let checkedDictionaries = {};\n            $('.export-dictionary:checked').each(function () {\n                let dictionaryId = $(this).attr('id');\n                $.each(dictionaries, function (index, dictionary) {\n                    if (dictionaryId === dictionary.id) {\n                        checkedDictionaries[dictionary.id] = dictionary.name\n                    }\n                });\n            });\n\n            let checkedCustomSnippets = {};\n            $('.export-custom-snippet:checked').each(function () {\n                let snippetName = $(this).attr('id');\n                $.each(customSnippets, function (index, content) {\n                    if (snippetName === index) {\n                        checkedCustomSnippets[index] = content;\n                    }\n                });\n            });\n\n            let checkedActiveModules = {};\n            $('.export-active-modules:checked').each(function () {\n                let module_id = $(this).attr('id');\n                $.each(activeModules, function (index, content) {\n                    if (module_id === content.manifest_id) {\n                        checkedActiveModules[index] = content;\n                    }\n                });\n            });\n\n            let adminTimeoutPath;\n            if ($('.export-admin-timeout').prop('checked')) {\n                adminTimeoutPath = adminTimeout;\n            }\n\n\n            if ($.isEmptyObject(checkedAcls) && $.isEmptyObject(checkedDictionaries) && $.isEmptyObject(checkedCustomSnippets\n                && $.isEmptyObject(checkedActiveModules))) {\n                resetAllMessages();\n                showErrorMessage('At least one item must be selected.');\n                return;\n            }\n            $.ajax({\n                type: \"POST\",\n                url: config.exportDataUrl,\n                showLoader: true,\n                data: {\n                    'acls': checkedAcls,\n                    'dictionaries': checkedDictionaries,\n                    'custom_snippets': checkedCustomSnippets,\n                    'active_modules': checkedActiveModules,\n                    'admin_timeout': adminTimeoutPath\n                }\n            }).done(function (response) {\n                if (response !== false) {\n                    $('#fastly-export-form').submit();\n                    modal.modal('closeModal');\n                    return successExportBtnMsg.text($.mage.__('Successfully exported.')).show();\n                } else {\n                    resetAllMessages();\n                    showErrorMessage(response.msg);\n                }\n            });\n        }\n\n        $('body').on('click', '.acl-items-btn', function () {\n            let acl_id = $(this).closest('.admin__field-option').find(\".admin__control-checkbox\").attr('id');\n            let acl_field = $(this).parents('div.field');\n            $.ajax({\n                type: \"POST\",\n                url: config.getAclItems,\n                showLoader: true,\n                data: {'acl_id': acl_id}\n            }).done(function (response) {\n                if (response.status !== false) {\n                    let acls = [];\n                    $.each(response.aclItems, function (index, item) {\n                        acls.push(importExportRenderer.stringifyAclDetail(index, item));\n                    });\n                    $('.'+acl_id).remove();\n                    let itemsHtml = importExportRenderer.renderDetails(acl_id, acls)\n                    acl_field.after(itemsHtml);\n                    return;\n                }\n\n                modal.modal('closeModal');\n                return errorExportBtnMsg.text($.mage.__(response.msg)).show();\n            });\n        });\n\n        $('body').on('click', '.dictionary-items-btn', function () {\n            let dictionary_id = $(this).closest('.admin__field-option').find(\".admin__control-checkbox\").attr('id');\n            let dictionary_field = $(this).parents('div.field');\n            $.ajax({\n                type: \"POST\",\n                url: config.getDictionaryItems,\n                showLoader: true,\n                data: {'dictionary_id': dictionary_id}\n            }).done(function (response) {\n                if (response.status !== false) {\n                    let dictionaries = [];\n                    $.each(response.dictionaryItems, function (index, item) {\n                        dictionaries.push(importExportRenderer.stringifyDictionaryDetail(index, item));\n                    });\n                    $('.'+dictionary_id).remove();\n                    let itemsHtml = importExportRenderer.renderDetails(dictionary_id, dictionaries)\n                    dictionary_field.after(itemsHtml);\n                    return;\n                }\n\n                modal.modal('closeModal');\n                return errorExportBtnMsg.text($.mage.__(response.msg)).show();\n            });\n        });\n    }\n});"}
}});

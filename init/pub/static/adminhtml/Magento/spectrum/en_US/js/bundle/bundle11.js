require.config({"config": {
        "jsbuild":{"Amasty_Customform/js/form-builder.js":"define([\n    'jquery',\n    'underscore',\n    'Amasty_Customform/js/form-builder-helper',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate',\n    'Magento_Ui/js/modal/modal',\n    'mage/backend/tabs'\n], function ($, _, helper, alert) {\n    'use strict';\n\n    $.widget('mage.customFormBuilder', {\n        options: {\n            controlPosition: 'right',\n            controlOrder: ['autocomplete', 'button', 'checkbox', 'checkbox-group',\n                'date', 'file', 'header', 'hidden', 'paragraph', 'number', 'radio-group', 'select', 'text', 'textarea'],\n            dataType: 'json',\n            // Array of fields to disable\n            disableFields: [],\n            editOnAdd: false,\n            // Uneditable fields or other content you would like to appear before and after regular fields:\n            append: false,\n            prepend: false,\n            defaultFields: [],\n            inputSets: [],\n            fieldRemoveWarn: false,\n            messages: {},\n            frmbFields: [{\n                label: 'autocomplete',\n                attrs: {\n                    type: 'autocomplete',\n                    className: 'autocomplete',\n                    name: 'autocomplete'\n                }\n            }],\n            notify: {\n                error: function error(message) {\n                    return console.error(message);\n                },\n                success: function success(message) {\n                    return console.log(message);\n                },\n                warning: function warning(message) {\n                    return console.warn(message);\n                }\n            },\n            sortableControls: false,\n            stickyControls: false,\n            showActionButtons: true,\n            typeUserAttrs: {},\n            typeUserEvents: {},\n            prefix: 'form-builder-',\n            fbInstances: [],\n            savedValue: '[name=\"form_json\"]',\n            savedTitles: '[name=\"form_title\"]',\n            pageFormId: [],\n            pageTitles: []\n        },\n        classes: {\n            delete: 'deleting'\n        },\n        selectors: {\n            wysiwygField: '[type=wysiwyg]',\n            deleteButton: '.delete-confirm',\n            fieldFirst: '.form-field:eq(0)',\n            wysiwygContainer: '.wysiwyg-field#{id}'\n        },\n\n        _create: function () {\n            var self = this,\n                formbId,\n                savedValue,\n                formDataJSON = [],\n                savedTitles,\n                pageCount;\n\n            self.generateSubtypes();\n\n            formDataJSON = self.options.form_json;\n            savedTitles = $(self.options.savedTitles).val();\n            self.formTitle = savedTitles ? window.JSON.parse(savedTitles) : this.options.pageTitles;\n\n            if (formDataJSON.length && !Array.isArray(formDataJSON[0])) {\n                var createPage = [];\n                createPage.push(formDataJSON);\n                formDataJSON = createPage;\n            }\n\n            if (formDataJSON.length) {\n                pageCount = formDataJSON.length;\n\n                for (var i = 0; i < pageCount; i++) {\n                    self.formData = formDataJSON[i];\n                    formbId = 'frmb-' + i;\n\n                    if (i == 0) {\n                        self.initialization(formbId);\n                        self.setPageTitle(i);\n                    } else {\n                        self.createNewPage(formbId);\n                        self.setPageTitle(i);\n                    }\n                }\n                $('[data-amcform-role=\"page\"]:first-child').find('a').trigger('click');\n            } else {\n                formbId = 'frmb-' + $('ul[id^=frmb-].frmb').length++;\n                self.formData = formDataJSON;\n                self.initialization(formbId);\n                if ($('[data-amcform-role=\"page\"]').length == 1) {\n                    $('[data-amcform-role=\"page\"]').find('a').trigger('click');\n                }\n            }\n        },\n\n        initialization: function (formbId) {\n            var self = this,\n                $cbUL,\n                boxID = formbId + '-control-box';\n\n            this.lastID = formbId + '-fld-1';\n            this.options.formID = formbId;\n            this.options.pageFormId.push(formbId);\n\n            this.helpers = helper[1](this.options, this);\n            this.utils = helper[0];\n\n            this.layout = this.helpers.editorLayout(this.options.controlPosition);\n\n            // create array of field objects to cycle through\n            var frmbFields = this.options.frmbFields;\n            //frmbFields = this.helpers.orderFields(frmbFields);\n\n            if (this.options.disableFields) {\n                // remove disabledFields\n                frmbFields = frmbFields.filter(function (field) {\n                    return !self.utils.inArray(field.attrs.type, self.options.disableFields);\n                });\n            }\n\n            // Create draggable fields for this.options\n            var cbUl = this.utils.markup('ul', null, {id: boxID, className: 'frmb-control'});\n\n            if (this.options.sortableControls) {\n                cbUl.classList.add('sort-enabled');\n            }\n\n            $cbUL = $(cbUl);\n            this.generateFormFields(frmbFields, $cbUL);\n\n            if (this.options.inputSets.length) {\n                $('<li/>', {'class': 'fb-separator'}).html('<hr>').appendTo($cbUL);\n                this.options.inputSets.forEach(function (set) {\n                    set.name = set.name || this.helpers.makeClassName(set.label);\n                    var $set = $('<li/>', {'class': 'input-set-control', type: set.name});\n                    $set.html(set.label).appendTo($cbUL);\n                });\n            }\n\n            this.generateSortable(formbId, $cbUL);\n            this.generateWrapperContent(formbId, $cbUL);\n\n            $cbUL.prev('.amcustomform-element-tabs').find('li:first-child').click();\n\n            this.observeFields($cbUL, formbId);\n\n            this.helpers.getData();\n            this.loadFields();\n\n            this.sortableFields.css('min-height', $cbUL.height());\n\n            // If option set, controls will remain in view in editor\n            if (this.options.stickyControls) {\n                this.helpers.stickyControls(this.sortableFields, cbUl);\n            }\n\n            document.dispatchEvent(self.events.loaded);\n\n            // Make actions accessible\n            self.actions = {\n                clearFields: self.helpers.removeAllfields,\n                showData: self.helpers.showData,\n                save: self.helpers.save,\n                addField: function addField(field, index) {\n                    self.helpers.stopIndex = self.sortableFields[0].children.length ? index : undefined;\n                    self.prepFieldVars(field);\n                    document.dispatchEvent(self.events.fieldAdded);\n                },\n                removeField: self.helpers.removeField,\n                setData: function setData(formData) {\n                    self.helpers.removeAllfields();\n                    self.helpers.getData(formData);\n                    self.loadFields();\n                }\n            };\n        },\n\n        addCollapseDefaultValueVariables: function (element) {\n            $(element).find('.value-wrap .default-values-link').on('click', function (e) {\n                var variantsBlock = $(e.target).closest('.value-note-wrap').find('.default-value-variants');\n                variantsBlock.slideToggle();\n                e.preventDefault();\n            });\n        },\n\n        addValidateObserve: function ($element) {\n            var self = this,\n                select = $element.find('.fld-validation');\n            this.validateObserve(select);\n\n            select.change(function (e) {\n                self.validateObserve($(e.target));\n            });\n        },\n\n        validateObserve: function ($element) {\n            var regexpBlock = $element.parents('.form-group').next('.form-group.regexp-wrap'),\n                errorBlock = regexpBlock.next('.form-group.errorMessage-wrap');\n\n            if ($element.val() === 'pattern') {\n                regexpBlock.show();\n                errorBlock.show();\n            } else {\n                regexpBlock.hide();\n                errorBlock.hide();\n            }\n        },\n\n        /**\n         * Set page title for current page if there is a saved title\n         * @param page - (int) current page\n         */\n\n        setPageTitle: function (page) {\n            var self = this,\n                id = page + 1;\n\n            if (self.formTitle) {\n                $('#page-title-' + id).val(self.formTitle[page]);\n            }\n        },\n\n        /**\n         * Create new page\n         * @param formbId - (string) id for new form\n         */\n\n        createNewPage: function (formbId) {\n            var self = this,\n                tabCount = $('[data-amcform-js=\"tabs-wrap\"]').children().length,\n                tabId = \"page-\" + tabCount,\n                titleId = 'page-title-' + tabCount,\n                $newPageTemplate = $('[data-amcform-js=\"new-page\"]'),\n                $newPage = $newPageTemplate\n                    .clone()\n                    .removeAttr(\"data-amcform-js\")\n                    .attr(\"id\", tabId)\n                    .addClass(\"fb-editor\"),\n                $newTab = $('[data-amcform-js=\"add-new-page\"]')\n                    .clone()\n                    .removeAttr(\"data-amcform-js\")\n                    .attr('data-amcform-role', 'page')\n                    .removeClass('-new'),\n                $newTitle = $newPage.find('[data-amcform-js=\"title-edit-new\"]');\n\n            $(\"a\", $newTab)\n                .attr(\"href\", \"#\" + tabId)\n                .attr('data-amcform-role', 'page-link')\n                .attr(\"title\", $.mage.__('Page ') + tabCount)\n                .text($.mage.__('Page ') + tabCount);\n\n            $newTitle.attr('data-amcform-js', 'title-edit');\n            $newTitle.find('input').attr('id', titleId);\n            $newTitle.find('label').attr('for', titleId);\n\n            $newPage.insertBefore($newPageTemplate);\n            $newTab.insertBefore('[data-amcform-js=\"add-new-page\"]');\n\n            self.options.formWrapper.tabs(\"refresh\");\n            self.options.formWrapper.tabs(\"option\", \"active\", tabCount - 1);\n\n            self.element = $newPage;\n\n            $('[data-amcform-role=\"page\"]').removeClass('active');\n            $newTab.addClass('active');\n\n            if (!formbId) {\n                self.options.form_json = [];\n                self._create();\n                return;\n            }\n\n            self.initialization(formbId);\n        },\n\n        /**\n         * Delete current page\n         * @param page - DOM node\n         * @param e - event\n         */\n\n        deleteCurentPage: function (page, e) {\n            var self = this,\n                tab = $(page).parent(),\n                prevTab = tab.prev().find('a'),\n                pageId = $(page).prev().attr('href').split('-')[1];\n\n            e.stopPropagation();\n\n            self.downgradeTabNumber(tab);\n\n            tab.remove();\n            $('#page-' + pageId).remove();\n            prevTab.trigger('click');\n        },\n\n        /**\n         * Downgrade tabs number after deleting previos tab\n         * @param tab - DOM element\n         */\n        downgradeTabNumber: function (tab) {\n            var nextTabs = tab.nextAll().find('a');\n\n            nextTabs.each(function (index, page) {\n                if (index == nextTabs.length -1) {\n                    return;\n                }\n\n                var pageValue = $(page).text().split(' '),\n                    newPageId = pageValue[1] - 1,\n                    pageLabel = pageValue[0];\n\n                $(page).text(pageLabel + ' ' + newPageId);\n                $(page).attr('title', pageLabel + ' ' + newPageId);\n            });\n        },\n\n        /**\n         * Navigate between form pages\n         * @param page - DOM node\n         */\n\n        navigatePageForm: function (page) {\n            if ($(page).length > 0) {\n                var pageId = $(page).attr('href'),\n                    tab = $(page).parent(),\n                    tabId = pageId.split('-')[1] - 1,\n                    fields;\n\n                $('[data-amcform-role=\"page\"]').removeClass('active');\n                $(tab).addClass('active');\n                $(pageId).find('.amcustomform-element-tabs li:first-child').trigger('click');\n\n                // Set new settings\n                this.options.formID = 'frmb-' + tabId;\n                fields = $('#' + this.options.formID).children().length + 1;\n                this.lastID = this.options.formID + '-fld-' + fields;\n                this.sortableFields = $('ul#' + this.options.formID + '.frmb.ui-sortable');\n                this.stageWrap = $('div#' + this.options.formID + '-stage-wrap.stage-wrap.pull-left');\n            }\n        },\n\n        navigateKeyboard: function () {\n            this.navigatePageForm(\n                $('[data-amcform-role=\"page\"][aria-selected=\"true\"] a')\n            );\n        },\n\n        /**\n         * @return {array}\n         */\n        getPageTitles: function () {\n            var result = [];\n\n            $.each($('[data-amcform-js=\"title-edit\"] .amcform-input'), function (index, title) {\n                result.push($(title).val());\n            });\n\n            return result;\n        },\n\n        /**\n         * Set page titles in hidden input\n         */\n        savePageTitles: function () {\n            var self = this;\n\n            self.options.pageTitles = this.getPageTitles();\n\n            $('#form_form_title').val(window.JSON.stringify(self.options.pageTitles, null, '\\t'));\n\n            $('[data-amcform-js^=\"title-edit\"] .amcform-input').each(function (key, element) {\n                $(element).attr('disabled', 'disabled');\n            });\n        },\n\n        /**\n         * @return {array}\n         */\n        getSerializedFormConfig: function () {\n            var result = [];\n\n            $.each(this.options.pageFormId, function (index, id) {\n                var form = document.getElementById(id),\n                    json;\n\n                if (form) {\n                    json = this.helpers.prepData(form);\n\n                    if (json.length) {\n                        result.push(json);\n                    }\n                }\n            }.bind(this));\n\n            return result;\n        },\n\n        /**\n         * Save form configuration\n         */\n        generateSaveEvent: function (event) {\n            var self = this;\n\n            self.savePageTitles();\n\n            self.options.fbInstances = this.getSerializedFormConfig();\n\n            var formFields = 'input, textarea, select',\n                formContent = window.JSON.stringify(self.options.fbInstances, null, '');\n            if (formContent.length < 65000) {\n                $('[name=\"form_json\"]').val(formContent);\n                $('.form-wrap').find(formFields).each(function (key, element) {\n                    $(element).removeAttr('required').attr('disabled', 'disabled');\n                });\n            } else {\n                event.preventDefault();\n                self.options.fbInstances = [];\n                self.options.pageTitles = [];\n                alert({\n                    title: $.mage.__('Error'),\n                    content: $.mage.__('You have exceeded the maximum allowed number of fields. Please try to create several forms instead of this one.')\n                });\n            }\n        },\n\n        generateSubtypes: function () {\n            this.options.messages.subtypes = function () {\n                var subtypeDefault = function subtypeDefault(subtype) {\n                    return {\n                        label: subtype,\n                        value: subtype\n                    };\n                };\n\n                return {\n                    text: ['text', 'password', 'email', 'color', 'tel'].map(subtypeDefault),\n                    header: ['h1', 'h2', 'h3'].map(subtypeDefault)\n                };\n            }();\n        },\n\n        generateWrapperContent: function (formbId, $cbUL) {\n            var $formWrap = $('<div/>', {\n                id: formbId + '-form-wrap',\n                'class': 'form-wrap form-builder' + this.helpers.mobileClass()\n            });\n\n            this.stageWrap = $('<div/>', {\n                id: formbId + '-stage-wrap',\n                'class': 'stage-wrap ' + this.layout.stage\n            });\n\n            var controlbWrap = $('<div/>', {\n                id: formbId + '-cb-wrap',\n                'class': 'cb-wrap ' + this.layout.controls\n            });\n\n            /*show type controls*/\n            var typesWrap = $('<ul/>', {\n                'class': 'type-wrap amcform-tabs-wrap -second amcustomform-element-tabs'\n            });\n\n            var fieldsTypes = this.options.fieldsTypes;\n            this.utils.forEach(fieldsTypes, function (i) {\n                var $field = $('<li/>', {\n                    'id': 'amcustomform-type-' + fieldsTypes[i].type,\n                    'type': fieldsTypes[i].type,\n                    'text': fieldsTypes[i].title,\n                    'class': 'amcform-tab'\n                }).appendTo(typesWrap);\n\n                $field.on('click', function () {\n                    $('.amelement-container').hide();\n                    $('.amcustomform-element-tabs li').removeClass('active');\n                    $(this).addClass('active');\n                    var type = $(this).attr('type');\n                    $('.amelement-container[parenttype=\"' + type + '\"]').fadeIn();\n                });\n            });\n\n            controlbWrap.append(typesWrap);\n            controlbWrap.append($cbUL[0]);\n\n            if (this.options.showActionButtons) {\n                // Build our headers and action links\n                var viewDataText = this.options.dataType === 'xml' ? this.options.messages.viewXML : this.options.messages.viewJSON,\n\n                    clearAll = this.utils.markup('button', this.options.messages.clearAll, {\n                        id: formbId + '-clear-all',\n                        type: 'button',\n                        className: 'clear-all btn btn-default'\n                    });\n                var formActions = this.utils.markup('div', [clearAll], {\n                    className: 'form-actions btn-group'\n                });\n\n                controlbWrap.append(formActions);\n            }\n\n            this.stageWrap.append($(this.element).find('[data-amcform-js=\"title-edit\"]'));\n            this.stageWrap.append(this.sortableFields, controlbWrap);\n            this.stageWrap.before($formWrap);\n            $formWrap.append(this.stageWrap, controlbWrap);\n            $(this.element).append($formWrap);\n        },\n\n        generateSortable: function (formbId, $cbUL) {\n            // Sortable fields\n            this.sortableFields = $('<ul/>').attr('id', formbId).addClass('frmb');\n            this.sortableFields.sortable({\n                cursor: 'move',\n                opacity: 0.9,\n                revert: 150,\n                beforeStop: this.helpers.beforeStop,\n                start: this.helpers.startMoving,\n                stop: this.helpers.stopMoving,\n                cancel: 'input, select, .disabled, .form-group, .btn',\n                placeholder: 'frmb-placeholder'\n            });\n\n            // ControlBox with different fields\n            var self = this;\n            $cbUL.sortable({\n                helper: 'clone',\n                opacity: 0.9,\n                connectWith: this.sortableFields,\n                cancel: '.fb-separator',\n                cursor: 'move',\n                scroll: false,\n                placeholder: 'ui-state-highlight',\n                start: this.helpers.startMoving,\n                stop: this.helpers.stopMoving,\n                revert: 150,\n                beforeStop: this.helpers.beforeStop,\n                distance: 3,\n                update: this.helpers.update\n            });\n        },\n\n        generateFormFields: function (frmbFields, $cbUL) {\n            var self = this;\n            this.utils.forEach(frmbFields, function (i) {\n                var $field = $('<li/>', {\n                    'class': 'amelement-container icon-' + frmbFields[i].attrs.className,\n                    'type': frmbFields[i].attrs.type,\n                    'parentType': frmbFields[i].attrs.parentType,\n                    'name': frmbFields[i].className,\n                    'label': frmbFields[i].attrs.label\n                });\n\n                var $title = $('<div/>', {\n                    'class': 'amelement-title',\n                    'html': frmbFields[i].label\n                }).appendTo($field);\n\n                var $contentContainer = $('<div/>', {\n                    'class': 'amelement-content',\n                    'html': frmbFields[i].content\n                }).appendTo($field);\n\n                $field.data('newFieldData', frmbFields[i]);\n\n                $field.appendTo($cbUL);\n\n                if (frmbFields[i].attrs.type == 'date') {\n                    self.helpers.updateDateField($field, frmbFields[i].attrs.format);\n                }\n            });\n        },\n\n        saveAndUpdate: function () {\n            var self = this;\n            return this.helpers.debounce(function (evt) {\n                if (evt) {\n                    if (evt.type === 'keyup' && this.name === 'className') {\n                        return false;\n                    }\n                }\n\n                var $field = $(this).parents('.form-field:eq(0)');\n                self.helpers.updatePreview($field);\n                self.helpers.save();\n            });\n        },\n\n        processControl: function (control) {\n            if (control[0].classList.contains('input-set-control')) {\n                var inputSet = this.options.inputSets.filter(function (set) {\n                    return set.name === control[0].type;\n                })[0];\n                if (inputSet.showHeader) {\n                    var header = {\n                        type: 'header',\n                        subtype: 'h2',\n                        id: inputSet.name,\n                        label: inputSet.label\n                    };\n                    this.prepFieldVars(header, true);\n                }\n                inputSet.fields.forEach(function (field) {\n                    //TODO Check this\n                    this.prepFieldVars(field, true);\n                }).bind(this);\n            } else {\n                this.prepFieldVars(control, true);\n            }\n        },\n\n        prepFieldVars: function ($field) {\n            var isNew = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false,\n                self = this;\n\n            var field = {};\n            if ($field instanceof jQuery) {\n                var fieldData = $field.data('newFieldData');\n                if (fieldData) {\n                    field = fieldData.attrs;\n                    field.label = fieldData.label;\n                    field.options = fieldData.options;\n                    if (fieldData.childs) {\n                        $(fieldData.childs).each(function (i, child) {\n                            var element = $('.amelement-container[type=\"' + child.type + '\"]');\n                            if (element) {\n                                var childData = element.data('newFieldData');\n                                if (childData) {\n                                    var childField = childData.attrs;\n                                    childField.label = childData.label;\n                                    childField.options = childData.options;\n                                    childField = Object.assign(childField, child.data);\n                                    self.prepFieldVars(childField, true);\n                                }\n                            }\n                        });\n                        return;\n                    }\n                } else {\n                    var attrs = $field[0].attributes;\n                    if (!isNew) {\n                        field.values = $field.children().map(function (index, elem) {\n                            return {\n                                label: $(elem).text(),\n                                value: $(elem).attr('value'),\n                                selected: Boolean($(elem).attr('selected'))\n                            };\n                        });\n                    }\n\n                    for (var i = attrs.length - 1; i >= 0; i--) {\n                        field[attrs[i].name] = attrs[i].value;\n                    }\n                }\n            } else {\n                field = Object.assign({}, $field);\n            }\n\n            field.name = isNew ? this.nameAttr(field) : field.name || this.nameAttr(field);\n\n            switch (field.type) {\n                case 'country' :\n                    field.type = 'dropdown';\n                    break;\n            }\n\n            if (isNew && this.utils.inArray(\n                field.type,\n                ['textinput', 'number', 'file', 'dropdown', 'listbox', 'textarea']\n            )\n            ) {\n                field.className = 'form-control'; // backwards compatibility\n            } else {\n                field.className = field.class || field.className; // backwards compatibility\n            }\n\n            var match = /(?:^|\\s)btn-(.*?)(?:\\s|$)/g.exec(field.className);\n            if (match) {\n                field.style = match[1];\n            }\n\n            this.utils.escapeAttrs(field);\n\n            this.appendNewField(field);\n            if (isNew) {\n                document.dispatchEvent(this.events.fieldAdded);\n            }\n            this.stageWrap.removeClass('empty');\n        },\n\n        appendNewField: function (values) {\n            var self = this,\n                type = values.type || 'text',\n                label = values.label\n                    || this.options.messages[type]\n                    || (values.type === 'wysiwyg' ? $.mage.__('Wysiwyg') : this.options.messages.label),\n                delBtn = this.utils.markup('a', this.options.messages.remove, {\n                    id: 'del_' + this.lastID,\n                    className: 'del-button btn delete-confirm',\n                    title: this.options.messages.removeMessage\n                }),\n                toggleBtn = this.utils.markup('a', null, {\n                    id: this.lastID + '-edit',\n                    className: 'toggle-form btn icon-pencil',\n                    title: this.options.messages.hide\n                }),\n                copyBtn = this.utils.markup('a', this.options.messages.copyButton, {\n                    id: this.lastID + '-copy',\n                    className: 'copy-button btn icon-copy',\n                    title: this.options.messages.copyButtonTooltip\n                }),\n                liContents = this.utils.markup(\n                    'div',\n                    [toggleBtn, copyBtn, delBtn],\n                    { className: 'field-actions' }\n                ).outerHTML;\n\n            // Field preview Label\n            if (['hone', 'text', 'htwo', 'hthree'].indexOf(type) != -1) {\n                label = ''; //do not show label for text elements\n            }\n            liContents += '<label class=\"field-label\">' + label + '</label>';\n            var requiredDisplay = values.required ? 'style=\"display:inline\"' : '';\n            liContents += '<span class=\"required-asterisk\" ' + requiredDisplay + '> *</span>';\n            liContents += this.utils.markup('a', 'x', {className: 'close-field top-close-field'}).outerHTML;\n            if (values.description) {\n                liContents += '<span class=\"tooltip-element\" tooltip=\"' + values.description + '\">?</span>';\n            }\n\n            liContents = '<div class=\"field-label-container\">' + liContents + '</div>';\n\n            liContents += this.utils.markup('div', '', {className: 'prev-holder'}).outerHTML;\n            liContents += '<div id=\"' + this.lastID + '-holder\" class=\"frm-holder\">';\n            liContents += '<div class=\"form-elements\">';\n\n            liContents += this.advFields(values);\n            liContents += this.utils.markup('a', this.options.messages.close, {className: 'close-field'}).outerHTML;\n\n            liContents += '</div>';\n            liContents += '</div>';\n\n            var field = this.utils.markup('li', liContents, {\n                    'class': type + '-field form-field',\n                    'type': type,\n                    id: this.lastID\n                }),\n                $li = $(field);\n\n            $li.data('fieldData', {attrs: values});\n            if (typeof this.helpers.stopIndex !== 'undefined') {\n                $('> li', this.sortableFields).eq(this.helpers.stopIndex).before($li);\n            } else {\n                this.sortableFields.append($li);\n            }\n\n            $('.sortable-options', $li).sortable({\n                update: function update() {\n                    self.helpers.updatePreview($li);\n                }\n            }); // make dynamically added option fields sortable if they exist.\n\n            if (values.type == 'date') {\n                $li.attr('date-format', this.options.format);\n            }\n            this.helpers.updatePreview($li);\n\n            if (this.options.editOnAdd) {\n                this.helpers.closeAllEdit(this.sortableFields);\n                this.helpers.toggleEdit(this.lastID);\n            }\n\n            if (this.options.typeUserEvents[type] && this.options.typeUserEvents[type].onadd) {\n                this.options.typeUserEvents[type].onadd(field);\n            }\n\n            this.lastID = this.helpers.incrementId(this.lastID);\n            this.addCollapseDefaultValueVariables(field);\n            this.addValidateObserve($li);\n        },\n\n        // Add append and prepend options if necessary\n        nonEditableFields: function () {\n            var cancelArray = [];\n\n            if (this.options.prepend && !$('.disabled.prepend', this.sortableFields).length) {\n                var prependedField = this.utils.markup('li', this.options.prepend, {className: 'disabled prepend'});\n                cancelArray.push(true);\n                this.sortableFields.prepend(prependedField);\n            }\n\n            if (this.options.append && !$('.disabled.append', this.sortableFields).length) {\n                var appendedField = this.utils.markup('li', this.options.append, {className: 'disabled append'});\n                cancelArray.push(true);\n                this.sortableFields.append(appendedField);\n            }\n\n            if (cancelArray.some(function (elem) {\n                return elem === true;\n            })) {\n                this.stageWrap.removeClass('empty');\n            }\n        },\n\n        // Parse saved XML template data\n        loadFields: function () {\n            var self = this;\n            var formData = this.formData;\n            if (formData && formData.length) {\n                for (var i = 0; i < formData.length; i++) {\n                    this.prepFieldVars(formData[i]);\n                }\n                this.stageWrap.removeClass('empty');\n            } else if (this.options.defaultFields && this.options.defaultFields.length) {\n                // Load default fields if none are set\n                this.options.defaultFields.forEach(function (field) {\n                    return self.prepFieldVars(field);\n                });\n                this.stageWrap.removeClass('empty');\n            } else if (!this.options.prepend && !this.options.append) {\n                this.stageWrap.addClass('empty').attr('data-content', this.options.messages.getStarted);\n            }\n            this.helpers.save();\n\n            $('li.form-field:not(.disabled)', this.sortableFields).each(function () {\n                self.helpers.updatePreview($(this));\n            });\n\n            this.nonEditableFields();\n        },\n\n        nameAttr: function (field) {\n            var epoch = new Date().getTime();\n            return field.type + '-' + epoch;\n        },\n\n        /**\n         * Add data for field with options [select, checkbox-group, radio-group]\n         *\n         * @todo   refactor this nasty ~crap~ code, its actually painful to look at\n         * @param  {object} values\n         */\n        fieldOptions: function (values) {\n            var self = this;\n            var optionActions = [this.utils.markup('a', this.options.messages.addOption, {className: 'add add-opt'})],\n                fieldOptions = ['<label class=\"false-label\">' + this.options.messages.selectOptions + '</label>'],\n                isMultiple = values.multiple || values.type.match(/(listbox|checkbox|checkboxtwo|checkbox-group)/);\n\n            if (!values.values || !values.values.length) {\n                var counter = [1, 2, 3],\n                    optionLabel = self.options.messages.option;\n\n                if (values.type === 'rating') {\n                    counter = [1, 2, 3, 4, 5];\n                    optionLabel = self.options.messages.star;\n                }\n\n                if (values.options) {\n                    values.values = values.options;\n                } else {\n                    values.values = counter.map(function (index) {\n                        var label = optionLabel + ' ' + index,\n                            option = {\n                                selected: false,\n                                label: label,\n                                value: self.utils.hyphenCase(label)\n                            };\n                        return option;\n                    });\n                }\n\n                values.values[0].selected = true;\n            }\n\n            fieldOptions.push('<div class=\"sortable-options-wrap\">');\n\n            fieldOptions.push('<ol class=\"sortable-options\">');\n\n            var emptyFieldSelected = ' checked=\"true\"',\n                valuesOptions = [];\n            this.utils.forEach(values.values, function (i) {\n                if (values.values[i].selected) {\n                    emptyFieldSelected = '';\n                }\n                valuesOptions.push(self.selectFieldOptions(values.name, values.values[i], isMultiple));\n            });\n\n            fieldOptions = fieldOptions.concat(valuesOptions);\n\n            fieldOptions.push('</ol>');\n            fieldOptions.push(this.utils.markup('div', optionActions, {className: 'option-actions'}).outerHTML);\n            fieldOptions.push('</div>');\n\n            return this.utils.markup('div', fieldOptions.join(''), {className: 'form-group field-options'}).outerHTML;\n        },\n\n        /**\n         * Build the editable properties for the field\n         * @param  {object} values configuration object for advanced fields\n         * @return {String}        markup for advanced fields\n         */\n        advFields: function (values) {\n            var advFields = [],\n                optionFields = ['dropdown', 'listbox', 'checkbox', 'radio', 'checkboxtwo', 'radiotwo', 'rating', 'country'],\n                isOptionField = function () {\n                    return optionFields.indexOf(values.type) !== -1;\n                }(),\n                valueField = !this.utils.inArray(values.type, ['header', 'paragraph', 'file'].concat(optionFields));\n\n            advFields.push(this.textAttribute('name', values));\n            advFields.push(this.hiddenAttribute('entity_id', values));\n\n            if (values.type !== 'wysiwyg') {\n                advFields.push(this.textAttribute('label', values));\n            } else {\n                advFields.push(this.hiddenAttribute('value', values));\n            }\n\n            // Class\n            advFields.push(this.textAttribute('className', values));\n            advFields.push(this.textAttribute('style', values));\n\n            if (values.parentType !== 'other' || isOptionField) {\n\n                advFields.push(this.textAttribute('placeholder', values));\n                advFields.push(this.requiredField(values));\n                advFields.push(this.textAttribute('description', values));\n\n                if (values.type === 'checkbox' || values.type === 'checkboxtwo') {\n                    advFields.push(this.boolAttribute('toggle', values, {first: this.options.messages.toggle}));\n                }\n\n                values.size = values.size || 'm';\n                values.style = values.style || 'default';\n\n                //Help Text / Description Field\n                /* if (!this.utils.inArray(values.type, ['header', 'paragraph', 'button'])) {\n\n                 }*/\n\n                if (this.options.messages.subtypes[values.type]) {\n                    var optionData = this.options.messages.subtypes[values.type];\n                    advFields.push(this.selectAttribute('subtype', values, optionData));\n                }\n\n                if (values.type === 'number') {\n                    advFields.push(this.numberAttribute('min', values));\n                    advFields.push(this.numberAttribute('max', values));\n                    advFields.push(this.numberAttribute('step', values));\n                }\n\n                if (values.type === 'textinput') {\n                    advFields.push(this.selectAttribute('validation', values, this.options.messages.validations));\n                    advFields.push(this.textAttribute('regexp', values));\n                    advFields.push(this.textAttribute('errorMessage', values));\n                }\n\n                if (values.type === 'date') {\n                    values.validation = 'validate-date';\n                    advFields.push(this.hiddenAttribute('validation', values));\n                }\n\n                //TextArea Rows Attribute\n                if (values.type === 'textarea') {\n                    advFields.push(this.numberAttribute('rows', values));\n                }\n\n                if (valueField && values.type != 'googlemap') {\n                    advFields.push(this.textAttribute('value', values));\n                } else if (values.type == 'googlemap') {\n                    advFields.push(this.hiddenAttribute('value', values));\n                }\n\n                if (values.type === 'file') {\n                    advFields.push(this.textAttribute('allowed_extension', values));\n                    advFields.push(this.textAttribute('max_file_size', values));\n\n                    var labels = {\n                        first: this.options.messages.multipleFiles,\n                        second: this.options.messages.allowMultipleFiles\n                    };\n                    advFields.push(this.boolAttribute('multiple', values, labels));\n                }\n                /* other feature for future\n                if (values.type === 'checkbox' || values.type === 'radio') {\n                    advFields.push(this.boolAttribute('other', values, {\n                        first: this.options.messages.enableOther,\n                        second: this.options.messages.enableOtherMsg\n                    }));\n                }*/\n\n                if (isOptionField) {\n                    advFields.push(this.fieldOptions(values));\n                }\n\n                if (this.utils.inArray(values.type, ['textinput', 'textarea'])) {\n                    advFields.push(this.numberAttribute('maxlength', values));\n                }\n\n                // Append custom attributes as defined in typeUserAttrs option\n                if (this.options.typeUserAttrs[values.type]) {\n                    advFields.push(this.processTypeUserAttrs(this.options.typeUserAttrs[values.type], values));\n                }\n            }\n            var dependency = [];\n            if (values.dependency) {\n                dependency = values.dependency;\n            }\n            advFields.push(this.fieldDependencyArea(dependency, values.name));\n\n            advFields.push(this.selectAttribute('layout', values, this.options.messages.layouts));\n\n            advFields.push(this.hiddenAttribute('parentType', values));\n\n            return advFields.join('');\n        },\n\n\n        processTypeUserAttrs: function (typeUserAttr, values) {\n            var advField = [];\n\n            for (var attribute in typeUserAttr) {\n                if (typeUserAttr.hasOwnProperty(attribute)) {\n                    var orig = this.options.messages[attribute];\n                    var origValue = typeUserAttr[attribute].value;\n                    typeUserAttr[attribute].value = values[attribute] || typeUserAttr[attribute].value || '';\n\n                    if (typeUserAttr[attribute].label) {\n                        this.options.messages[attribute] = typeUserAttr[attribute].label;\n                    }\n\n                    if (typeUserAttr[attribute].options) {\n                        advField.push(selectUserAttrs(attribute, typeUserAttr[attribute]));\n                    } else {\n                        advField.push(inputUserAttrs(attribute, typeUserAttr[attribute]));\n                    }\n\n                    this.options.messages[attribute] = orig;\n                    typeUserAttr[attribute].value = origValue;\n                }\n            }\n\n            return advField.join('');\n        },\n\n        inputUserAttrs: function (name, attrs) {\n            var textAttrs = {\n                    id: name + '-' + this.lastID,\n                    title: attrs.description || attrs.label || name.toUpperCase(),\n                    name: name,\n                    type: attrs.type || 'text',\n                    className: ['fld-' + name]\n                },\n                label = '<label for=\"' + textAttrs.id + '\">' + this.options.messages[name] + '</label>';\n\n            if (!this.utils.inArray(textAttrs.type, ['checkbox', 'radio', 'checkboxtwo', 'radiotwo'])) {\n                textAttrs.className.push('form-control');\n            }\n\n            if (attrs.type === 'datetime') {\n                attrs.type = 'datetime-local';\n            }\n\n            textAttrs = Object.assign({}, attrs, textAttrs);\n            var textInput = '<input ' + this.utils.attrString(textAttrs) + '>',\n                inputWrap = '<div class=\"input-wrap\">' + textInput + '</div>';\n\n            return '<div class=\"form-group ' + name + '-wrap\">' + label + inputWrap + '</div>';\n        },\n\n        selectUserAttrs: function (name, options) {\n            var optis = Object.keys(options.options).map(function (val) {\n                    var attrs = {value: val};\n                    if (val === options.value) {\n                        attrs.selected = null;\n                    }\n                    return '<option ' + this.utils.attrString(attrs) + '>' + options.options[val] + '</option>';\n                }),\n                selectAttrs = {\n                    id: name + '-' + this.lastID,\n                    title: options.description || options.label || name.toUpperCase(),\n                    name: name,\n                    className: 'fld-' + name + ' form-control'\n                },\n                label = '<label for=\"' + selectAttrs.id + '\">' + this.options.messages[name] + '</label>';\n\n            Object.keys(options).filter(function (prop) {\n                return !utils.inArray(prop, ['value', 'options', 'label']);\n            }).forEach(function (attr) {\n                selectAttrs[attr] = options[attr];\n            });\n\n            var select = '<select ' + this.utils.attrString(selectAttrs) + '>' + optis.join('') + '</select>',\n                inputWrap = '<div class=\"input-wrap\">' + select + '</div>';\n            return '<div class=\"form-group ' + name + '-wrap\">' + label + inputWrap + '</div>';\n        },\n\n        boolAttribute: function (name, values, labels) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][name]) {\n                return;\n            }\n\n            var checked = values[name] !== undefined ? 'checked' : '',\n                input = '<input type=\"checkbox\" class=\"fld-' + name + '\" name=\"' + name + '\" value=\"true\" ' + checked + ' id=\"' + name + '-' + this.lastID + '\"/> ',\n                left = [],\n                right = [input];\n\n            if (labels.first) {\n                left.unshift(this.label(labels.first));\n            }\n\n            if (labels.second) {\n                right.push(this.label(labels.second));\n            }\n\n            if (labels.content) {\n                right.push(labels.content);\n            }\n\n            right.unshift('<div class=\"input-wrap\">');\n            right.push('</div>');\n\n            return '<div class=\"form-group ' + name + '-wrap\">' + left.concat(right).join('') + '</div>';\n        },\n\n        label: function (txt) {\n            return '<label for=\"' + name + '-' + this.lastID + '\">' + txt + '</label>';\n        },\n\n        btnStyles: function (style, type) {\n            var tags = {\n                    button: 'btn'\n                },\n                styles = this.options.messages.styles[tags[type]],\n                styleField = '';\n\n            if (styles) {\n                var styleLabel = '<label>' + this.options.messages.style + '</label>';\n                styleField += '<input value=\"' + style + '\" name=\"style\" type=\"hidden\" class=\"btn-style\">';\n                styleField += '<div class=\"btn-group\" role=\"group\">';\n\n                Object.keys(this.options.messages.styles[tags[type]]).forEach(function (element) {\n                    var active = style === element ? 'active' : '';\n                    styleField += '<button value=\"' + element + '\" type=\"' + type + '\" class=\"' + active + ' btn-xs ' + tags[type] + ' ' + tags[type] + '-' + element + '\">' + this.options.messages.styles[tags[type]][element] + '</button>';\n                });\n\n                styleField += '</div>';\n\n                styleField = '<div class=\"form-group style-wrap\">' + styleLabel + ' ' + styleField + '</div>';\n            }\n\n            return styleField;\n        },\n\n        /**\n         * Add a number attribute to a field.\n         * @param  {String} attribute\n         * @param  {Object} values\n         * @return {String}\n         */\n        numberAttribute: function (attribute, values) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][attribute]) {\n                return '';\n            }\n\n            var attrVal = values[attribute],\n                attrLabel = this.options.messages[attribute] || attribute,\n                placeholder = this.options.messages.placeholders[attribute],\n                inputConfig = {\n                    type: 'number',\n                    value: attrVal,\n                    name: attribute,\n                    min: '0',\n                    placeholder: placeholder,\n                    className: 'fld-' + attribute + ' form-control',\n                    id: attribute + '-' + this.lastID\n                },\n                numberAttribute = '<input ' + this.utils.attrString(this.utils.trimObj(inputConfig)) + '>',\n                inputWrap = '<div class=\"input-wrap\">' + numberAttribute + '</div>';\n\n            return '<div class=\"form-group ' + attribute + '-wrap\"><label for=\"' + inputConfig.id + '\">'\n                + attrLabel + '</label> ' + inputWrap + '</div>';\n\n        },\n\n        selectAttribute: function (attribute, values, optionData) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][attribute]) {\n                return;\n            }\n            var self = this,\n                allowedTypes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            var selectOptions = optionData.map(function (option, i) {\n                    if (allowedTypes && allowedTypes.indexOf(option.type) === -1) {\n                        return false;\n                    }\n                    var optionAttrs = Object.assign({\n                        label: self.options.messages.option + ' ' + i,\n                        value: undefined\n                    }, option);\n\n                    if (values[attribute] != undefined) {\n                        try {\n                            var validationJson = JSON.parse(values[attribute].replace(/&quot;/g, '\"'));\n                        } catch (ex) {\n                            validationJson = {validation: values[attribute]};\n                        }\n\n                        if (validationJson.hasOwnProperty(\"validation\") && (option.value === validationJson.validation)) {\n                            optionAttrs.selected = true;\n                        }\n                    }\n\n                    return '<option ' + self.utils.attrString(self.utils.trimObj(optionAttrs)) + '>'\n                        + optionAttrs.label + '</option>';\n                }),\n                selectAttrs = {\n                    id: attribute + '-' + this.lastID,\n                    name: attribute,\n                    value: attribute,\n                    className: 'fld-' + attribute + ' form-control'\n                },\n\n                label = '<label for=\"' + selectAttrs.id + '\">' + (this.options.messages[attribute]\n                    || this.utils.capitalize(attribute)) + '</label>';\n\n\n            var select = '<select ' + this.utils.attrString(selectAttrs) + '>' + selectOptions.join('') + '</select>',\n                inputWrap = '<div class=\"input-wrap\">' + select + '</div>';\n\n            return '<div class=\"form-group ' + selectAttrs.name + '-wrap\">' + label + inputWrap + '</div>';\n        },\n\n        /**\n         * Generate some text inputs for field attributes, **will be replaced**\n         * @param  {String} attribute\n         * @param  {Object} values\n         * @return {String}\n         */\n        textAttribute: function (attribute, values) {\n            if (this.options.typeUserAttrs[values.type] && this.options.typeUserAttrs[values.type][attribute]) {\n                return '';\n            }\n\n            var textArea = ['paragraph'];\n\n            var attrVal = values[attribute] || '',\n                attrLabel = this.options.messages[attribute];\n            if (attribute === 'label' && this.utils.inArray(values.type, textArea)) {\n                attrLabel = this.options.messages.content;\n            }\n\n            var placeholderFields = ['textinput', 'textarea', 'dropdown'];\n            var placeholders = this.options.messages.placeholders,\n                placeholder = placeholders[attribute] || '',\n                attributefield = '',\n                noMakeAttr = [];\n            // Field has placeholder attribute\n            if (attribute === 'placeholder' && !this.utils.inArray(values.type, placeholderFields)) {\n                noMakeAttr.push(true);\n            }\n\n            if (!noMakeAttr.some(function (elem) {\n                return elem === true;\n            })) {\n                var inputConfig = {\n                    name: attribute,\n                    placeholder: placeholder,\n                    className: 'fld-' + attribute + ' form-control',\n                    id: attribute + '-' + this.lastID\n                };\n                var attributeLabel = '<label for=\"' + inputConfig.id + '\">' + attrLabel + '</label>';\n\n                if (attribute === 'label' && this.utils.inArray(values.type, textArea)\n                    || attribute === 'value' && values.type === 'textarea') {\n                    attributefield += '<textarea ' + this.utils.attrString(inputConfig) + '>' + attrVal + '</textarea>';\n                } else if (attribute === 'value' && values.type === 'date') {\n                    inputConfig.value = attrVal;\n                    inputConfig.type = 'date';\n                    attributefield += '<input ' + this.utils.attrString(inputConfig) + '>';\n                } else {\n                    inputConfig.value = attrVal;\n                    inputConfig.type = 'text';\n                    attributefield += '<input ' + this.utils.attrString(inputConfig) + '>';\n                }\n                var note = this.getNote(attribute, values),\n                    inputWrap = '<div class=\"input-wrap\">' + attributefield + note +'</div>';\n\n                attributefield = '<div class=\"form-group ' + attribute + '-wrap\">' + attributeLabel + ' ' + inputWrap + '</div>';\n            }\n\n            return attributefield;\n        },\n\n        getNote: function (attribute, values) {\n            var allowTypes = ['textinput', 'textarea', 'number'],\n                note = '';\n\n            if (attribute === 'value' && allowTypes.includes(values.type)) {\n                $.each(this.options.messages['notes'][attribute], function (index, noteData) {\n                    var variables = '',\n                        noteVariant ='';\n\n                    if (typeof values.entityType === 'undefined' || values.entityType === noteData.allowedEntityType) {\n                        noteVariant = '<a class=\"default-values-link\" href=\"#\">'\n                            + noteData['label']\n                            + '</a>';\n\n                        noteData.values.forEach(function (value) {\n                            variables += '<div class=\"variable\">' + value + '</div>'\n                        });\n                        noteVariant += '<div class=\"default-value-variants\">' + variables + '</div>';\n                        note += '<div class=\"value-note-wrap\">' + noteVariant + '</div>';\n                    }\n                });\n            }\n\n            return note;\n        },\n\n        hiddenAttribute: function (attribute, values) {\n            var attrValue = values[attribute] || '',\n                attributeField = '<input class=\"fld-' + attribute + ' form-control\" type=\"hidden\" name=\"'\n                    + attribute + '\" value=\"' + attrValue + '\">';\n\n            return attributeField;\n        },\n\n        requiredField: function (values) {\n            var noRequire = ['header', 'paragraph', 'button'],\n                noMake = [],\n                requireField = '';\n\n            if (this.utils.inArray(values.type, noRequire)) {\n                noMake.push(true);\n            }\n            if (!noMake.some(function (elem) {\n                return elem === true;\n            })) {\n                requireField = this.boolAttribute('required', values, {first: this.options.messages.required});\n            }\n\n            return requireField;\n        },\n\n        // Select field html, since there may be multiple\n        selectFieldOptions: function (name, optionData, multipleSelect) {\n            var optionInputType = {\n                    selected: multipleSelect ? 'checkbox' : 'radio'\n                },\n                optionDataOrder = ['value', 'label', 'selected'],\n                optionInputs = [];\n\n            optionData = Object.assign({selected: false, label: '', value: ''}, optionData);\n\n            for (var i = optionDataOrder.length - 1; i >= 0; i--) {\n                var prop = optionDataOrder[i];\n                if (optionData.hasOwnProperty(prop)) {\n                    var attrs = {\n                        type: optionInputType[prop] || 'text',\n                        'class': 'option-' + prop,\n                        value: optionData[prop],\n                        name: name + '-option'\n                    };\n\n                    if (this.options.messages.placeholders[prop]) {\n                        attrs.placeholder = this.options.messages.placeholders[prop];\n                    }\n\n                    if (prop === 'selected'\n                        && (optionData.selected === \"1\" || optionData.selected === true)\n                    ) {\n                        attrs.checked = optionData.selected;\n                    }\n\n                    optionInputs.push(this.utils.markup('input', null, attrs));\n                }\n            }\n\n            var removeAttrs = {\n                className: 'remove btn',\n                title: this.options.messages.removeMessage\n            };\n\n            optionInputs.push(this.utils.markup('a', this.options.messages.remove, removeAttrs));\n            var field = this.utils.markup('li', optionInputs);\n\n            return field.outerHTML;\n        },\n\n\n        cloneItem: function (currentItem) {\n            var self = this;\n            var currentId = currentItem.attr('id'),\n                type = currentItem.attr('type'),\n                ts = new Date().getTime(),\n                cloneName = type + '-' + ts;\n\n            var $clone = currentItem.clone();\n\n            $clone.find('[id]').each(function () {\n                this.id = this.id.replace(currentId, self.lastID);\n            });\n\n            $clone.find('[for]').each(function () {\n                this.setAttribute('for', this.getAttribute('for').replace(currentId, self.lastID));\n            });\n\n            $clone.each(function () {\n                $('e:not(.form-elements)').each(function () {\n                    var newName = this.getAttribute('name');\n                    newName = newName.substring(0, newName.lastIndexOf('-') + 1);\n                    newName = newName + ts.toString();\n                    this.setAttribute('name', newName);\n                });\n            });\n\n            $clone.find('.form-elements').find(':input').each(function () {\n                if (this.getAttribute('name') === 'name') {\n                    var newVal = this.getAttribute('value');\n                    newVal = newVal.substring(0, newVal.lastIndexOf('-') + 1);\n                    newVal = newVal + ts.toString();\n                    this.setAttribute('value', newVal);\n                }\n            });\n\n            $clone.attr('id', this.lastID);\n            $clone.attr('name', cloneName);\n            $clone.addClass('cloned');\n            $('.sortable-options', $clone).sortable();\n\n            if (this.options.typeUserEvents[type] && this.options.typeUserEvents[type].onclone) {\n                this.options.typeUserEvents[type].onclone($clone[0]);\n            }\n\n            this.lastID = this.helpers.incrementId(this.lastID);\n            return $clone;\n        },\n\n        observeFields: function ($cbUL, formbId) {\n            var self = this;\n            // Save field on change\n            this.sortableFields.on(\n                'change blur keyup click', '.form-elements input, .form-elements select, .form-elements textarea, .toggle-form',\n                self.saveAndUpdate()\n            );\n\n            $('li', $cbUL).click(function (e) {\n                self.helpers.stopIndex = undefined;\n                self.processControl($(this));\n                self.helpers.save();\n                e.preventDefault();\n            });\n\n            // callback to track disabled tooltips\n            this.sortableFields.on('mousemove', 'li.disabled', function (e) {\n                $('.frmb-tt', this).css({\n                    left: e.offsetX - 16,\n                    top: e.offsetY - 34\n                });\n            });\n\n            // callback to call disabled tooltips\n            this.sortableFields.on('mouseenter', 'li.disabled', function () {\n                self.helpers.disabledTT.add($(this));\n            });\n\n            // callback to call disabled tooltips\n            this.sortableFields.on('mouseleave', 'li.disabled', function () {\n                self.helpers.disabledTT.remove($(this));\n            });\n\n            // ---------------------- UTILITIES ---------------------- //\n            // delete options\n            this.sortableFields.on('click touchstart', '.remove', function (e) {\n                var $field = $(this).parents('.form-field:eq(0)');\n                e.preventDefault();\n                var optionsCount = $(this).parents('.sortable-options:eq(0)').children('li').length;\n                if (optionsCount <= 0) {\n                    self.options.notify.error('Error: ' + self.options.messages.minOptionMessage);\n                } else {\n                    $(this).parent('li').slideUp('250', function () {\n                        $(this).remove();\n                        self.helpers.updatePreview($field);\n                        self.helpers.save();\n                    });\n                }\n            });\n\n            // touch focus\n            this.sortableFields.on('touchstart', 'input', function (e) {\n                if (e.handled !== true) {\n                    if ($(this).attr('type') === 'checkbox') {\n                        $(this).trigger('click');\n                    } else {\n                        $(this).focus();\n                        var fieldVal = $(this).val();\n                        $(this).val(fieldVal);\n                    }\n                } else {\n                    return false;\n                }\n            });\n\n            // toggle fields\n            this.sortableFields.on('click touchstart', '.toggle-form, .close-field', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                if (e.handled !== true) {\n                    var targetID = $(this).parents('.form-field:eq(0)').attr('id');\n                    self.helpers.toggleEdit(targetID);\n                    e.handled = true;\n                } else {\n                    return false;\n                }\n            });\n\n            this.sortableFields.on('change', '.prev-holder input, .prev-holder select', function (e) {\n                if (e.target.classList.contains('other-option') || $(e.target).attr('type') == 'googlemap') {\n                    return;\n                }\n                var field = $(e.target).closest('li.form-field')[0];\n                if (self.utils.inArray(field.type, ['checkbox', 'checkboxtwo'])) {\n                    field.querySelector('[class=\"option-value\"][value=\"' + e.target.value + '\"]')\n                        .parentElement.childNodes[0].checked = field\n                        .querySelector('.prev-holder input[value=\"' + e.target.value + '\"]').checked;\n                } else if (self.utils.inArray(field.type, ['listbox'])) {\n                    $(field).find('[class=\"option-selected\"]').attr('checked', false);\n                    $.each($(field).find('.prev-holder select').val(), function (key, value) {\n                        field.querySelector('[class=\"option-value\"][value=\"' + value + '\"]')\n                            .parentElement.childNodes[0].checked = true;\n                    });\n                } else if (self.utils.inArray(field.type, ['dropdown', 'rating', 'radio', 'radiotwo'])) {\n                    field.querySelector('[class=\"option-value\"][value=\"' + e.target.value + '\"]')\n                        .parentElement.childNodes[0].checked = true;\n                } else {\n                    document.getElementById('value-' + field.id).value = e.target.value;\n                }\n\n                self.helpers.save();\n            });\n\n            // update preview to wysiwyg\n            this.sortableFields.on('change', '.prev-holder [type=wysiwyg]', _.debounce(function () {\n                self.helpers.save();\n            }, 1000));\n\n            // update preview to label\n            this.sortableFields.on('keyup change', '[name=\"label\"]', function () {\n                $('.field-label', $(this).closest('li:not(.hone-field):not(.text-field):not(.hthree-field):not(.htwo-field)')).text($(this).val());\n            });\n\n            // remove error styling when users tries to correct mistake\n            this.sortableFields.delegate('input.error', 'keyup', function () {\n                $(this).removeClass('error');\n            });\n\n            // update preview for description\n            this.sortableFields.on('keyup', 'input[name=\"description\"]', function () {\n                var $field = $(this).parents('.form-field:eq(0)');\n                var closestToolTip = $('.tooltip-element', $field);\n                var ttVal = $(this).val();\n                if (ttVal !== '') {\n                    if (!closestToolTip.length) {\n                        var tt = '<span class=\"tooltip-element\" tooltip=\"' + ttVal + '\">?</span>';\n                        $('.field-label', $field).after(tt);\n                    } else {\n                        closestToolTip.attr('tooltip', ttVal).css('display', 'inline-block');\n                    }\n                } else {\n                    if (closestToolTip.length) {\n                        closestToolTip.css('display', 'none');\n                    }\n                }\n            });\n\n            this.sortableFields.on('change', '.fld-multiple', function (e) {\n                var newType = e.target.checked ? 'checkbox' : 'radio';\n\n                $(e.target).parents('.form-elements:eq(0)')\n                    .find('.sortable-options input.option-selected').each(function () {\n                    this.type = newType;\n                });\n            });\n\n            // format name attribute\n            this.sortableFields.on('blur', 'input.fld-name', function () {\n                this.value = self.helpers.safename(this.value);\n                if (this.value === '') {\n                    $(this).addClass('field-error').attr('placeholder', self.options.messages.cannotBeEmpty);\n                } else {\n                    $(this).removeClass('field-error');\n                }\n            });\n\n            this.sortableFields.on('blur', 'input.fld-maxlength', function () {\n                this.value = self.helpers.forcenumber(this.value);\n            });\n\n            // Copy field\n            this.sortableFields.on('click touchstart', '.icon-copy', function (e) {\n                e.preventDefault();\n                var currentItem = $(this).parents('li');\n                var $clone = self.cloneItem(currentItem);\n                $clone.insertAfter(currentItem);\n                self.helpers.updatePreview($clone, currentItem);\n                self.helpers.save();\n            });\n\n            // Delete field\n            this.sortableFields.on('click touchstart', self.selectors.deleteButton, function (event) {\n                var buttonPosition = this.getBoundingClientRect(),\n                    bodyRect = document.body.getBoundingClientRect(),\n                    coords = {\n                        pageX: buttonPosition.left + buttonPosition.width / 2,\n                        pageY: buttonPosition.top - bodyRect.top - 12\n                    },\n                    deleteID = $(this).parents(self.selectors.fieldFirst).attr('id'),\n                    $field = $(document.getElementById(deleteID)),\n                    warnH3,\n                    warnMessage;\n\n                event.preventDefault();\n\n                self.removeWysiwygData(event.target);\n\n                document.addEventListener('modalClosed', function () {\n                    $field.removeClass(self.classes.delete);\n                }, false);\n\n                // Check if user is sure they want to remove the field\n                if (self.options.fieldRemoveWarn) {\n                    warnH3 = self.utils.markup('h3', self.options.messages.warning);\n                    warnMessage = self.utils.markup('p', self.options.messages.fieldRemoveWarning);\n\n                    self.helpers.confirm([warnH3, warnMessage], function () {\n                        return self.helpers.removeField(deleteID);\n                    }, coords);\n\n                    $field.addClass(self.classes.delete);\n                } else {\n                    self.helpers.removeField(deleteID);\n                }\n            });\n\n            // Update button style selection\n            this.sortableFields.on('click', '.style-wrap button', function () {\n                var styleVal = $(this).val(),\n                    $parent = $(this).parent(),\n                    $btnStyle = $parent.prev('.btn-style');\n                $btnStyle.val(styleVal);\n                $(this).siblings('.btn').removeClass('active');\n                $(this).addClass('active');\n                self.saveAndUpdate().call($parent);\n            });\n\n            // Attach a callback to toggle required asterisk\n            this.sortableFields.on('click', 'input.fld-required', function () {\n                var requiredAsterisk = $(this).parents('li.form-field').find('.required-asterisk');\n                requiredAsterisk.toggle();\n            });\n\n            // Attach a callback to add new options\n            this.sortableFields.on('click', '.add-opt', function (e) {\n                e.preventDefault();\n                var $optionWrap = $(this).parents('.field-options:eq(0)'),\n                    $multiple = $('[name=\"multiple\"]', $optionWrap),\n                    $firstOption = $('.option-selected:eq(0)', $optionWrap),\n                    isMultiple = $multiple.length ? $multiple.prop('checked') : $firstOption.attr('type') === 'checkbox',\n                    name = $firstOption.attr('name') || $optionWrap.attr('name'),\n                    sortOptions = $('.sortable-options', $optionWrap);\n\n                if (sortOptions.attr('dependent')) {\n                    sortOptions.append(self.createDependencyRow(false, false, false, name, false));\n                } else {\n                    sortOptions.append(self.selectFieldOptions(name, false, isMultiple));\n                }\n            });\n\n            this.sortableFields.on('mouseover mouseout', '.remove, .del-button', function () {\n                $(this).parents('li:eq(0)').toggleClass('delete');\n            });\n\n            this.sortableFields.on('change', '[name=\"dependency-field\"]', function (e) {\n                var fieldName = this.value,\n                    field = self.findField(fieldName),\n                    values = [],\n                    selects = $(this).parent('li').find('select');\n\n                if (field && field.values) {\n                    values = field.values;\n                    values = self.createDependencyRow(fieldName, '', values, false, true);\n                    $(this).find('[selected=\"selected\"]').removeAttr('selected');\n                    $(this).find('[value=\"' + $(this).val() + '\"]').attr('selected', true);\n                    if (selects.length > 1) {\n                        selects.last().replaceWith(values);\n                    } else {\n                        selects.last().after(values);\n                    }\n                } else {\n                    $(this).parent('li').find('select').last().remove();\n                }\n            });\n\n            if (self.options.showActionButtons) {\n                // View XML\n                var xmlButton = $(document.getElementById(formbId + '-view-data'));\n                xmlButton.click(function (e) {\n                    e.preventDefault();\n                    self.helpers.showData();\n                });\n\n                // Clear all fields in form editor\n                var clearButton = $(document.getElementById(formbId + '-clear-all'));\n                clearButton.click(function () {\n                    var fields = $('li.form-field');\n                    var buttonPosition = this.getBoundingClientRect(),\n                        bodyRect = document.body.getBoundingClientRect(),\n                        coords = {\n                            pageX: buttonPosition.left + buttonPosition.width / 2,\n                            pageY: buttonPosition.top - bodyRect.top - 12\n                        };\n\n                    if (fields.length) {\n                        self.helpers.confirm(self.options.messages.clearAllMessage, function () {\n                            self.helpers.removeAllfields();\n                            self.options.notify.success(self.options.messages.allFieldsRemoved);\n                            self.helpers.save();\n                        }, coords);\n                    } else {\n                        self.helpers.dialog('There are no fields to clear', {pageX: coords.pageX, pageY: coords.pageY});\n                    }\n                });\n            }\n        },\n\n        /**\n         * Remove cached wysiwyg content by wysiwyg name\n         *\n         * @param  {Object} target - DOM element, target of an event\n         * @returns {void}\n         */\n        removeWysiwygData: function (target) {\n            var selector = this.selectors.wysiwygContainer.replace('{id}', target.id.replace('del_', '')),\n                name = $(target).closest(selector).find(this.selectors.wysiwygField).attr('name');\n\n            if (name) {\n                this.helpers.removeWysiwygHtml(name);\n            }\n        },\n\n        fieldDependencyArea: function (values, name) {\n            var self = this,\n                optionActions = [this.utils.markup('a', this.options.messages.addOption, {className: 'add add-opt'})],\n                fieldOptions = ['<label class=\"false-label\">' + this.options.messages.dependencyTitle + '</label>'];\n\n            fieldOptions.push('<div class=\"sortable-options-wrap\">');\n\n            fieldOptions.push('<ol class=\"sortable-options\" dependent=\"true\">');\n\n            this.utils.forEach(values, function (i, dependency) {\n                fieldOptions.push(self.createDependencyRow(dependency.field, dependency.value, false, false, false));\n            });\n\n            fieldOptions.push('</ol>');\n            fieldOptions.push(this.utils.markup('div', optionActions, {className: 'option-actions'}).outerHTML);\n            fieldOptions.push('</div>');\n\n            return this.utils.markup('div', fieldOptions.join(''), {\n                className: 'form-group field-options',\n                name: name\n            }).outerHTML;\n        },\n\n        createDependencyRow: function (selectedField, selectedValue, value, currentField, onlyValueSelect) {\n            var optionInputs = [],\n                formData = this.getParsedFormData(),\n                self = this,\n                allowedDependencyTypes = ['no-select', 'dropdown', 'checkbox', 'radio', 'checkboxtwo', 'radiotwo', 'listbox'],\n                updateValues = function (index) {\n                    var label = index.label\n                        ? self.utils.cutJs(index.label)\n                        : '';\n                    var option = {\n                        selected: false,\n                        label: label,\n                        value: index.name || index.value,\n                        type: index.type\n                    };\n\n                    if (currentField && option.value == currentField) {\n                        return false;\n                    }\n\n                    if (selectedField && option.value == selectedField) {\n                        option.selected = 'selected';\n                    }\n\n                    return option;\n                };\n\n            optionInputs.push(\n                $(this.selectAttribute(\n                    'dependency-field',\n                    '',\n                    [{\n                        name: 'empty',\n                        label: 'Choose an Option...',\n                        type: 'no-select'\n                    }].concat(formData.map(updateValues)),\n                    allowedDependencyTypes\n                )).find('select')[0]\n            );\n\n            if (selectedField) {\n                selectedField = self.findField(selectedField);\n                if (selectedField && selectedField.values) {\n                    value = selectedField.values;\n                    selectedField = selectedValue;\n                    value = value.map(updateValues);\n                }\n            }\n\n            if (typeof value != 'undefined' && value) {\n                optionInputs.push($(this.selectAttribute('dependency-value', '', value)).find('select')[0]);\n            }\n\n            var removeAttrs = {\n                className: 'remove btn',\n                title: this.options.messages.removeMessage\n            };\n\n            optionInputs.push(this.utils.markup('a', this.options.messages.remove, removeAttrs));\n            var field = this.utils.markup('li', optionInputs, {className: 'dependent-field'});\n            if (onlyValueSelect) {\n                field = $(field).find('select').last()[0];\n            }\n\n            return field.outerHTML;\n        },\n\n        getParsedFormData: function () {\n            var formData = null;\n\n            try {\n                formData = JSON.parse(this.formData);\n            } catch (e) {\n                formData = this.formData;\n            }\n\n            return formData;\n        },\n\n        findField: function (name) {\n            var field = null;\n\n            this.getParsedFormData().forEach(function (element) {\n                if (element.name == name) {\n                    field = element;\n                }\n            });\n\n            return field;\n        }\n    });\n    return $.mage.customFormBuilder;\n});\n","Amasty_Customform/js/am-google-map.js":"define([\n    'jquery',\n    'Magento_Ui/js/modal/modal'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.amGoogleMap', {\n        options: {\n            defaultPosition: {\n                lat: 0,\n                lng: 0\n            },\n            position: null,\n            enabledMarker: true,\n            showFormattedAddress: false,\n            styles: null\n        },\n        zoom: 1,\n        map: null,\n\n        _create: function () {\n            this.mapInput = this.element.find('input').hide();\n            if (typeof google != 'undefined' && google.maps) {\n                if (!this.options.position) {\n                    this.options.position = this.options.defaultPosition;\n                }\n                if (this.options.zoom) {\n                    this.zoom = parseInt(this.options.zoom);\n                }\n\n                if (this.element.find('.map').length == 0) {\n                    this.element.prepend($('<div>',\n                        {\n                            'class': 'map'\n                        }\n                    ));\n                }\n                var map = new google.maps.Map(\n                    this.element.find('.map')[0], {zoom: this.zoom, center: this.options.position}\n                );\n                this.map = map;\n                if (this.options.styles) {\n                    var previousStyles = $(this.map.getDiv()).attr('style');\n                    if (!previousStyles) {\n                        previousStyles = '';\n                    }\n                    $(this.map.getDiv()).attr(\n                        'style',\n                        previousStyles + ' ' + this.options.styles\n                    );\n                }\n                this.mapInput.val(this.options.position);\n\n                this.currentMarker = new google.maps.Marker({position: this.options.position, map: map});\n\n                if (this.options.enabledMarker) {\n                    google.maps.event.addListener(map, 'click', function (event) {\n                        this.moveMarker(event.latLng);\n                    }.bind(this));\n                }\n\n                this.map.addListener('zoom_changed', function () {\n                    this.element.find('input.amform-googlemap').trigger('change');\n                }.bind(this));\n\n                if (this.options.showFormattedAddress) {\n                    this.showAddress();\n                }\n\n                var searchbox = this.searchBox();\n\n                google.maps.event.addListenerOnce(this.map, 'tilesloaded', function () {\n                    searchbox.show();\n                });\n            }\n        },\n\n        getPosition: function () {\n            return this.currentMarker.getPosition();\n        },\n\n        searchBox: function () {\n            this.element.prepend($('<input>',\n                {\n                    'class': 'searchbox'\n                }\n            ).hide());\n\n            var self = this,\n                input = this.element.find('.searchbox'),\n                searchBox = new google.maps.places.SearchBox(input[0]);\n            this.map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(input[0]);\n\n            // disable submit from on search\n            input.onkeypress = function (e) {\n                var key = e.charCode || e.keyCode || 0;\n                if (key == 13) {\n                    e.preventDefault();\n                }\n            };\n            searchBox.addListener('places_changed', function (event) {\n                var places = searchBox.getPlaces();\n\n                if (places.length == 0) {\n                    return;\n                }\n\n                var bounds = new google.maps.LatLngBounds();\n                places.forEach(function (place) {\n                    if (!place.geometry) {\n                        return;\n                    }\n\n                    if (self.options.enabledMarker) {\n                        self.moveMarker(place.geometry.location);\n                    }\n\n                    if (place.geometry.viewport) {\n                        bounds.union(place.geometry.viewport);\n                    } else {\n                        bounds.extend(place.geometry.location);\n                    }\n                });\n                self.map.fitBounds(bounds);\n            });\n\n            return input;\n        },\n\n        moveMarker: function (location) {\n            if (this.currentMarker) {\n                this.currentMarker.setMap(null);\n            }\n            this.currentMarker = new google.maps.Marker({\n                position: location,\n                map: this.map\n            });\n            this.mapInput.val(location);\n            this.element.find('input.amform-googlemap').trigger('change');\n        },\n\n        showAddress: function () {\n            if (this.element.find('.am-address').length == 0) {\n                this.element.prepend($('<div>',\n                    {\n                        'class': 'am-address'\n                    }\n                ));\n            }\n            var geocoder = new google.maps.Geocoder(),\n                addressField = this.element.find('.am-address'),\n                position = this.getPosition();\n\n            geocoder.geocode({\n                'latLng': position\n            }, function (results, status) {\n                if (status == google.maps.GeocoderStatus.OK) {\n                    if (results[0]) {\n                        addressField.html(results[0].formatted_address);\n                    }\n                } else {\n                    addressField.html(position.toString());\n                }\n            });\n        },\n\n        getZoom: function () {\n            return this.map.getZoom();\n        }\n    });\n\n    return $.mage.amGoogleMap;\n});\n","Amasty_Customform/js/form-render.js":"// Element.remove() polyfill\n/* eslint-disable one-var, vars-on-top, max-depth, no-shadow */\n\ndefine([\n    'jquery',\n    'mage/url',\n    'mage/translate',\n    'mage/calendar',\n    'Magento_Ui/js/modal/modal'\n], function ($, urlBuilder) {\n    'use strict';\n\n    if (!('remove' in Element.prototype)) {\n        Element.prototype.remove = function () {\n            if (this.parentNode) {\n                this.parentNode.removeChild(this);\n            }\n        };\n    }\n\n    // Event polyfill\n    if (typeof Event !== 'function') {\n        (function () {\n            window.Event = function (evt) {\n                var event = document.createEvent('Event');\n\n                event.initEvent(evt, true, true);\n\n                return event;\n            };\n        })();\n    }\n\n    // Object.assign polyfill\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target) {\n            if (target == null) {\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            target = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var source = arguments[index];\n\n                if (source !== null) {\n                    for (var key in source) {\n                        if (Object.prototype.hasOwnProperty.call(source, key)) {\n                            target[key] = source[key];\n                        }\n                    }\n                }\n            }\n\n            return target;\n        };\n    }\n\n    'use strict';\n\n\n    (function ($) {\n        var Toggle = function Toggle(element, options) {\n            var defaults = {\n                theme: 'fresh',\n                messages: {\n                    off: 'Off',\n                    on: 'On'\n                }\n            },\n            opts = $.extend(defaults, options),\n                $kcToggle = $('<div class=\"kc-toggle\"></div>').insertAfter(element).append(element);\n\n            $kcToggle.toggleClass('on', element.is(':checked'));\n\n            var kctOn = '<div class=\"kct-on\">' + opts.messages.on + '</div>',\n                kctOff = '<div class=\"kct-off\">' + opts.messages.off + '</div>',\n                kctHandle = '<div class=\"kct-handle\"></div>',\n                kctInner = '<div class=\"kct-inner\">' + kctOn + kctHandle + kctOff + '</div>';\n\n            $kcToggle.append(kctInner);\n\n            $kcToggle.click(function () {\n                element.attr('checked', !element.attr('checked'));\n                $(this).toggleClass('on');\n            });\n        };\n\n        $.fn.kcToggle = function (options) {\n            var toggle = this;\n\n            return toggle.each(function () {\n                var element = $(this),\n                    kcToggle;\n\n                if (element.data('kcToggle')) {\n                    return;\n                }\n\n                kcToggle = new Toggle(element, options);\n                element.data('kcToggle', kcToggle);\n            });\n        };\n    })($);\n\n    'use strict';\n\n    // eslint-disable-next-line newline-after-var\n    var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === 'function'\n            && obj.constructor === Symbol\n            && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n    },\n\n    fbUtils = {};\n    fbUtils.amProgressId = 'form_submit_loading';\n    fbUtils.amImageContainerId = 'loading_image_container';\n    fbUtils.formOptions = [];\n\n    // cleaner syntax for testing indexOf element\n    fbUtils.inArray = function (needle, haystack) {\n        return haystack.indexOf(needle) !== -1;\n    };\n\n    /**\n     * Remove null or undefined values\n     * @param  {Object} attrs {attrName: attrValue}\n     * @return {Object}       Object trimmed of null or undefined values\n     */\n    fbUtils.trimObj = function (attrs) {\n        var xmlRemove = [null, undefined, '', false, 'false'];\n\n        for (var attr in attrs) {\n            if (fbUtils.inArray(attrs[attr], xmlRemove)) {\n                delete attrs[attr];\n            } else if (Array.isArray(attrs[attr])) {\n                if (!attrs[attr].length) {\n                    delete attrs[attr];\n                }\n            }\n        }\n\n        return attrs;\n    };\n\n    /**\n     * Test if attribute is a valid HTML attribute\n     * @param  {String} attr\n     * @return {Boolean}\n     */\n    fbUtils.validAttr = function (attr) {\n        var invalid = [\n            'values', 'enableOther', 'other', 'label',\n            'validation_fields', 'subtype', 'dependency',\n            'map_position'\n        ];\n\n        return !fbUtils.inArray(attr, invalid);\n    };\n\n    /**\n     * Convert an attrs object into a string\n     *\n     * @param  {Object} attrs object of attributes for markup\n     * @return {string}\n     */\n    fbUtils.attrString = function (attrs) {\n        var attributes = [];\n\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr) && fbUtils.validAttr(attr)) {\n                if (attr === 'placeholder') {\n                    attributes.push(attr + '=\"' + attrs[attr] + '\"');\n                } else {\n                    attr = fbUtils.safeAttr(attr, attrs[attr]);\n                    attributes.push(attr.name + attr.value);\n                }\n            }\n        }\n\n        return attributes.join(' ');\n    };\n\n    /**\n     * Convert attributes to markup safe strings\n     * @param  {String} name  attribute name\n     * @param  {String} value attribute value\n     * @return {Object}       {attrName: attrValue}\n     */\n    fbUtils.safeAttr = function (name, value) {\n        var valString = void 0;\n\n        name = fbUtils.safeAttrName(name);\n\n        if (value) {\n            if (Array.isArray(value)) {\n                valString = fbUtils.escapeAttr(value.join(' '));\n            } else {\n                if (typeof value === 'boolean') {\n                    value = value.toString();\n                }\n\n                value = value.toString();\n                valString = fbUtils.escapeAttr(value.replace(',', ' ').trim());\n            }\n        }\n\n        value = value ? '=\"' + valString + '\"' : '';\n\n        return {\n            name: name,\n            value: value\n        };\n    };\n\n    fbUtils.safeAttrName = function (name) {\n        var safeAttr = {\n            className: 'class'\n        };\n\n        return safeAttr[name] || fbUtils.hyphenCase(name);\n    };\n\n    /**\n     * Convert strings into lowercase-hyphen\n     *\n     * @param  {String} str\n     * @return {String}\n     */\n    fbUtils.hyphenCase = function (str) {\n        str = str.replace(/[^\\w\\s\\-]/gi, '');\n        str = str.replace(/([A-Z])/g, function ($1) {\n            return '-' + $1.toLowerCase();\n        });\n\n        return str.replace(/\\s/g, '-').replace(/^-+/g, '');\n    };\n\n    /**\n     * convert a hyphenated string to camelCase\n     * @param  {String} str\n     * @return {String}\n     */\n    fbUtils.camelCase = function (str) {\n        return str.replace(/-([a-z])/g, function (m, w) {\n            return w.toUpperCase();\n        });\n    };\n\n    /**\n     * Generate markup wrapper where needed\n     *\n     * @param  {string} tag\n     * @return {String}\n     */\n    fbUtils.markup = function (tag) {\n        var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '',\n            attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n            contentType = void 0,\n            field = document.createElement(tag),\n\n            getContentType = function getContentType(content) {\n                return Array.isArray(content) ?\n                    'array' : typeof content === 'undefined' ? 'undefined' : _typeof(content);\n            },\n\n            appendContent = {\n                string: function string(content) {\n                    field.innerHTML = content;\n                },\n                object: function object(content) {\n                    return field.appendChild(content);\n                },\n                array: function array(content) {\n                    for (var i = 0; i < content.length; i++) {\n                        contentType = getContentType(content[i]);\n                        appendContent[contentType](content[i]);\n                    }\n                }\n            };\n\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n                var name = fbUtils.safeAttrName(attr);\n\n                field.setAttribute(name, attrs[attr]);\n            }\n        }\n\n        contentType = getContentType(content);\n\n        if (content) {\n            appendContent[contentType].call(this, content);\n        }\n\n        return field;\n    };\n\n    /**\n     * Convert html element attributes to key/value object\n     * @return {Object} ex: {attrName: attrValue}\n     * @param {object} elem\n     */\n    fbUtils.parseAttrs = function (elem) {\n        var attrs = elem.attributes,\n            data = {};\n\n        fbUtils.forEach(attrs, function (attr) {\n            var attrVal = attrs[attr].value;\n\n            if (attrVal.match(/false|true/g)) {\n                attrVal = attrVal === 'true';\n            } else if (attrVal.match(/undefined/g)) {\n                attrVal = undefined;\n            }\n\n            if (attrVal) {\n                data[attrs[attr].name] = attrVal;\n            }\n        });\n\n        return data;\n    };\n\n    /**\n     * Convert field options to optionData\n     * @return {Array} optionData array\n     * @param {object} field\n     */\n    fbUtils.parseOptions = function (field) {\n        var options = field.getElementsByTagName('option'),\n            optionData = {},\n            data = [];\n\n        if (options.length) {\n            for (var i = 0; i < options.length; i++) {\n                optionData = fbUtils.parseAttrs(options[i]);\n                optionData.label = options[i].textContent;\n                data.push(optionData);\n            }\n        }\n\n        return data;\n    };\n\n    /**\n     * Parse XML formData\n     * @param  {String} xmlString\n     * @return {Array} formData array\n     */\n    fbUtils.parseXML = function (xmlString) {\n        var parser = new window.DOMParser(),\n            xml = parser.parseFromString(xmlString, 'text/xml'),\n            formData = [];\n\n        if (xml) {\n            var fields = xml.getElementsByTagName('field');\n\n            for (var i = 0; i < fields.length; i++) {\n                var fieldData = fbUtils.parseAttrs(fields[i]);\n\n                if (fields[i].children.length) {\n                    fieldData.values = fbUtils.parseOptions(fields[i]);\n                }\n\n                formData.push(fieldData);\n            }\n        }\n\n        return formData;\n    };\n\n    /**\n     * Escape markup, so it can be displayed rather than rendered\n     * @param  {String} html markup\n     * @return {String} escaped html\n     */\n    fbUtils.escapeHtml = function (html) {\n        var escapeElement = document.createElement('textarea');\n\n        escapeElement.textContent = html;\n\n        return escapeElement.innerHTML;\n    };\n\n    // Escape an attribute\n    fbUtils.escapeAttr = function (str) {\n        var match = {\n            '\"': '&quot;',\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n\n        function replaceTag(tag) {\n            return match[tag] || tag;\n        }\n\n        return typeof str === 'string' ? str.replace(/[\"&<>]/g, replaceTag) : str;\n    };\n\n    // Escape attributes\n    fbUtils.escapeAttrs = function (attrs) {\n        for (var attr in attrs) {\n            if (attrs.hasOwnProperty(attr)) {\n                attrs[attr] = fbUtils.escapeAttr(attrs[attr]);\n            }\n        }\n\n        return attrs;\n    };\n\n    // forEach that can be used on nodeList\n    fbUtils.forEach = function (array, callback, scope) {\n        for (var i = 0; i < array.length; i++) {\n            callback.call(scope, i, array[i]); // passes back stuff we need\n        }\n    };\n\n    /**\n     * Remove duplicates from an array of elements\n     * @return {Array} array with only unique values\n     * @param {array} array\n     */\n    fbUtils.unique = function (array) {\n        return array.filter(function (elem, pos, arr) {\n            return arr.indexOf(elem) === pos;\n        });\n    };\n\n    /**\n     * Generate preview markup\n     * @param  {object} fieldData\n     * @param {object} opts\n     * @return {string} preview markup for field\n     */\n    fbUtils.fieldRender = function (fieldData, opts) {\n        var preview = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false,\n            utils = fbUtils,\n            fieldMarkup = '',\n            fieldLabel = '',\n            optionsMarkup = '',\n            fieldLabelText = fieldData.label || '',\n            fieldDesc = fieldData.description || '',\n            fieldRequired = '',\n            fieldOptions = fieldData.values;\n\n        fieldData.name = preview ? fieldData.name + '-preview' : fieldData.name;\n        fieldData.id = fieldData.name;\n\n        if (\n            utils.inArray(\n                fieldData.type,\n                ['textinput', 'number', 'file', 'dropdown', 'listbox', 'textarea']\n            ) && fieldData.className.indexOf('form-control') === -1\n        ) {\n            fieldData.className += ' form-control';\n        }\n\n        if (fieldData.type === 'listbox') {\n            fieldData.multiple = true;\n        }\n\n        fieldData.name = fieldData.multiple ? fieldData.name + '[]' : fieldData.name;\n        fieldData.type = fieldData.subtype || fieldData.type;\n\n        var withoutLabel = false,\n            ratingClass = '',\n            withBr = true;\n\n        switch (fieldData.type) {\n            case 'textinput':\n                fieldData.type = 'text';\n                break;\n            case 'textarea':\n                fieldData.type = 'textarea';\n                break;\n            case 'hidden':\n                fieldData.type = 'hidden';\n                withoutLabel = true;\n                break;\n            case 'text':\n                fieldData.type = 'div';\n                withoutLabel = true;\n                break;\n            case 'hone':\n                fieldData.type = 'h1';\n                withoutLabel = true;\n                break;\n            case 'htwo':\n                fieldData.type = 'h2';\n                withoutLabel = true;\n                break;\n            case 'hthree':\n                fieldData.type = 'h3';\n                withoutLabel = true;\n                break;\n            case 'number':\n                fieldData.type = 'number';\n                break;\n            case 'rating':\n                ratingClass = 'amform-rating-container ';\n                withBr = false;\n            // eslint-disable-next-line no-fallthrough\n            case 'radiotwo':\n                withBr = false;\n            // eslint-disable-next-line no-fallthrough\n            case 'radio':\n                fieldData.type = 'radio-group';\n                break;\n            case 'checkboxtwo':\n                withBr = false;\n            // eslint-disable-next-line no-fallthrough\n            case 'checkbox':\n                fieldData.type = 'checkbox-group';\n                break;\n            case 'listbox':\n                fieldData.type = 'select';\n                break;\n            case 'dropdown':\n                fieldData.type = 'select';\n                break;\n            case 'daterange':\n                fieldData.type = 'date';\n                break;\n            case 'datetime':\n                fieldData.type = 'datetime-local';\n                break;\n            case 'wysiwyg':\n                fieldData.type = 'wysiwyg';\n                break;\n        }\n\n        fieldData['data-amcform-js'] = fieldData.id;\n\n        if (fieldData.required) {\n            delete fieldData.required;\n            fieldData['aria-required'] = 'true';\n            fieldData.className += ' required-entry';\n            fieldRequired = '<span class=\"required\">*</span>';\n        }\n\n        if (!withoutLabel) {\n            if (fieldDesc) {\n                fieldDesc = '<span class=\"tooltip-element\" tooltip=\"' + fieldDesc + '\">?</span>';\n            }\n\n            fieldLabel = '<label for=\"' + fieldData.id + '\" class=\"fb-' + fieldData.type + '-label label\">'\n                + fieldLabelText + ' ' + fieldRequired + ' ' + fieldDesc\n                + '</label>';\n        }\n\n        var fieldLabelVal = fieldData.label;\n\n        delete fieldData.label;\n        delete fieldData.description;\n\n        var fieldDataString = fbUtils.attrString(fieldData);\n\n        switch (fieldData.type) {\n            case 'wysiwyg':\n                fieldMarkup = '<div ' + fieldDataString + '>' + (fieldData.value || '') + '</div>';\n                break;\n            case 'textarea':\n            case 'rich-text':\n                delete fieldData.type;\n\n                var fieldVal = fieldData.value || '';\n\n                fieldMarkup = '<textarea ' + fieldDataString + '>' + fieldVal + '</textarea>';\n                break;\n            case 'select':\n                var optionAttrsString;\n\n                fieldData.type = fieldData.type.replace('-group', '');\n\n                if (fieldOptions) {\n                    if (fieldData.placeholder) {\n                        optionsMarkup += '<option disabled selected>' + fieldData.placeholder + '</option>';\n                    }\n\n                    for (var i = 0; i < fieldOptions.length; i++) {\n                        if (!fieldOptions[i].selected || fieldData.placeholder) {\n                            delete fieldOptions[i].selected;\n                        }\n\n                        if (!fieldOptions[i].label) {\n                            fieldOptions[i].label = '';\n                        }\n\n                        optionAttrsString = fbUtils.attrString(fieldOptions[i]);\n                        optionsMarkup += '<option ' + optionAttrsString + '>' + fieldOptions[i].label + '</option>';\n                    }\n                }\n\n                fieldMarkup = '<select ' + fieldDataString + '>' + optionsMarkup + '</select>';\n                break;\n            case 'checkbox-group':\n                if (fieldData.toggle === '1') {\n                    setTimeout(function () {\n                        $('[id^=\"' + fieldData.id + '\"]').kcToggle();\n                    }, 100);\n                }\n            // eslint-disable-next-line no-fallthrough\n            case 'rating':\n            case 'radio-group':\n                var optionAttrs = void 0;\n\n                fieldData.type = fieldData.type.replace('-group', '');\n\n                if (fieldData.type === 'checkbox') {\n                    fieldData.name += '[]';\n                }\n\n                if (ratingClass) {\n                    fieldOptions = fieldOptions.reverse();\n                }\n\n                if (fieldOptions) {\n                    var _optionAttrsString = void 0;\n\n                    for (var _i = 0; _i < fieldOptions.length; _i++) {\n                        optionAttrs = Object.assign({value: '', label: ''}, fieldData, fieldOptions[_i]);\n\n                        if (optionAttrs.selected) {\n                            delete optionAttrs.selected;\n                            optionAttrs.checked = null;\n                        }\n\n                        optionAttrs.id = fieldData.id + '-' + _i;\n                        _optionAttrsString = fbUtils.attrString(optionAttrs);\n\n                        var classNameLabel = ' class=\"amform-versiontwo-label\"',\n                            delimeter = '';\n\n                        if (withBr) {\n                            delimeter = '<br>';\n                            // eslint-disable-next-line no-use-before-define\n                            className = '';\n                        } else if (!ratingClass) {\n                            optionsMarkup += '<div class=\"amform-groupv2\">';\n                            delimeter = '</div>';\n                        }\n\n                        var labelText = ratingClass ? '' : optionAttrs.label;\n\n                        optionsMarkup += '<input ' + _optionAttrsString + ' /' + '> <label for=\"'\n                            + optionAttrs.id + '\" ' + classNameLabel + '>' + labelText + '</label>' + delimeter;\n                    }\n\n                    if (fieldData.other) {\n                        var otherOptionAttrs = {\n                            id: fieldData.id + '-' + 'other',\n                            className: fieldData.className + ' other-option',\n                            onclick: 'fbUtils.otherOptionCB(\\'' + fieldData.id + '-other\\')'\n                        };\n\n                        _optionAttrsString = fbUtils.attrString(Object.assign({}, fieldData, otherOptionAttrs));\n\n                        optionsMarkup += '<input ' + _optionAttrsString + ' /' + '>'\n                            + '<label for=\"' + otherOptionAttrs.id + '\">'\n                            + opts.messages.other + '</label> <input type=\"text\" name=\"'\n                            + fieldData.name + '\" id=\"' + otherOptionAttrs.id\n                            + '-value\" style=\"display:none;\"' + '/' + '>';\n                    }\n                }\n                fieldMarkup = '<div class=\"' + ratingClass + fieldData.type + '-group\">' + optionsMarkup + '</div>';\n                break;\n            case 'text':\n            case 'password':\n            case 'email':\n            case 'number':\n            case 'file':\n            case 'hidden':\n            case 'date':\n            case 'time':\n            case 'datetime-local':\n            case 'tel':\n            case 'autocomplete':\n                fieldMarkup = ' <input ' + fieldDataString + '>';\n                break;\n            case 'color':\n                fieldMarkup = ' <input ' + fieldDataString + '> ' + opts.messages.selectColor;\n                break;\n            case 'button':\n            case 'submit':\n                fieldMarkup = '<button ' + fieldDataString + '>' + fieldLabelVal + '</button>';\n                break;\n            case 'checkbox':\n                fieldMarkup = '<input ' + fieldDataString + '> ' + fieldLabel;\n            // eslint-disable-next-line no-fallthrough\n            case 'checkboxtwo':\n                if (fieldData.toggle) {\n                    setTimeout(function () {\n                        $('[id^=\"' + fieldData.id + '\"]').kcToggle();\n                    }, 100);\n                }\n                break;\n            case 'googlemap':\n                fieldMarkup = ' <input ' + fieldDataString + '><div class=\"map\"></div>';\n                break;\n            default:\n                fieldMarkup = '<' + fieldData.type + ' ' + fieldDataString + '>'\n                + fieldLabelVal + '</' + fieldData.type + '>';\n        }\n\n        fieldMarkup = fieldLabel + '<div class=\"control\">' + fieldMarkup + '</div>';\n\n        if (fieldData.type !== 'hidden') {\n            var className = fieldData.id ?\n                'field fb-' + fieldData.type + ' form-group field-' + fieldData.id.replace(/\\)|\\(/g, '-') :\n                '';\n\n            className += fieldData.dependency ? ' am-customform-depend' : '';\n\n            if (fieldData.layout) {\n                className += ' amform-layout-' + fieldData.layout;\n            }\n\n            fieldMarkup = fbUtils.markup('div', fieldMarkup, {\n                className: className\n            });\n        } else {\n            fieldMarkup = fbUtils.markup('input', null, fieldData);\n        }\n\n        switch (fieldData.type) {\n            case 'googlemap':\n                var position = null, zoom = 1;\n\n                if (fieldData.map_position.lat\n                    && fieldData.map_position.lng\n                    && typeof google !== 'undefined'\n                ) {\n                    position = new google.maps.LatLng(\n                        fieldData.map_position.lat,\n                        fieldData.map_position.lng\n                    );\n                    zoom = fieldData.zoom;\n                }\n\n                $(fieldMarkup).amGoogleMap({\n                    'position': position,\n                    'zoom': zoom,\n                    'styles': fieldData.style\n                });\n                break;\n            case 'date':\n                var dateInput = $(fieldMarkup).find('input');\n\n                dateInput.removeAttr('type');\n                dateInput.attr('readonly', 'readonly');\n                dateInput.datepicker({\n                    showOn: 'both',\n                    changeYear: true,\n                    yearRange: '1900:2100',\n                    autoSize: true,\n                    dateFormat: opts.dateFormat\n                });\n\n                if (fieldData.value) {\n                    dateInput.datepicker('setDate', fieldData.value);\n                }\n\n                dateInput.attr('placeholder', opts.placeholder);\n                dateInput.attr('size', 15);\n                $(fieldMarkup).find('button').html('');\n\n                var datepicker = $('#ui-datepicker-div');\n\n                if (!datepicker.hasClass('am-picker-year')) {\n                    datepicker.addClass('am-picker-year');\n                }\n                break;\n        }\n\n        return fieldMarkup;\n    };\n\n    /**\n     * Callback for other option.\n     * Toggles the hidden text area for \"other\" option.\n     * @param  {String} otherId id of the \"other\" option input\n     */\n    fbUtils.otherOptionCB = function (otherId) {\n        var otherInput = document.getElementById(otherId),\n            otherInputValue = document.getElementById(otherId + '-value');\n\n        if (otherInput.checked) {\n            otherInput.style.display = 'none';\n            otherInputValue.style.display = 'inline-block';\n        } else {\n            otherInput.style.display = 'inline-block';\n            otherInputValue.style.display = 'none';\n        }\n    };\n\n    /**\n     * Capitalizes a string\n     * @param  {String} str uncapitalized string\n     * @return {String} str capitalized string\n     */\n    fbUtils.capitalize = function (str) {\n        return str.replace(/\\b\\w/g, function (m) {\n            return m.toUpperCase();\n        });\n    };\n\n    /**\n     * Check if need show hidden fields\n     * @param {FormRenderFn} formRender\n     * @param {object} $\n     */\n    fbUtils.updateDependency = function (formRender, $) {\n        $.each(formRender.element.find('.am-customform-depend'), function ($, index, elem) {\n            var name = $(elem).find(\n                '.control input,' +\n                '.control [type=\"div\"],' +\n                '.control [type=\"h1\"],' +\n                '.control [type=\"h2\"],' +\n                '.control [type=\"h3\"],' +\n                '.control [type=\"wysiwyg\"],' +\n                '.form-control'\n            ).first().attr('name');\n\n            if (this.dependencyMap[name]) {\n                fbUtils.isFieldShowed(elem, name, this.dependencyMap);\n            }\n        }.bind(formRender, $));\n    };\n\n    fbUtils.isFieldShowed = function (checkedField, elementName, dependencyMap) {\n        var orFields = [],\n            orFieldsType = ['dropdown', 'radio', 'radiotwo'],\n            hiddenField = $(checkedField),\n            hiddenInput = hiddenField.find('input, textarea, select'),\n            validElems = 0;\n\n        $.each(dependencyMap[elementName], function (index, elem) {\n            var dependencyElem = null;\n\n            // check current dependency, only if dependency element showed\n            if (dependencyMap[elem.field] &&\n                !fbUtils.isFieldShowed($('.field-' + elem.field.replace(/\\)|\\(/g, '-')), elem.field, dependencyMap)\n            ) {\n                return false;\n            }\n\n            // find element and check value\n            // if ok - increment validElems\n            // dropdown&radio always increment validElems , checked for valid by orFieldsValid\n            switch (elem.type) {\n                case 'dropdown':\n                    dependencyElem = $('select[name=\"' + elem.field + '\"]');\n                    validElems++;\n\n                    if (typeof orFields[elem.field] == 'undefined') {\n                        orFields[elem.field] = false;\n                    }\n\n                    break;\n                case 'listbox':\n                    if ($('select[name=\"' + elem.field + '[]\"]').val().indexOf(elem.value) !== -1) {\n                        validElems++;\n                    }\n                    break;\n                case 'checkbox':\n                case 'checkboxtwo':\n                    var getCheckboxOptions = function (index, elem) {\n                        return elem.value;\n                    };\n\n                    dependencyElem = $('[name=\"' + elem.field + '[]\"]:checked');\n\n                    if (dependencyElem.map(getCheckboxOptions).toArray().indexOf(elem.value) !== -1) {\n                        validElems++;\n                    }\n\n                    dependencyElem = null;\n                    break;\n                case 'radio':\n                case 'radiotwo':\n                    validElems++;\n                    dependencyElem = $('input[name=\"' + elem.field + '\"]:checked');\n\n                    if (typeof orFields[elem.field] == 'undefined') {\n                        orFields[elem.field] = false;\n                    }\n\n                    break;\n                default:\n                    validElems++;\n            }\n\n            if (dependencyElem && dependencyElem.val() === elem.value) {\n                if (orFieldsType.indexOf(elem.type) !== -1) {\n                    orFields[elem.field] = true;\n                } else {\n                    validElems++;\n                }\n            }\n        });\n\n        var orFieldsValid = fbUtils.getEntries(orFields).map(function (pair) {\n            return pair[1];\n        }).indexOf(false) === -1;\n\n        // validElems - must be count all dependencies of element\n        // dropdown&radio validated with orFieldsValid - one suitable option must selected\n        if (dependencyMap[elementName].length === validElems && orFieldsValid) {\n            hiddenInput\n                .removeClass('amcform-hidden-field')\n                .removeAttr('disabled');\n            hiddenField.show();\n\n            return true;\n        }\n\n        hiddenInput\n            .addClass('amcform-hidden-field')\n            .attr('disabled', true);\n\n        hiddenField.hide();\n\n        return false;\n    };\n\n    fbUtils.getEntries = function (obj) {\n        return Object.entries\n            ? Object.entries(obj)\n            : Object.keys(obj).map(function (key) {\n                return [key, obj[key]];\n            });\n    };\n\n    fbUtils.showAnimation = function (loaderImage) {\n        var progress = $('<div></div>', {id: this.amProgressId}),\n            container = $('<div></div>', {id: this.amImageContainerId}),\n            img = $('<img>'),\n            width;\n\n        container.appendTo(progress);\n\n        img.attr('src', loaderImage);\n        img.appendTo(container);\n        container.width('150px');\n        width = container.width();\n        width = '-' + width / 2 + 'px';\n        container.css('margin-left', width);\n        progress.hide().appendTo($('body')).fadeIn();\n    };\n\n    fbUtils.hideAnimation = function () {\n        var element = $('#' + this.amProgressId);\n\n        if (element.length) {\n            element.fadeOut(function () {\n                $(this).remove();\n            });\n        }\n    };\n\n    fbUtils.submitForm = function (event) {\n        var form = this;\n\n        event.preventDefault();\n\n        if (form.valid()) {\n            form.find('[type=\"submit\"]').addClass('disabled');\n            if (form.has('input[type=\"file\"]').length && form.find('input[type=\"file\"]').val() !== '') {\n                form.off('submit');\n                form.submit();\n            } else {\n                var formId = form.attr('id').match(/\\d+/);\n\n                $.ajax({\n                    url: form.attr('action'),\n                    data: form.serialize(),\n                    type: 'post',\n                    dataType: 'json',\n\n                    beforeSend: function () {\n                        fbUtils.showAnimation(fbUtils.formOptions[formId].src_image_progress);\n                    },\n\n                    error: function () {\n                        fbUtils.hideAnimation();\n\n                        $('html, body').animate({\n                            scrollTop: $('body').offset().top\n                        }, 500);\n\n                        form.find('[type=\"submit\"]').removeClass('disabled');\n                    },\n\n                    success: function (response) {\n                        form.closest('.amcform-popup-block').removeClass('-active');\n                        form.find('[type=\"submit\"]').removeClass('disabled');\n                        fbUtils.hideAnimation();\n\n                        if (response.result === 'success') {\n                            var renderedForm = form.find('.insert-container'),\n                                opts = fbUtils.formOptions[formId],\n                                gdpr = form.find('[name=\"gdpr\"]');\n\n                            if (formId) {\n                                formId = parseInt(formId, 10);\n                                renderedForm.empty();\n                                renderedForm.formRender(formId, opts, form.find('[name=\"is_survey\"]').attr('value'));\n\n                                if (gdpr.length > 0) {\n                                    gdpr.removeAttr('checked');\n                                }\n\n                                if (form.parent().hasClass('amform-popup')) {\n                                    form.parent().hide();\n                                } else if (form.hasClass('amhideprice-form')) {\n                                    $.fancyambox.close();\n                                }\n                            }\n\n                            $(document).trigger('amcform-init-multipage', [renderedForm]);\n                        }\n                        window.scrollTo(0, 0);\n                    }\n                });\n            }\n        }\n    };\n\n    'use strict';\n\n    function FormRenderFn(formId, options, element) {\n        var utils = fbUtils;\n\n        fbUtils.formOptions[formId] = options;\n\n        var formRender = this,\n            defaults = {\n                destroyTemplate: true, // @todo\n                container: false,\n                dataType: 'xml',\n                formData: false,\n                messages: {\n                    formRendered: 'Form Rendered',\n                    noFormData: 'No form data.',\n                    other: 'Other',\n                    selectColor: 'Select Color'\n                },\n                onRender: function onRender() {\n                    $('.amform-hide-formload').removeClass('amform-hide-formload');\n                },\n                render: true,\n                notify: {\n                    error: function error(message) {\n                        return console.error(message);\n                    },\n                    success: function success(message) {\n                        return console.log(message);\n                    },\n                    warning: function warning(message) {\n                        return console.warn(message);\n                    }\n                }\n            },\n            opts = $.extend(true, defaults, options);\n\n        (function () {\n            if (!opts.formData) {\n                return false;\n            }\n\n            var setData = {\n                xml: function xml(formData) {\n                    return utils.parseXML(formData);\n                },\n                json: function json(formData) {\n                    return window.JSON.parse(formData);\n                }\n            };\n\n            opts.formData = setData[opts.dataType](opts.formData) || false;\n        })();\n\n        /**\n         * Extend Element prototype to allow us to append fields\n         *\n         * @param  {Object} fields Node elements\n         */\n        Element.prototype.appendFormFields = function (fields) {\n            var element = this;\n\n            fields.forEach(function (field) {\n                return element.appendChild(field);\n            });\n        };\n\n        /**\n         * Extend Element prototype to remove content\n         */\n        Element.prototype.emptyContainer = function () {\n            var element = this;\n\n            while (element.lastChild) {\n                element.removeChild(element.lastChild);\n            }\n        };\n\n        var runCallbacks = function runCallbacks() {\n            if (opts.onRender) {\n                opts.onRender();\n            }\n        },\n\n         santizeField = function santizeField(field) {\n            var sanitizedField = Object.assign({}, field);\n\n            sanitizedField.className = field.className || field.class || null;\n            delete sanitizedField.class;\n\n            if (field.values) {\n                field.values = field.values.map(function (option) {\n                    return utils.trimObj(option);\n                });\n            }\n\n            return utils.trimObj(sanitizedField);\n        },\n\n        // Render multiple page form\n         renderMultiPageForm = function (element, pages) {\n            if (opts.pageTitles) {\n                var pageTitles = JSON.parse(opts.pageTitles);\n            }\n\n            var multiPageWrap = $('<div data-amcform-js=\"multi-page\" class=\"amcform-multi-page fieldset\"></div>')\n                    .appendTo(element),\n                pageTitlesWrap = $('<ul data-amcform-js=\"page-titles\" class=\"amcform-page-titles\"></ul>')\n                    .appendTo(multiPageWrap);\n\n            if (typeof pageTitles != 'undefined') {\n                // Generate Titles\n                $.each(pageTitles, function (index, title) {\n                    var step = index + 1;\n\n                    pageTitlesWrap.append('<li class=\"amcform-title-wrap\"><a href=\"#page-' + index\n                        + '\" class=\"amcform-title\"><p class=\"amcform-step\">'\n                        + step + '</p><span class=\"amcform-label\">' + title + '</span></a></li>');\n                });\n            }\n\n            // Generate pages\n            for (var i = 0; i < pages.length; i++) {\n                var pageWrap = $('<div id=\"page-' + i + '\" class=\"amcform-page-wrap fields\"></div>')\n                        .appendTo(multiPageWrap)[0],\n                    toolbar = '<div class=\"amcform-toolbar\">';\n\n                pageWrap.appendFormFields(pages[i]);\n\n                if (i > 0) {\n                    toolbar += '<button type=\"button\" '\n                        + 'data-amcform-js=\"prev-button\" class=\"amcform-prev action submit primary \">'\n                        + $.mage.__('Previous') + '</button>';\n                }\n\n                if (i === pages.length - 1) {\n                    if ($('[data-amcform-js=\"gdpr\"]').length) {\n                        var gdpr =  $(element).next('[data-amcform-js=\"gdpr\"]').clone().appendTo(pageWrap),\n                            inputId = gdpr.find('input').attr('data-id');\n\n                        gdpr.find('input').prop('disabled', false).attr('id', inputId);\n                        gdpr.show();\n                    }\n                    var form = $(element).closest('.amform-form'),\n                        isSurvey = parseInt($(form).find('[name=\"is_survey\"]').attr('value'), 10),\n                        prompt = '';\n\n                    if (isSurvey) {\n                        prompt = 'data-mage-init=\\'{\"amcformPrompt\": {}}\\'';\n                    }\n                    toolbar += '<button type=\"submit\" data-amcform-js=\"submit-button\" '\n                        + prompt + ' class=\"amcform-submit action submit primary \">'\n                        + opts.submitButtonTitle + '</button>';\n                } else {\n                    toolbar += '<button type=\"button\" data-amcform-js=\"next-button\" '\n                        + 'class=\"amcform-next action submit primary \">' + $.mage.__('Next') + '</button>';\n                }\n\n                if (i > 0) {\n                    $(pageWrap).find('input, textarea').addClass('amcform-hidden-page');\n                }\n\n                $(toolbar + '</div>').appendTo(pageWrap);\n            }\n\n             window.dispatchEvent(new CustomEvent('amform-elements-rendered', {\n                 detail: {\n                     form: $(element).closest('form')\n                 }\n             }));\n        },\n\n        // Begin the core plugin\n         page,\n            pages = [],\n            rendered,\n            dependencyFields = [],\n            dependencyMap = [];\n\n        // generate field markup if we have fields\n        if (opts.formData) {\n            if (!Array.isArray(opts.formData[0])) {\n                var createPage = [];\n\n                createPage.push(opts.formData);\n                opts.formData = createPage;\n            }\n            // Pages\n            for (var i = 0; i < opts.formData.length; i++) {\n                rendered = [];\n                page = opts.formData[i];\n                // Forms\n                for (var j = 0; j < page.length; j++) {\n                    var sanitizedField = santizeField(page[j]);\n\n                    switch (sanitizedField.type) {\n                        case 'textinput':\n                            try {\n                                var validation = sanitizedField.validation_fields;\n\n                                if (!validation) {\n                                    validation = JSON.parse(sanitizedField.validation);\n                                }\n                            } catch (e) {\n                                validation = {};\n                            }\n                            var resultStr = '',\n                                begStr = '{',\n                                endStr = '}';\n\n                            resultStr = begStr + resultStr;\n\n                            if (validation.hasOwnProperty('validation')) {\n                                switch (validation.validation) {\n                                    case 'None':\n                                    case ' ':\n                                        break;\n                                    case 'pattern':\n                                        if (sanitizedField.regexp) {\n                                            var validationName = validation.validation + Math.random(),\n                                                errorMessage = sanitizedField.errorMessage || 'Invalid format.';\n\n                                            $.validator.addMethod(\n                                                validationName,\n                                                function (value, element, param) {\n                                                    return this.optional(element) || new RegExp(param).test(value);\n                                                },\n                                                $.mage.__(errorMessage)\n                                            );\n\n                                            resultStr = resultStr + '\\'' +\n                                                validationName + '\\':' + sanitizedField.regexp;\n                                        }\n                                        break;\n                                    default:\n                                        resultStr = resultStr + '\\'' + validation.validation + '\\':true';\n                                }\n                            }\n\n                            resultStr += endStr;\n                            sanitizedField['data-validate'] = resultStr;\n                            delete sanitizedField.validation;\n                            break;\n                    }\n                    if (sanitizedField.dependency) {\n                        // eslint-disable-next-line no-loop-func\n                        $.each(sanitizedField.dependency, function (index, elem) {\n                            var name = sanitizedField.name;\n\n                            dependencyFields.push(elem.field);\n\n                            if (\n                                ['checkbox', 'checkboxtwo', 'listbox'].indexOf(sanitizedField.type) !== -1\n                                || ['file'].indexOf(sanitizedField.type) !== -1\n                                && ['1'].indexOf(sanitizedField.multiple) !== -1\n                            ) {\n                                name += '[]';\n                            }\n\n                            if (!dependencyMap[name]) {\n                                dependencyMap[name] = [];\n                            }\n\n                            dependencyMap[name].push(elem);\n                        });\n                    }\n\n                    rendered.push(utils.fieldRender(sanitizedField, opts));\n                }\n\n                pages.push(rendered);\n            }\n\n            if (opts.render) {\n                if (opts.container) {\n                    opts.container = opts.container instanceof jQuery ? opts.container[0] : opts.container;\n                    opts.container.emptyContainer();\n                    renderMultiPageForm(opts.container, pages);\n                } else if (element) {\n                    element.emptyContainer();\n                    renderMultiPageForm(element, pages);\n                }\n\n                runCallbacks();\n                opts.notify.success(opts.messages.formRendered);\n            } else {\n                $.each(pages, function (index, page) {\n                    formRender.markup = rendered.map(function (page) {\n                        return elem.innerHTML;\n                    }).join('');\n                });\n            }\n        } else {\n            var noData = utils.markup('div', opts.messages.noFormData, {\n                className: 'no-form-data'\n            });\n\n            pages.push(noData);\n            opts.notify.error(opts.messages.noFormData);\n        }\n        this.dependencyMap = dependencyMap;\n        this.dependencyFileds = dependencyFields;\n        this.element = $(element);\n        this.form = this.element.parents('form');\n        this.element.on('click change', 'input, select', function ($, fbUtils, event) {\n            var target = event.currentTarget;\n\n            if (this.dependencyFileds.indexOf(target.name.replace('[]', '')) !== -1) {\n                fbUtils.updateDependency(this, $);\n            }\n        }.bind(this, $, fbUtils));\n\n        fbUtils.updateDependency(this, $);\n\n        if (opts.ajax_submit === 1) {\n            var form = this.form;\n\n            form.unbind('submit');\n            form.on('submit', fbUtils.submitForm.bind(form));\n            form.trigger('ajaxFormLoaded');\n        }\n\n        return formRender;\n    }\n\n    (function ($) {\n        $.fn.formRender = function (formId, options, isSurvey, callback) {\n            var self = this,\n                componentOptions = {\n                    classes: {\n                        active: '-active',\n                        formEdit: '-form-edit',\n                        grid: '-grid',\n                        title: 'amcform-title'\n                    },\n                    selectors: {\n                        formParent: '.amform-parent',\n                        popupBlock: '.amcform-popup-block',\n                        closeButton: '[data-amcform-js=\"close\"]',\n                        map: '.map',\n                        showPopupButton: '[data-amform-show={formId}]',\n                        popupCloseException: '.amcform-popup, .amform-show-popup, .modals-overlay, ' +\n                            '.modal-inner-wrap, .ui-datepicker-next, .ui-datepicker-prev, .am-picker-year',\n                        popupBlockId: '.amcform-popup-block[data-form-id={formId}]',\n                        form: '.amform-form[data-amform-id={id}]',\n                        insertContainer: '.insert-container'\n                    }\n                };\n\n            if (parseInt(isSurvey, 10)) {\n                $.ajax({\n                    url: urlBuilder.build(window.location.origin + '/amasty_customform/form/survey'),\n                    dataType: 'json',\n                    type: 'post',\n                    data: {'form_id': formId},\n                    success: function (response) {\n                        if (response.isSurveyAvailable) {\n                            // eslint-disable-next-line no-use-before-define\n                            generateBegin(formId, options, callback);\n                        } else {\n                            // eslint-disable-next-line no-use-before-define\n                            renderMessage(\n                                $(componentOptions.selectors.form.replace('{id}', formId)),\n                                'Thank you for participating in this survey!'\n                            );\n                        }\n                    },\n                    error: function (error) {\n                        console.log(error);\n                    }\n                });\n            } else {\n                // eslint-disable-next-line no-use-before-define\n                generateBegin(formId, options, callback);\n            }\n\n            // eslint-disable-next-line no-use-before-define\n            addShowPopupButtonListener();\n\n            /**\n             * @param {Object} target - jQuery node/nodes-list\n             * @param {String} message\n             * @returns {void}\n             */\n            function renderMessage(target, message) {\n                if (!target.length) {\n                    return;\n                }\n\n                target.each(function (index, item) {\n                    $(item)\n                        .find(componentOptions.selectors.insertContainer)\n                        .html($('<h3>', {\n                            text: $.mage.__(message),\n                            class: componentOptions.classes.title\n                        }));\n                });\n            }\n\n            function generateBegin(formId, options, callback) {\n                // eslint-disable-next-line no-use-before-define\n                generateForm(formId, options);\n                if (callback) {\n                    callback();\n                }\n            }\n\n            function generateForm(formId, options) {\n                self.each(function () {\n                    var formRender = new FormRenderFn(formId, options, this);\n\n                    $(window).trigger('amform-form-' + formId, [\n                        formRender.form[0],\n                        formRender.form.find('[type=\"submit\"]')[0]\n                    ]);\n\n                    return formRender;\n                });\n            }\n\n            function addShowPopupButtonListener() {\n                var buttonBlock = $(componentOptions.selectors.showPopupButton.replace('{formId}', formId)),\n                    _formId,\n                    popupWrapper,\n                    popupBlock,\n                    googleMaps;\n\n                buttonBlock.on('click', function () {\n                    _formId = $(this).attr('data-amform-show');\n                    popupWrapper = $(this).closest(componentOptions.selectors.formParent);\n                    popupBlock = popupWrapper\n                        .find(componentOptions.selectors.popupBlockId\n                        .replace('{formId}', _formId));\n                    googleMaps = popupBlock.find(componentOptions.selectors.map);\n\n                    if (!popupBlock.length) {\n                        return;\n                    }\n\n                    popupBlock.addClass(componentOptions.classes.active);\n\n                    if (googleMaps.width()) {\n                        // trigger resize for prevent grey map\n                        googleMaps.width(googleMaps.width() + 1);\n                    }\n\n                    $(document).on('click', function (event) {\n                        if (!$(event.target).closest(componentOptions.selectors.popupCloseException).length) {\n                            if (buttonBlock.hasClass(componentOptions.classes.formEdit)) {\n                                popupWrapper.remove();\n                            }\n\n                            popupBlock.removeClass(componentOptions.classes.active);\n                        }\n                    });\n\n                    popupBlock.find(componentOptions.selectors.closeButton).on('click', function () {\n                        if (buttonBlock.hasClass(componentOptions.classes.formEdit)) {\n                            popupWrapper.remove();\n                        }\n\n                        popupBlock.removeClass(componentOptions.classes.active);\n                    });\n                });\n\n                if (buttonBlock.hasClass(componentOptions.classes.formEdit)) {\n                    // eslint-disable-next-line no-use-before-define\n                    formEditEvents(buttonBlock);\n                }\n            }\n\n            function formEditEvents(buttonBlock) {\n                var popupWrapper = buttonBlock.closest(componentOptions.selectors.formParent),\n                    popupBlock = popupWrapper.find(componentOptions.selectors.popupBlock),\n                    dataProvider = require('amcformGridDataProvider'),\n                    messageList = require('amcformMessageList'),\n                    notifications = require('amcformNotifications'),\n                    gridData = dataProvider().itemStorage.get();\n\n                buttonBlock.trigger('click');\n\n                buttonBlock.closest(componentOptions.selectors.formParent).find('form').submit(function (event) {\n                    event.preventDefault();\n\n                    // eslint-disable-next-line no-use-before-define\n                    submitEditedForm($(this), function (response) {\n                        if (!response.messages.length) {\n                            notifications().setMessageType('edited', 1);\n\n                            if (buttonBlock.hasClass(componentOptions.classes.grid)) {\n                                dataProvider().getForms(gridData.currentPage, gridData.pageSize);\n                                notifications('showSuccessMessage');\n                            } else {\n                                window.location.reload();\n                            }\n                        } else if (messageList) {\n                            response.messages.forEach(function (message) {\n                                messageList.addErrorMessage({message: message});\n                            });\n                        }\n\n                        popupBlock.removeClass(componentOptions.classes.active);\n                        popupWrapper.remove();\n                    });\n                });\n            }\n\n            function submitEditedForm(target, callback) {\n                var formData;\n\n                if (target.length) {\n                    formData = new FormData(target.get(0));\n\n                    $.ajax({\n                        type: 'POST',\n                        url: target.attr('action'),\n                        data: formData,\n                        contentType: false,\n                        processData:false,\n                        dataType: 'json'\n                    }).done(callback);\n                }\n            }\n        };\n    })($);\n});\n","Amasty_Customform/js/google-map-loader.js":"define([\n    'jquery'\n], function ($) {\n    'use_strict';\n\n    /**\n     * @param {string} googleKey\n     *\n     * @return {jQuery.Deferred}\n     */\n    return function (googleKey) {\n        var result = $.Deferred();\n\n        try {\n            require(\n                ['https://maps.googleapis.com/maps/api/js?libraries=places&key=' + googleKey],\n                result.resolve.bind(result)\n            );\n        } catch (e) {\n            result.reject();\n        }\n\n        return result;\n    }\n})\n","Amasty_Customform/js/form/provider.js":"define([\n    'Magento_Ui/js/form/provider'\n], function (Provider) {\n    return Provider.extend({\n        save: function () {\n            document.dispatchEvent(new Event('customFormSaveBefore'));\n\n            return this._super();\n        }\n    });\n});\n","Amasty_Customform/js/form/elements/form_builder.js":"define([\n    'jquery',\n    'Magento_Ui/js/form/components/html',\n    'Amasty_Customform/js/form-builder-helper'\n], function ($, HTMLComponent, helpers) {\n    'use strict';\n\n    return HTMLComponent.extend({\n        /**\n         * @return {Object} - reference to instance\n         */\n        initObservable: function () {\n            this._super();\n            $(document).on('customFormSaveBefore', this.saveFormConfig.bind(this));\n\n            return this;\n        },\n\n        saveFormConfig: function () {\n            var formBuilderWidget,\n                formTitles,\n                formConfig;\n\n            if ($.mage.customFormBuilder) {\n                formBuilderWidget = $.mage.customFormBuilder.prototype;\n\n                if (!formBuilderWidget.helpers) {\n                    formBuilderWidget.helpers = helpers[1]({}, formBuilderWidget);\n                }\n\n                formTitles = formBuilderWidget.getPageTitles();\n                formConfig = formBuilderWidget.getSerializedFormConfig();\n                this.source.set('data.form_json', JSON.stringify(formConfig));\n                this.source.set('data.form_title', JSON.stringify(formTitles));\n                delete formBuilderWidget.helpers;\n            }\n        }\n    });\n});\n","Amasty_Customform/js/grid/export.js":"define([\n    'jquery',\n    'Magento_Ui/js/grid/export',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate'\n], function ($, mageExport, alert) {\n    'use strict';\n\n    return mageExport.extend({\n        defaults: {\n            emptySelectionProcess: [\n                'individual_pdfs'\n            ]\n        },\n\n        /**\n         *\n         * @param {object} option\n         * @return string|null\n         */\n        buildOptionUrl: function (option) {\n            var params,\n                emptySelection;\n\n            if (this.emptySelectionProcess.indexOf(option.value) !== -1) {\n                params = this.getParams();\n\n                if (Boolean(params['empty_selection'])) {\n                    alert({\n                        title: $.mage.__('Attention'),\n                        content: $.mage.__('You haven\u2019t selected any items!')\n                    });\n\n                    return null;\n                }\n            }\n\n            return this._super();\n        },\n\n        /**\n         * @return {object}\n         */\n        getParams: function () {\n            var params = this._super(),\n                hasSelected = Array.isArray(params.selected) && params.selected.length > 0,\n                hasExcluded = (Array.isArray(params.excluded) && params.excluded.length) || params.excluded === false;\n\n            params.empty_selection = !hasSelected && !hasExcluded;\n\n            return params;\n        },\n\n        applyOption: function () {\n            var option = this.getActiveOption(),\n                url = this.buildOptionUrl(option);\n\n            if (url !== null) {\n                window.open(url);\n            }\n        }\n    });\n});\n","Amasty_Customform/js/grid/columns/select.js":"define([\n    'jquery',\n    'underscore',\n    'Magento_Ui/js/grid/columns/select',\n    'mage/translate'\n], function ($, _, Select) {\n    'use strict';\n\n    return Select.extend({\n        /**\n         * Retrieves label associated with a provided value.\n         *\n         * @returns {String}\n         */\n        getLabel: function (record) {\n            var label = this._super(record);\n\n            if (!label) {\n                label = record.form_name ? record.form_name : $.mage.__(' Form#') + record.form_id\n                label = label + $.mage.__(' (removed)');\n            }\n\n            return label;\n        }\n    });\n});\n","Amasty_PromoCountdown/js/countdown.js":"define([\n    'uiComponent',\n    'mage/storage'\n], function (Component, storage) {\n    'use strict';\n\n    var xhr = {};\n\n    return Component.extend({\n        defaults: {\n            template: 'Amasty_PromoCountdown/countdown',\n            serviceUrl: false,\n            firstRun: true,\n\n            days: 0,\n            hours: 0,\n            min: 0,\n            sec: 0,\n\n            link: null,\n            targetTime: false,\n            startTime: false,\n            isVisible: false,\n            secondsLeft: false\n        },\n\n        initObservable: function () {\n            this._super().observe('days hours min sec isVisible secondsLeft');\n\n            return this;\n        },\n\n        updateValues: function () {\n            this.sec(Math.floor((this.secondsLeft() % 60)));\n\n            if (this.firstRun || this.sec() === 59) {\n                this.min(Math.floor((this.secondsLeft() % (60 * 60)) / 60));\n\n                if (this.firstRun || this.min() === 59) {\n                    this.hours(Math.floor((this.secondsLeft() % (60 * 60 * 24)) / (60 * 60)));\n\n                    if (this.firstRun || this.hours() === 23) {\n                        this.days(Math.floor(this.secondsLeft() / (60 * 60 * 24)));\n                    }\n                }\n            }\n\n            if (this.firstRun) {\n                this.firstRun = false;\n                this.isVisible(true);\n            }\n        },\n\n        parseResult: function (result) {\n            if (result) {\n                this.secondsLeft(result);\n\n                var x = setInterval(function () {\n                    this.secondsLeft(this.secondsLeft() - 1);\n                    this.updateValues();\n\n                    if (this.secondsLeft() === 0) {\n                        clearInterval(x);\n                        this.isVisible(false);\n                    }\n                }.bind(this), 1000);\n            }\n        },\n\n        setupTimer: function () {\n            if (!this.firstRun) {\n                return true;\n            }\n\n            if (xhr.hasOwnProperty(this.targetTime)) {\n                xhr[this.targetTime].done(this.parseResult.bind(this));\n\n                return true;\n            }\n\n            xhr[this.targetTime] = storage.post(this.serviceUrl,\n                JSON.stringify({\n                    start: this.startTime,\n                    end: this.targetTime\n                }),\n                false\n            ).done(\n                this.parseResult.bind(this)\n            ).always(\n                function () {\n                    delete xhr[this.targetTime];\n                }.bind(this)\n            );\n\n            return true;\n        }\n    });\n});\n","Amasty_PromoCountdown/js/validation.js":"require([\n        'jquery',\n        'mage/translate',\n        'jquery/validate'\n    ],\n    function ($) {\n        $('.validate-date-period-min').change(function () {\n            $(this).validation().validation('isValid');\n        });\n\n        $('.validate-date-period-max').change(function () {\n            $('.validate-date-period-min').validation().validation('isValid');\n        });\n\n        $.validator.addMethod(\n            'validate-date-period-min',\n            function (minValue) {\n                var max = $('.validate-date-period-max');\n\n                if (max && max.length && max.first().val()) {\n                    var startDate = new Date(minValue);\n                    var endDate = new Date(max.first().val());\n\n                    return startDate < endDate;\n                }\n\n                return true;\n            },\n            $.mage.__('The Start Time can not be more or equal than the End Time')\n        );\n    }\n);\n","Amasty_PromoCountdown/js/color.js":"define([\n    \"jquery\",\n    \"jquery/colorpicker/js/colorpicker\"\n], function ($) {\n    'use strict';\n\n    return function (config) {\n        var input = $(\"#\" + config.htmlId);\n\n        function inverse(color) {\n            return (0xFFFFFF - (\"0x\" + color)).toString(16).padStart(6, \"0\").toUpperCase();\n        }\n\n        if (config.inverseHex !== '') {\n            input.css({\"backgroundColor\": config.value, \"color\": config.inverseHex});\n        }\n\n        input.ColorPicker({\n            color: config.value,\n\n            onChange: function (hsb, hex) {\n                input.css({\"backgroundColor\": \"#\" + hex, \"color\": \"#\" + inverse(hex)}).val(\"#\" + hex);\n            },\n\n            onShow: function () {\n                $(\".colorpicker\").css(\"z-index\", 903);\n            }\n        });\n    };\n});\n","Amasty_PromoCountdown/js/design/round.js":"define([\n    'uiComponent'\n], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            maxRound: 628,\n            modules: {\n                parent: \"${$.parentName}\"\n            }\n        },\n\n        getLinearGradient: function () {\n            return this.parent().widgetId + '-circle-gradient';\n        },\n\n        offsetDays: function (maxValue) {\n            var totalDays = Math.floor((this.parent().targetTime - this.parent().startTime) / (60 * 60 * 24));\n            return maxValue * (totalDays - this.parent().days()) / totalDays;\n        },\n\n        offsetHour: function (maxValue) {\n            return maxValue * (24 - this.parent().hours()) / 24;\n        },\n\n        offsetMin: function (maxValue) {\n            return maxValue * (60 - this.parent().min()) / 60;\n        },\n\n        offsetSec: function (maxValue) {\n            return maxValue * (60 - this.parent().sec()) / 60;\n        },\n\n        getRotate: function (value) {\n            return ('rotate(' + Math.floor(360 - value) + 'deg').toString();\n        }\n    });\n});\n","Amasty_PromoCountdown/js/design/progress.js":"define([\n    'uiComponent'\n], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            modules: {\n                parent: \"${$.parentName}\"\n            }\n        },\n\n        getCurrentPercent: function () {\n            var totalSeconds = this.parent().targetTime - this.parent().startTime;\n\n            return (1 - this.parent().secondsLeft() / totalSeconds) * 100;\n        },\n\n        getCurrentPercentString: function () {\n            return this.getCurrentPercent() + '%';\n        }\n    });\n});\n","Amasty_PromoCountdown/js/design/circle.js":"define([\n    'uiComponent'\n], function (Component) {\n    'use strict';\n    return Component.extend({\n        defaults: {\n            maxRound: 157,\n            modules: {\n                parent: \"${$.parentName}\"\n            }\n        },\n\n        offsetDays: function () {\n            var totalDays = Math.floor((this.parent().targetTime - this.parent().startTime) / (60 * 60 * 24));\n            return this.maxRound * (totalDays - this.parent().days()) / totalDays;\n        },\n\n        offsetHour: function () {\n            return this.maxRound * (24 - this.parent().hours()) / 24;\n        },\n\n        offsetMin: function () {\n            return this.maxRound * (60 - this.parent().min()) / 60;\n        },\n\n        offsetSec: function () {\n            return this.maxRound * (60 - this.parent().sec()) / 60;\n        }\n    });\n});\n","Amasty_ShippingBar/js/validation.js":"require([\n    'Magento_Ui/js/lib/validation/validator',\n    'mage/translate'\n], function (validator, $t) {\n    'use strict';\n\n    validator.addRule(\n        'validate-length-of-numbers-after-comma',\n        function (value) {\n            return /^\\d+(\\.\\d{0,2})?$/.test(value);\n        },\n        $t('The field should contain no more than 2 decimal places.')\n    );\n\n    validator.addRule(\n        'validate-no-html-tags',\n        function (value) {\n            return !/<+\\w+((\\s+\\w+(\\s*=\\s*(?:\".*?\"|'.*?'|[^'\">\\s]+))?)+\\s*|\\s*)?\\/?>/gm.test(value);\n        },\n        $t('The field should contain no html tags.')\n    );\n});\n","Amasty_ShippingBar/js/form/element/select-with-info.js":"define([\n    'Magento_Ui/js/form/element/select'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        noticeStorage: '',\n\n        initialize: function () {\n            this._super();\n\n            this.noticeStorage = this.additionalInfo();\n\n            return this;\n        },\n\n        initObservable: function () {\n            this._super();\n\n            this.observe('additionalInfo');\n\n            return this;\n        },\n\n        hideInfo: function () {\n            this.additionalInfo(false);\n        },\n\n        showInfo: function () {\n            this.additionalInfo(this.noticeStorage);\n        }\n    });\n});\n","Amasty_ShippingBar/js/form/element/color-select.js":"define([\n    'jquery',\n    'Magento_Ui/js/form/element/abstract',\n    'jquery/colorpicker/js/colorpicker',\n], function ($, Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            visible: true,\n            elementTmpl: 'Amasty_ShippingBar/form/element/color-select',\n            color: false\n        },\n\n        bindColorPicker: function(element) {\n            $(element).ColorPicker({\n                color: this.value(),\n                onChange: function (hsb, hex) {\n                    this.value('#' + hex);\n                }.bind(this)\n            });\n        },\n\n        initObservable: function () {\n            this._super().observe('color');\n\n            this.value.subscribe(function () {\n               this.color(this.inverseColor(this.value()));\n            }.bind(this));\n\n            return this;\n        },\n\n        inverseColor: function (color) {\n            color = color.replace('#', '');\n            return (0xFFFFFF - (\"0x\" + color))\n                .toString(16)\n                .padStart(6, \"0\")\n                .toUpperCase().\n                replace('', '#');\n        },\n    });\n});\n","Amasty_ShippingBar/js/form/element/preview.js":"define([\n    'uiComponent',\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            helpFlag: false,\n            contentVisibility: true,\n            additionalClass: false,\n            isVisible: true,\n            imports: {\n                actionClickable: '${$.provider}:data.action_clickable',\n                isCarVisibleToggle: '${$.provider}:data.car_icon_visible',\n                closeable: '${$.provider}:data.closeable',\n                textSize: '${$.provider}:data.text_size',\n                fontFamily: '${$.provider}:data.text_font',\n                barBackground: '${$.provider}:data.background_color',\n                extraColor: '${$.provider}:data.extra_color',\n                textColor: '${$.provider}:data.text_color',\n                actionLink: '${$.provider}:data.action_link',\n                goal: '${$.provider}:data.goal',\n                goalLeft: '${$.provider}:data.goal_left',\n                goalSource: '${$.provider}:data.goal_source',\n                currencySymbol: '${$.provider}:data.currency_symbol',\n                customStyle: '${$.provider}:data.custom_style',\n            },\n            modules: {\n                initMessage: 'amasty_shipbar_profile_form.amasty_shipbar_profile_form.content.init_message',\n                progressMessage: 'amasty_shipbar_profile_form.amasty_shipbar_profile_form.content.progress_message',\n                achievedMessage: 'amasty_shipbar_profile_form.amasty_shipbar_profile_form.content.achieved_message',\n                termsMessage: 'amasty_shipbar_profile_form.amasty_shipbar_profile_form.content.terms_message'\n            }\n        },\n\n        initObservable: function () {\n            this._super().observe([\n                'helpFlag',\n                'contentVisibility',\n                'actionClickable',\n                'isCarVisibleToggle',\n                'closeable',\n                'textSize',\n                'fontFamily',\n                'barBackground',\n                'extraColor',\n                'textColor',\n                'actionLink',\n                'goal',\n                'goalLeft',\n                'goalSource',\n                'customStyle'\n            ]);\n\n            return this;\n        },\n\n        isCarVisible: function () {\n            return this.isCarVisibleToggle() === \"1\" || !this.contentVisibility();\n        },\n\n        hasTermContent: function () {\n            var result = this.getMessageByFieldset(this.termsMessage()).length > 0;\n\n            if (!result) {\n                this.helpFlag(result);\n            }\n\n            return result;\n        },\n\n        initMoving: function () {\n        },\n\n        haveAction: function () {\n            return this.actionClickable() === \"1\" && this.actionLink().length > 0;\n        },\n\n        isCloseable: function () {\n            return this.closeable() === \"1\";\n        },\n\n        haveCustomStyle: function () {\n            return this.customStyle().length > 0;\n        },\n\n        getLabelContent: function () {\n            var text = this.getRawLabelContent();\n\n            if (this.goalSource() == 0) {\n                text = text.replace('{{ruleGoal}}', this.addExtraColor(Math.round(this.goal() * 100) / 100));\n                text = text.replace('{{ruleGoalLeft}}', this.addExtraColor(Math.round(this.goal() * this.goalLeft()) / 100));\n            } else {\n                text = text.replace('{{ruleGoal}}', this.addExtraColor('{Free Shipping Amount}'));\n                text = text.replace('{{ruleGoalLeft}}', this.addExtraColor('{Free Shipping Amount}'));\n            }\n\n            return text;\n        },\n\n        getFontSize: function () {\n            return this.textSize() + 'px';\n        },\n\n        getMessageByFieldset: function (element) {\n            return element._elems[10]._elems[10]._elems[10].value();\n        },\n\n        getRawLabelContent: function () {\n            if (this.helpFlag()) {\n                return this.getMessageByFieldset(this.termsMessage());\n            }\n\n            switch (this.goalLeft()) {\n                case \"100\":\n                    return this.getMessageByFieldset(this.initMessage());\n                case \"50\":\n                    return this.getMessageByFieldset(this.progressMessage());\n                case \"0\":\n                    return this.getMessageByFieldset(this.achievedMessage());\n            }\n\n            return this.getMessageByFieldset(this.initMessage());\n        },\n\n        addExtraColor: function (data) {\n            return \"<b style=\\\"color: \" + this.extraColor() + \"\\\">\" + this.currencySymbol + data  + \"</b>\";\n        },\n    });\n});\n","Amasty_CustomTabs/js/grid/columns/checkbox.js":"define([\n    'underscore',\n    'mage/translate',\n    'Magento_Ui/js/grid/columns/column',\n    'jquery'\n], function (_, $t, Column, jQuery) {\n    'use strict';\n\n    return Column.extend({\n        defaults: {\n            bodyTmpl: 'Amasty_CustomTabs/grid/cells/checkbox',\n            draggable: false,\n            sortable: false\n        },\n\n        /**\n         * Remove disable class from Insert Attribute button after Attribute has been chosen.\n         *\n         * @return {Boolean}\n         */\n        selectAttribute: function () {\n            if (jQuery('#insert_attribute').hasClass('disabled')) {\n                jQuery('#insert_attribute').removeClass('disabled');\n            }\n\n            return true;\n        }\n    });\n});\n","Amasty_CustomTabs/js/wysiwyg/tiny_mce/plugins/editor_plugin.js":"/* global tinymce, varienGlobalEvents, Base64 */\n/* eslint-disable strict */\ndefine('customTabEditorPlugin', [\n    'Amasty_CustomTabs/js/variable/attribute-directive-generator',\n    'wysiwygAdapter',\n    'jquery'\n], function (attributeDirectiveGenerator, wysiwyg, jQuery) {\n    return function (config) {\n        tinymce.create('tinymce.plugins.amcustomtabs_attribute', {\n\n            /**\n             * Initialize editor plugin.\n             *\n             * @param {tinymce.editor} editor - Editor instance that the plugin is initialized in.\n             * @param {String} url - Absolute URL to where the plugin is located.\n             */\n            init: function (editor, url) {\n                var self = this;\n\n                /**\n                 * Add new command to open attributes selector slideout.\n                 */\n                editor.addCommand('openAttributesSlideout', function (commandConfig) {\n                    var selectedElement;\n\n                    if (commandConfig) {\n                        selectedElement = commandConfig.selectedElement;\n                    } else {\n                        selectedElement = tinymce.activeEditor.selection.getNode();\n                    }\n                    AmastyProductTabsAttributePlugin.setEditor(editor);\n                    AmastyProductTabsAttributePlugin.loadChooser(\n                        config.url,\n                        wysiwyg.getId(),\n                        selectedElement\n                    );\n                });\n\n                /**\n                 * Add button to the editor toolbar.\n                 */\n                editor.addButton('amcustomtabs_attribute', {\n                    title: jQuery.mage.__('Insert Attribute'),\n                    tooltip: jQuery.mage.__('Insert Attribute'),\n                    cmd: 'openAttributesSlideout',\n                    image: url + '/img/icon.png',\n\n                    /**\n                     * Highlight or dismiss Insert Attribute button when attribute is selected or deselected.\n                     */\n                    onPostRender: function () {\n                        var _this = this,\n\n                        /**\n                         * Toggle active state of Insert Attribute button.\n                         *\n                         * @param {Object} e\n                         */\n                        toggleAttributeButton = function (e) {\n                            _this.active(false);\n\n                            if (jQuery(e.target).hasClass('amcustomtabs-attribute')) {\n                                _this.active(true);\n                            }\n                        };\n\n                        editor.on('click', toggleAttributeButton);\n                        editor.on('change', toggleAttributeButton);\n                    }\n                });\n\n                /**\n                 * Double click handler on the editor to handle dbl click on attribute placeholder.\n                 */\n                editor.on('dblclick', function (evt) {\n                    if (jQuery(evt.target).hasClass('amcustomtabs-attribute')) {\n                        editor.selection.collapse(false);\n                        editor.execCommand('openAttributesSlideout', {\n                            ui: true,\n                            selectedElement: evt.target\n                        });\n                    }\n                });\n\n                /**\n                 * Attach event handler for when wysiwyg editor is about to encode its content\n                 */\n                varienGlobalEvents.attachEventHandler('wysiwygEncodeContent', function (content) {\n                    content = self.encodeAttributes(content);\n\n                    return content;\n                });\n\n                /**\n                 * Attach event handler for when wysiwyg editor is about to decode its content\n                 */\n                varienGlobalEvents.attachEventHandler('wysiwygDecodeContent', function (content) {\n                    content = self.decodeAttributes(content);\n\n                    return content;\n                });\n            },\n\n            /**\n             * Encode attributes in content\n             *\n             * @param {String} content\n             * @returns {*}\n             */\n            encodeAttributes: function (content) {\n                content = content.gsub(/\\{\\{amcustomtabs_attribute code=\\\"([^\\\"]+)\\\"\\}\\}/i, function (match) {\n                    var path = match[1],\n                        amAttributes,\n                        imageHtml;\n\n                    amAttributes = JSON.parse(config.placeholders);\n\n                    if (amAttributes[match[1]]) {\n                        imageHtml = '<span id=\"%id\" class=\"amcustomtabs-attribute magento-placeholder mceNonEditable\">' +\n                            '%s</span>';\n                        imageHtml = imageHtml.replace('%s', amAttributes[match[1]]['label']);\n                    } else {\n                        imageHtml = '<span id=\"%id\" class=\"' +\n                            'amcustomtabs-attribute magento-placeholder magento-placeholder-error ' +\n                            'mceNonEditable' +\n                            '\">' +\n                            'Not found' +\n                            '</span>';\n                    }\n\n                    return imageHtml.replace('%id', Base64.idEncode(path));\n                });\n\n                return content;\n            },\n\n            /**\n             * Decode attributes in content.\n             *\n             * @param {String} content\n             * @returns {String}\n             */\n            decodeAttributes: function (content) {\n                var doc = (new DOMParser()).parseFromString(content.replace(/&quot;/g, '&amp;quot;'), 'text/html');\n\n                [].forEach.call(doc.querySelectorAll('span.amcustomtabs-attribute'), function (el) {\n                    var $el = jQuery(el);\n\n                    $el.replaceWith(\n                        attributeDirectiveGenerator.processConfig(\n                            Base64.idDecode(\n                                $el.attr('id')\n                            )\n                        )\n                    );\n                });\n\n                return doc.body ? doc.body.innerHTML.replace(/&amp;quot;/g, '&quot;') : content;\n            },\n\n            /**\n             * @return {Object}\n             */\n            getInfo: function () {\n                return {\n                    longname: 'Amasty Product Tab Attribute Manager Plugin',\n                    author: 'Amasty Team',\n                    authorurl: 'http://amasty.com',\n                    infourl: 'http://amasty.com',\n                    version: '1.0'\n                };\n            }\n        });\n\n        /**\n         * Register plugin\n         */\n        tinymce.PluginManager.add('amcustomtabs_attribute', tinymce.plugins.amcustomtabs_attribute);\n    };\n});\n","Amasty_CustomTabs/js/variable/attribute-directive-generator.js":"define([\n    'underscore'\n], function (_) {\n    'use strict';\n\n    return _.extend({\n        directiveTemplate: '{{amcustomtabs_attribute code=\"%s\"}}',\n\n        /**\n         * @param {String} path\n         * @return {String}\n         */\n        processConfig: function (path) {\n            return this.directiveTemplate.replace('%s', path);\n\n        }\n\n    });\n});\n","Amasty_CustomTabs/js/variable/editor.js":"require([\n    'Amasty_CustomTabs/js/variable/attributes'\n]);\n","Amasty_CustomTabs/js/variable/attributes.js":"define([\n    'jquery',\n    'mage/backend/notification',\n    'mage/translate',\n    'uiRegistry',\n    'mage/apply/main',\n    'mageUtils',\n    'Amasty_CustomTabs/js/variable/attribute-directive-generator',\n    'Magento_Ui/js/lib/spinner',\n    'jquery/ui',\n    'prototype'\n], function (jQuery, notification, $t, registry, mageApply, utils, attributeDirectiveGenerator, loader) {\n    'use strict';\n\n    window.AmastyProductTabsAttribute = {\n        textareaElementId: null,\n        attributesContent: null,\n        dialogWindow: null,\n        dialogWindowId: 'attributes-chooser',\n        overlayShowEffectOptions: null,\n        overlayHideEffectOptions: null,\n        insertFunction: 'Attributes.insertAttribute',\n        selectedPlaceholder: null,\n        isEditMode: null,\n        editor: null,\n\n        /**\n         * Initialize Attributes handler.\n         *\n         * @param {*} textareaElementId\n         * @param {Function} insertFunction\n         * @param {Object} editor\n         * @param {Object} selectedPlaceholder\n         */\n        init: function (textareaElementId, insertFunction, editor, selectedPlaceholder) {\n            if ($(textareaElementId)) {\n                this.textareaElementId = textareaElementId;\n            }\n\n            if (insertFunction) {\n                this.insertFunction = insertFunction;\n            }\n\n            if (selectedPlaceholder) {\n                this.selectedPlaceholder = selectedPlaceholder;\n            }\n\n            if (editor) {\n                this.editor = editor;\n            }\n        },\n\n        /**\n         * Reset data.\n         */\n        resetData: function () {\n            this.attributesContent = null;\n            this.dialogWindow = null;\n        },\n\n        /**\n         * Open attributes chooser slideout.\n         *\n         * @param {Object} attributes\n         */\n        openAttributeChooser: function (attributes) {\n            if (attributes) {\n                this.openDialogWindow(attributes);\n            }\n        },\n\n        /**\n         * Close attributes chooser slideout dialog window.\n         */\n        closeDialogWindow: function () {\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\n        },\n\n        /**\n         * Init ui component grid on the form\n         *\n         * @return void\n         */\n        initUiGrid: function () {\n            mageApply.apply(document.getElementById(this.dialogWindow));\n            jQuery('#' + this.dialogWindowId).applyBindings();\n            loader.get('amcustomtabs_attributes_modal.amcustomtabs_attributes_modal.attributes').hide();\n        },\n\n        /**\n         * Open slideout dialog window.\n         *\n         * @param {*} attributesContent\n         * @param {Object} selectedElement\n         */\n        openDialogWindow: function (attributesContent, selectedElement) {\n\n            var html = utils.copy(attributesContent),\n                self = this;\n\n            jQuery('<div id=\"' + this.dialogWindowId + '\">' + html + '</div>').modal({\n                title: self.isEditMode ? $t('Edit Attribute') : $t('Insert Attribute'),\n                type: 'slide',\n                buttons: self.getButtonsConfig(self.isEditMode),\n\n                /**\n                 * @param {jQuery.Event} e\n                 * @param {Object} modal\n                 */\n                closed: function (e, modal) {\n                    modal.modal.remove();\n                }\n            });\n\n            this.selectedPlaceholder = selectedElement;\n\n            this.addNotAvailableMessage(selectedElement);\n\n            jQuery('#' + this.dialogWindowId).modal('openModal');\n        },\n\n        /**\n         * Add message to slide out that attribute is no longer available\n         *\n         * @param {Object} selectedElement\n         */\n        addNotAvailableMessage: function (selectedElement) {\n            var name,\n                msg,\n                attributePath,\n                $wrapper,\n                lostAttributeClass = 'magento-placeholder-error';\n\n            if (\n                this.isEditMode &&\n                typeof selectedElement !== 'undefined' &&\n                jQuery(selectedElement).hasClass(lostAttributeClass)\n            ) {\n\n                attributePath = AmastyProductTabsAttributePlugin.getElementAttributePath(selectedElement);\n                name = attributePath.split(':');\n                msg = $t('The attribute %1 is no longer available. Select a different attribute.')\n                    .replace('%1', name[1]);\n\n                jQuery('body').notification('clear')\n                    .notification('add', {\n                        error: true,\n                        message: msg,\n\n                        /**\n                         * @param {String} message\n                         */\n                        insertMethod: function (message) {\n                            $wrapper = jQuery('<div/>').html(message);\n\n                            jQuery('.modal-header .page-main-actions').after($wrapper);\n                        }\n                    });\n            }\n        },\n\n        /**\n         * Get selected attribute directive.\n         *\n         * @returns {*}\n         */\n        getSelectedCheckboxes: function () {\n            return jQuery('[name=\"attribute-select\"]:checked');\n        },\n\n        /**\n         * Get buttons configuration for slideout dialog.\n         *\n         * @param {Boolean} isEditMode\n         *\n         * @returns {Array}\n         */\n        getButtonsConfig: function (isEditMode) {\n\n            var self = this,\n                buttonsData;\n\n            buttonsData = [\n                {\n\n                    text: $t('Cancel'),\n                    'class': 'action-scalable cancel',\n\n                    /**\n                     * @param {jQuery.Event} event\n                     */\n                    click: function (event) {\n                        this.closeModal(event);\n                    }\n                },\n                {\n\n                    text: isEditMode ? $t('Save') : $t('Insert Attribute'),\n                    class: 'action-primary ' + (isEditMode ? '' : 'disabled'),\n                    attr: {\n                        'id': 'insert_attribute'\n                    },\n\n                    /**\n                     * Insert Attribute\n                     */\n                    click: function () {\n                        self.insertAttribute(self.getSelectedCheckboxes());\n                    }\n                }\n            ];\n\n            return buttonsData;\n        },\n\n        /**\n         * Prepare attributes row.\n         *\n         * @param {String} varValue\n         * @param {*} varLabel\n         * @return {String}\n         * @deprecated This method isn't relevant after ui changes\n         */\n        prepareAttributeRow: function (varValue, varLabel) {\n            var value = varValue.replace(/\"/g, '&quot;').replace(/'/g, '\\\\&#39;');\n\n            return '<a href=\"#\" onclick=\"' +\n                this.insertFunction +\n                '(\\'' +\n                value +\n                '\\');return false;\">' +\n                varLabel +\n                '</a>';\n        },\n\n        /**\n         * Insert attribute into WYSIWYG editor.\n         *\n         * @param selected\n         * @return {Object}\n         */\n        insertAttribute: function (selected) {\n            var windowId = this.dialogWindowId,\n                textareaElm;\n\n            jQuery('#' + windowId).modal('closeModal');\n            textareaElm = $(this.textareaElementId);\n            if (require.defined('wysiwygAdapter')) {\n                require(['wysiwygAdapter'], function (wysiwyg) {\n                    //to support switching between wysiwyg editors\n                    var wysiwygEditorFocused = wysiwyg && wysiwyg.activeEditor();\n\n                    if (wysiwygEditorFocused && wysiwyg.get(this.textareaElementId)) {\n                        if (jQuery(this.selectedPlaceholder).hasClass('magento-placeholder')) {\n                            wysiwyg.setCaretOnElement(this.selectedPlaceholder, 1);\n                        }\n                        selected.each(function () {\n                            wysiwyg.insertContent(attributeDirectiveGenerator.processConfig(this.value), false);\n                        });\n\n                        if (this.selectedPlaceholder\n                            && jQuery(this.selectedPlaceholder).hasClass('magento-placeholder')\n                        ) {\n                            this.selectedPlaceholder.remove();\n                        }\n                    } else if (textareaElm) {\n                        var shouldToggle = textareaElm.visible() === false;\n                        if (shouldToggle) {\n                            wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                        }\n\n                        this.insertAttributeViaTextarea(textareaElm, selected);\n                        if (shouldToggle) {\n                            wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                        }\n                    }\n                }.bind(this));\n            } else if (textareaElm) {\n                var shouldToggle = textareaElm.visible() === false;\n                if (shouldToggle) {\n                    wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                }\n                this.insertAttributeViaTextarea(textareaElm, selected);\n                if (shouldToggle) {\n                    wysiwygamcustomtabs_tabs_form_content.toggle.bind(wysiwygamcustomtabs_tabs_form_content)();\n                }\n            }\n\n            return this;\n        },\n\n        insertAttributeViaTextarea: function (textareaElm, selected) {\n            var scrollPos = textareaElm.scrollTop;\n            selected.each(function () {\n                updateElementAtCursor(textareaElm, attributeDirectiveGenerator.processConfig(this.value));\n            });\n            textareaElm.focus();\n            textareaElm.scrollTop = scrollPos;\n            jQuery(textareaElm).change();\n            textareaElm = null;\n        }\n    };\n\n    window.AmastyProductTabsAttributePlugin = {\n        editor: null,\n        attributes: null,\n        textareaId: null,\n\n        /**\n         * Bind editor.\n         *\n         * @param {*} editor\n         */\n        setEditor: function (editor) {\n            this.editor = editor;\n        },\n\n        /**\n         * Load attributes chooser.\n         *\n         * @param {String} url\n         * @param {*} textareaId\n         * @param {Object} selectedElement\n         *\n         * @return {Object}\n         */\n        loadChooser: function (url, textareaId, selectedElement) {\n            this.textareaId = textareaId;\n\n            new Ajax.Request(url, {\n                parameters: {},\n                onComplete: function (transport) {\n                    AmastyProductTabsAttribute.init(this.textareaId, 'AmastyProductTabsAttributePlugin.insertAttribute', this.editor);\n                    AmastyProductTabsAttribute.isEditMode = !!this.getElementAttributePath(selectedElement);\n                    this.attributesContent = transport.responseText;\n                    AmastyProductTabsAttribute.openDialogWindow(this.attributesContent, selectedElement);\n                    AmastyProductTabsAttribute.initUiGrid();\n                }.bind(this)\n            });\n\n            return this;\n        },\n\n        /**\n         * Open attributes chooser window.\n         *\n         * @param {*} attributes\n         * @deprecated This method isn't relevant after ui changes\n         */\n        openChooser: function (attributes) {\n            AmastyProductTabsAttribute.openAttributeChooser(attributes);\n        },\n\n        /**\n         * Insert Attribute.\n         *\n         * @param {*} value\n         *\n         * @return {Object}\n         */\n        insertAttribute: function (value) {\n            if (this.textareaId) {\n                AmastyProductTabsAttribute.init(this.textareaId);\n                AmastyProductTabsAttribute.insertAttribute(value);\n            } else {\n                AmastyProductTabsAttribute.closeDialogWindow();\n                AmastyProductTabsAttribute.insertAttribute(value);\n            }\n\n            return this;\n        },\n\n        /**\n         * Get element Attribute path.\n         *\n         * @param {Object} element\n         * @returns {String}\n         */\n        getElementAttributePath: function (element) {\n            var type, code;\n\n            if (!element || !jQuery(element).hasClass('amcustomtabs-attribute')) {\n                return '';\n            }\n            code = Base64.idDecode(element.getAttribute('id'));\n\n            return code;\n        }\n    };\n});\n","Amasty_CustomTabs/js/form/element/type.js":"define([\n    'Magento_Ui/js/form/element/select'\n], function (select) {\n    return select.extend({\n        getOption: function () {\n            var option = this._super(this.source.data.type),\n                newOption = {\n                    'value': option.value,\n                    'label': option.label\n                };\n            if (this.source.data.type == 2) {\n                newOption.label += ' ' + this.source.data.module_name;\n            }\n\n            return newOption;\n        }\n    });\n});\n","WolfSellers_AmastyLabel/js/initLabel-mixin.js":"define([\n    'jquery',\n    'jquery/ui'\n], function (\n    $\n) {\n   'use strict';\n   var initLabelWidgetMixin = {\n       /**\n        * Exec Amasty Label widget\n        * @public\n        * @returns {void}\n        */\n       execLabel: function () {\n           if (this._isFromAmastySearch()) {\n               return; // No renderizamos el label si viene de Amasty_Xsearch\n           }\n           this.element.amShowLabel(this.options.config);\n       },\n\n       /**\n        * Verificar si el elemento est\u00e1 dentro de un bloque de Amasty_Xsearch\n        * @private\n        * @returns {Boolean}\n        */\n       _isFromAmastySearch: function () {\n           return this.element.closest('.amsearch-products-section').length > 0;\n       }\n   };\n\n    return function (initLabelWidget) {\n        $.widget('mage.amInitLabel', initLabelWidget, initLabelWidgetMixin);\n        return $.mage.amInitLabel;\n    };\n\n});\n","WolfSellers_SkinCare/js/label-mixin.js":"define([\n    'jquery',\n    'jquery/ui'\n], function ($) {\n    'use strict';\n\n    var labelWidgetMixin = {\n        setLabelPosition: function () {\n            var className = 'amlabel-position-' + this.options.position\n                    + '-' + this.options.product+ '-' + this.options.mode + this.getWidgetLabelCode(),\n                wrapper = this.parent.find('.' + className);\n\n            if (wrapper.length) {\n                var labelOrderMatch = false;\n\n                $.each(wrapper.find('.amasty-label-container'), function (index, prevLabel) {\n                    var nextLabel = $(prevLabel).next(),\n                        currentOrder = parseInt(this.options.order);\n                    if (typeof $(prevLabel).data('mageAmShowLabel') !== \"undefined\"){\n                        var prevOrder = parseInt($(prevLabel).data('mageAmShowLabel').options.order),\n                            nextOrder = null;\n\n                        if (nextLabel.length) {\n                            nextOrder = parseInt(nextLabel.data('mageAmShowLabel').options.order);\n                        }\n\n                        if (currentOrder >= prevOrder && (!nextOrder || currentOrder <= nextOrder)) {\n                            labelOrderMatch = true;\n                            $(prevLabel).after(this.element);\n                            return false;\n                        }\n                    }\n                }.bind(this));\n\n                if (!labelOrderMatch) {\n                    wrapper.prepend(this.element);\n                }\n            } else {\n                var parent = this.element.parent();\n                if (parent.hasClass(this.positionWrapper)) {\n                    parent.parent().append(this.element);\n                }\n\n                this.element.wrap('<div class=\"' + className + ' ' + this.positionWrapper + '\"></div>');\n                wrapper = this.element.parent();\n            }\n\n            if (this.options.alignment === 1) {\n                wrapper.children(':not(:first-child)').each(function (index, element) {\n                    this.setStyleIfNotExist(\n                        $(element),\n                        {\n                            'marginLeft': this.options.margin + 'px'\n                        }\n                    );\n                }.bind(this));\n\n            } else {\n                wrapper.children(':not(:first-child)').each(function (index, element) {\n                    this.setStyleIfNotExist(\n                        $(element),\n                        {\n                            'marginTop': this.options.margin + 'px'\n                        }\n                    );\n                }.bind(this));\n            }\n\n            //clear styles before changing\n            wrapper.css({\n                'top'  : \"\",\n                'left' : \"\",\n                'right' : \"\",\n                'bottom' : \"\",\n                'margin-top' : \"\",\n                'margin-bottom' : \"\",\n                'margin-left' : \"\",\n                'margin-right' : \"\"\n            });\n\n            switch (this.options.position) {\n                case 'top-left':\n                    wrapper.css({\n                        'top'  : 0,\n                        'left' : 0\n                    });\n                    break;\n                case 'top-center':\n                    wrapper.css({\n                        'top': 0,\n                        'left': 0,\n                        'right': 0,\n                        'margin-left': 'auto',\n                        'margin-right': 'auto'\n                    });\n                    break;\n                case 'top-right':\n                    wrapper.css({\n                        'top'   : 0,\n                        'right' : 0,\n                        'text-align' : 'right'\n                    });\n                    break;\n\n                case 'middle-left':\n                    wrapper.css({\n                        'left' : 0,\n                        'top'   : 0,\n                        'bottom'  : 0,\n                        'margin-top': 'auto',\n                        'margin-bottom': 'auto'\n                    });\n                    break;\n                case 'middle-center':\n                    wrapper.css({\n                        'top'   : 0,\n                        'bottom'  : 0,\n                        'margin-top': 'auto',\n                        'margin-bottom': 'auto',\n                        'left': 0,\n                        'right': 0,\n                        'margin-left': 'auto',\n                        'margin-right': 'auto'\n                    });\n                    break;\n                case 'middle-right':\n                    wrapper.css({\n                        'top'   : 0,\n                        'bottom'  : 0,\n                        'margin-top': 'auto',\n                        'margin-bottom': 'auto',\n                        'right' : 0,\n                        'text-align' : 'right'\n                    });\n                    break;\n\n                case 'bottom-left':\n                    wrapper.css({\n                        'bottom'  : 0,\n                        'left'    : 0\n                    });\n                    break;\n                case 'bottom-center':\n                    wrapper.css({\n                        'bottom': 0,\n                        'left': 0,\n                        'right': 0,\n                        'margin-left': 'auto',\n                        'margin-right': 'auto'\n                    });\n                    break;\n                case 'bottom-right':\n                    wrapper.css({\n                        'bottom'   : 0,\n                        'right'    : 0,\n                        'text-align' : 'right'\n                    });\n                    break;\n            }\n        },\n    };\n    return function (labelWidget) {\n        $.widget('mage.amShowLabel', labelWidget, labelWidgetMixin);\n        return $.mage.amShowLabel;\n    };\n});\n","Magento_AsynchronousOperations/js/insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form',\n    'uiRegistry'\n], function (Insert, registry) {\n    'use strict';\n\n    return Insert.extend({\n        defaults: {\n            modalProvider: '${ $.parentName }',\n            titlePrefix: '',\n            imports: {\n                changeModalTitle: '${ $.modalProvider }:state'\n            },\n            listens: {\n                responseData: 'afterRetry'\n            },\n            modules: {\n                modal: '${ $.modalProvider }',\n                notificationListing: '${ $.columnsProvider }'\n            }\n        },\n\n        /** @inheritdoc */\n        initConfig: function () {\n            var modalTitleProvider;\n\n            this._super();\n            modalTitleProvider = this.modalTitleProvider.split(':');\n            this.modalTitleTarget = modalTitleProvider[0];\n            this.modalTitlePath = modalTitleProvider[1];\n        },\n\n        /**\n         * Change modal title.\n         *\n         * @param {Boolean} change\n         */\n        changeModalTitle: function (change) {\n            if (change) {\n                registry.get(this.modalTitleTarget, function (target) {\n                    this.modal().setTitle(this.titlePrefix + target.get(this.modalTitlePath));\n                }.bind(this));\n            } else {\n                this.modal().setTitle('');\n            }\n        },\n\n        /**\n         * Action after retry operation.\n         *\n         * @param {Object} data\n         */\n        afterRetry: function (data) {\n            if (!data.error) {\n                this.modal().closeModal();\n                this.notificationListing().reload();\n            }\n        }\n    });\n});\n","Magento_AsynchronousOperations/js/form/error.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        /** @inheritdoc */\n        onUpdate: function () {\n            this.bubble('update', this.hasChanged());\n        }\n    });\n});\n","Magento_AsynchronousOperations/js/grid/listing.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_AdminNotification/js/grid/listing',\n    'Magento_Ui/js/modal/alert',\n    'mage/translate',\n    'underscore',\n    'jquery'\n], function (Listing, uiAlert, $t, _, $) {\n    'use strict';\n\n    return Listing.extend({\n        defaults: {\n            isAllowed: true,\n            ajaxSettings: {\n                method: 'POST',\n                data: {},\n                url: '${ $.dismissUrl }'\n            }\n        },\n\n        /** @inheritdoc */\n        initialize: function () {\n            _.bindAll(this, 'reload', 'onError');\n\n            return this._super();\n        },\n\n        /**\n         * Dismiss all items.\n         */\n        dismissAll: function () {\n            var toDismiss = [];\n\n            _.each(this.rows, function (row) {\n                if (row.dismiss) {\n                    toDismiss.push(row.uuid);\n                }\n            });\n            toDismiss.length && this.dismiss(toDismiss);\n        },\n\n        /**\n         * Dismiss action.\n         *\n         * @param {Array} items\n         */\n        dismiss: function (items) {\n            var config = _.extend({}, this.ajaxSettings);\n\n            config.data.uuid = items;\n            this.showLoader();\n\n            $.ajax(config)\n                .done(this.reload)\n                .fail(this.onError);\n        },\n\n        /**\n         * Success callback for dismiss request.\n         */\n        reload: function () {\n            this.source.reload({\n                refresh: true\n            });\n        },\n\n        /**\n         * Error callback for dismiss request.\n         *\n         * @param {Object} xhr\n         */\n        onError: function (xhr) {\n            this.hideLoader();\n\n            if (xhr.statusText === 'abort') {\n                return;\n            }\n\n            uiAlert({\n                content: $t('Something went wrong.')\n            });\n        }\n    });\n});\n","Magento_Backend/js/delete-with-confirm.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Backend/js/validate-store'\n], function ($, validateStore) {\n    'use strict';\n\n    $.widget('mage.deleteWithConfirm', validateStore, {});\n\n    return $.mage.deleteWithConfirm;\n});\n","Magento_Backend/js/media-uploader.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\n\n/*global byteConvert*/\ndefine([\n    'jquery',\n    'mage/template',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/form/element/file-uploader',\n    'mage/translate',\n    'jquery/file-uploader'\n], function ($, mageTemplate, alert, FileUploader) {\n    'use strict';\n\n    var fileUploader = new FileUploader({\n        dataScope: '',\n        isMultipleFiles: true\n    });\n\n    fileUploader.initUploader();\n\n    $.widget('mage.mediaUploader', {\n\n        /**\n         *\n         * @private\n         */\n        _create: function () {\n            var self = this,\n                progressTmpl = mageTemplate('[data-template=\"uploader\"]'),\n                isResizeEnabled = this.options.isResizeEnabled,\n                resizeConfiguration = {\n                    action: 'resizeImage',\n                    maxWidth: this.options.maxWidth,\n                    maxHeight: this.options.maxHeight\n                };\n\n            if (!isResizeEnabled) {\n                resizeConfiguration = {\n                    action: 'resizeImage'\n                };\n            }\n\n            this.element.find('input[type=file]').fileupload({\n                dataType: 'json',\n                formData: {\n                    'form_key': window.FORM_KEY\n                },\n                dropZone: '[data-tab-panel=image-management]',\n                sequentialUploads: true,\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n                maxFileSize: this.options.maxFileSize,\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                add: function (e, data) {\n                    var fileSize,\n                        tmpl;\n\n                    $.each(data.files, function (index, file) {\n                        fileSize = typeof file.size == 'undefined' ?\n                            $.mage.__('We could not detect a size.') :\n                            byteConvert(file.size);\n\n                        data.fileId = Math.random().toString(33).substr(2, 18);\n\n                        tmpl = progressTmpl({\n                            data: {\n                                name: file.name,\n                                size: fileSize,\n                                id: data.fileId\n                            }\n                        });\n\n                        $(tmpl).appendTo(self.element);\n                    });\n\n                    $(this).fileupload('process', data).done(function () {\n                        data.submit();\n                    });\n                },\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                done: function (e, data) {\n                    if (data.result && !data.result.error) {\n                        self.element.trigger('addItem', data.result);\n                    } else {\n                        fileUploader.aggregateError(data.files[0].name, data.result.error);\n                    }\n\n                    self.element.find('#' + data.fileId).remove();\n                },\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                progress: function (e, data) {\n                    var progress = parseInt(data.loaded / data.total * 100, 10),\n                        progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\n\n                    self.element.find(progressSelector).css('width', progress + '%');\n                },\n\n                /**\n                 * @param {Object} e\n                 * @param {Object} data\n                 */\n                fail: function (e, data) {\n                    var progressSelector = '#' + data.fileId;\n\n                    self.element.find(progressSelector).removeClass('upload-progress').addClass('upload-failure')\n                        .delay(2000)\n                        .hide('highlight')\n                        .remove();\n                },\n\n                stop: fileUploader.uploaderConfig.stop\n            });\n\n            this.element.find('input[type=file]').fileupload('option', {\n                processQueue: [{\n                    action: 'loadImage',\n                    fileTypes: /^image\\/(gif|jpeg|png)$/\n                },\n                resizeConfiguration,\n                {\n                    action: 'saveImage'\n                }]\n            });\n        }\n    });\n\n    return $.mage.mediaUploader;\n});\n","Magento_Backend/js/save-with-confirm.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Backend/js/validate-store'\n], function ($, validateStore) {\n    'use strict';\n\n    $.widget('mage.saveWithConfirm', validateStore, {\n\n        /**\n         * Check is it need to show confirmation popup\n         *\n         * @returns {Boolean}\n         */\n        _needConfirm: function () {\n\n            var storeData = this.settings.storeData,\n\n            /* edit store view*/\n                storeViewEdit = $('[name=\"store[store_id]\"]').length,\n                groupId = $('[name=\"store[group_id]\"]').val(),\n                isNewStoreView = !$('[name=\"store[store_id]\"]').val(),\n\n            /* edit store */\n                storeEdit = $('[name=\"group[group_id]\"]').length,\n                storeId = $('[name=\"group[group_id]\"]').val(),\n                rootCategoryId = $('[name=\"group[root_category_id]\"]').val(),\n                defaultStoreView = $('[name=\"group[default_store_id]\"]').val(),\n\n            /* edit website */\n                websiteEdit = $('[name=\"website[website_id]\"]').length,\n                defaultStore = $('[name=\"website[default_group_id]\"]').val(),\n\n            /* conditions */\n                storeViewUpdated = storeViewEdit && (isNewStoreView || storeData['group_id'] !== groupId),\n                storeUpdated = storeEdit && storeId &&\n                    (rootCategoryId !== null  && storeData['root_category_id'] !== rootCategoryId ||\n                    defaultStoreView !== null && storeData['default_store_id'] !== defaultStoreView),\n                websiteUpdated = websiteEdit && defaultStore !== null && storeData['default_group_id'] !== defaultStore;\n\n            return storeViewUpdated || storeUpdated || websiteUpdated;\n        }\n    });\n\n    return $.mage.saveWithConfirm;\n});\n","Magento_Backend/js/store-switcher.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    /**\n     * @param {Object} storeSwitchConfig\n     */\n    return function (storeSwitchConfig) {\n        var scopeSwitcherHandler;\n\n        (function () {\n            var storesList = $('[data-role=stores-list]');\n\n            storesList.on('click', '[data-value]', function (event) {\n                var val = $(event.target).data('value'),\n                    role = $(event.target).data('role'),\n                    switcher = $('[data-role=' + role + ']');\n\n                event.preventDefault();\n\n                if (!switcher.val() || val !== switcher.val()) {\n\n                    /* Set the value & trigger event */\n                    switcher.val(val).trigger('change');\n                }\n            });\n        })($);\n\n        /**\n         * Switch store scope\n         *\n         * @param {Object} obj\n         * @return void\n         */\n        function switchScope(obj) {\n            var switcher = $(obj),\n                scopeId = switcher.val(),\n                scopeParams = '',\n                switcherParams = {};\n\n            if (scopeId) {\n                scopeParams = switcher.data('param') + '/' + scopeId + '/';\n            }\n\n            if (obj.switchParams) {\n                scopeParams += obj.switchParams;\n            }\n\n            /**\n             * Reload function for switcher\n             */\n            function reload() {\n                var url;\n\n                if (!storeSwitchConfig.isUsingIframe) {\n\n                    if (storeSwitchConfig.switchUrl && storeSwitchConfig.switchUrl.length > 0) {\n                        url = storeSwitchConfig.switchUrl + scopeParams;\n\n                        /* eslint-disable no-undef */\n                        setLocation(url);\n                    }\n\n                } else {\n                    $('#preview_selected_store').val(scopeId);\n                    $('#preview_form').trigger('submit');\n\n                    $('.store-switcher .dropdown-menu li a').each(function () {\n                        var $this = $(this);\n\n                        if ($this.data('role') === 'store-view-id' && $this.data('value') === scopeId) {\n                            $('#store-change-button').html($this.text());\n                        }\n                    });\n\n                    $('#store-change-button').trigger('click');\n                }\n            }\n\n            if (typeof scopeSwitcherHandler !== 'undefined') {\n                switcherParams = {\n                    scopeId: scopeId,\n                    scopeParams: scopeParams,\n                    useConfirm: storeSwitchConfig.useConfirm\n                };\n\n                scopeSwitcherHandler(switcherParams);\n            } else if (storeSwitchConfig.useConfirm) {\n                require([\n                    'Magento_Ui/js/modal/confirm',\n                    'mage/translate'\n                ], function (confirm, $t) {\n                    confirm({\n                        content: $t('Please confirm scope switching. All data that hasn\\'t been saved will be lost.'),\n                        actions: {\n\n                            /**\n                             * Confirm action\n                             */\n                            confirm: function () {\n                                reload();\n                            },\n\n                            /**\n                             * Cancel action\n                             */\n                            cancel: function () {\n                                obj.value = storeSwitchConfig.storeId ? storeSwitchConfig.storeId : '';\n                            }\n                        }\n                    });\n                });\n            } else {\n                reload();\n            }\n        }\n\n        window.scopeSwitcherHandler = scopeSwitcherHandler;\n        window.switchScope = switchScope;\n    };\n});\n","Magento_Backend/js/translate.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* eslint-disable strict */\ndefine([\n    'jquery',\n    'mage/mage'\n], function ($) {\n    $.extend(true, $, {\n        mage: {\n            translate: (function () {\n                /**\n                 * Key-value translations storage\n                 * @type {Object}\n                 * @private\n                 */\n                var _data = {};\n\n                /**\n                 * Add new translation (two string parameters) or several translations (object)\n                 */\n                this.add = function () {\n                    if (arguments.length > 1) {\n                        _data[arguments[0]] = arguments[1];\n                    } else if (typeof arguments[0] === 'object') {\n                        $.extend(_data, arguments[0]);\n                    }\n                };\n\n                /**\n                 * Make a translation with parsing (to handle case when _data represents tuple)\n                 * @param {String} text\n                 * @return {String}\n                 */\n                this.translate = function (text) {\n                    return typeof _data[text] === 'string' ? _data[text] : text;\n                };\n\n                return this;\n            }())\n        }\n    });\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\n\n    return $.mage.__;\n});\n","Magento_Backend/js/validate-store.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'jquery/ui',\n    'mage/dataPost',\n    'mage/backend/validation',\n    'Magento_Ui/js/modal/confirm'\n], function ($, jqueryUi, dataPost, validation, modalConfirm) {\n    'use strict';\n\n    $.widget('mage.storeValidation', {\n\n        /**\n         * Validation creation\n         * @protected\n         */\n        _create: function () {\n            var form = this.element[0],\n                validator = $.data(form, 'validator');\n\n            if (validator && validator.settings) {\n                validator.settings.submitHandler = this._saveHandler;\n                validator.settings.confirmCallback = this._needConfirm;\n                $.extend(validator.settings, this.options);\n                $.data(form, 'validator', validator);\n            }\n        },\n\n        /**\n         * Check is it need to show confirmation popup\n         *\n         * @returns {Boolean}\n         */\n        _needConfirm: function () {\n            return true;\n        },\n\n        /**\n         * Save form with confirmation if needed\n         *\n         * @param {Object} form\n         * @private\n         */\n        _saveHandler: function (form) {\n            var formData = {},\n                requestData = {},\n                options = $.data(form, 'validator').settings;\n\n            if ($(form).validation('isValid')) {\n                $.each($(form).serializeArray(), function () {\n                    formData[this.name] = this.value || '';\n                });\n                requestData = {\n                    action: $(form).attr('action'),\n                    data: formData\n                };\n\n                if (options.confirmCallback.call(this)) {\n                    modalConfirm({\n                        title: $.mage.__('Warning message'),\n                        content: $.mage.__('This operation can take a long time'),\n                        actions: {\n                            /**\n                             * 'Confirm' action handler.\n                             */\n                            confirm: function () {\n                                $('body').trigger('processStart');\n                                dataPost().postData(requestData);\n                            }\n                        }\n                    });\n                } else {\n                    dataPost().postData(requestData);\n                }\n            }\n        }\n    });\n\n    return $.mage.storeValidation;\n});\n","Magento_Backend/js/bootstrap/editor.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Variable/variables',\n    'mage/adminhtml/browser'\n]);\n","Magento_Backend/js/dashboard/chart.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*global FORM_KEY*/\ndefine([\n    'jquery',\n    'chartJs',\n    'jquery-ui-modules/widget',\n    'chartjs/chartjs-adapter-moment',\n    'moment'\n], function ($, Chart) {\n    'use strict';\n\n    $.widget('mage.dashboardChart', {\n        options: {\n            updateUrl: '',\n            periodSelect: null,\n            periodUnits: [],\n            precision: 0,\n            type: ''\n        },\n        chart: null,\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.createChart();\n\n            if (this.options.periodSelect) {\n                $(document).on('change', this.options.periodSelect, this.refreshChartData.bind(this));\n\n                this.period = $(this.options.periodSelect).val();\n            }\n        },\n\n        /**\n         * @public\n         */\n        createChart: function () {\n            this.chart = new Chart(this.element, this.getChartSettings());\n            this.refreshChartData();\n        },\n\n        /**\n         * @public\n         */\n        refreshChartData: function () {\n            var data = {\n                'form_key': FORM_KEY\n            };\n\n            if (this.options.periodSelect) {\n                this.period = data.period = $(this.options.periodSelect).val();\n            }\n\n            $.ajax({\n                url: this.options.updateUrl,\n                showLoader: true,\n                data: data,\n                dataType: 'json',\n                type: 'POST',\n                success: this.updateChart.bind(this)\n            });\n        },\n\n        /**\n         * @public\n         * @param {Object} response\n         */\n        updateChart: function (response) {\n            $(this.element).toggle(response.data.length > 0);\n            $(this.element).next('.dashboard-diagram-nodata').toggle(response.data.length === 0);\n\n            this.chart.options.scales.xAxis.time.unit = this.options.periodUnits[this.period] ?\n                this.options.periodUnits[this.period] : 'hour';\n            this.chart.data.datasets[0].data = response.data;\n            this.chart.data.datasets[0].label = response.label;\n            this.chart.update();\n        },\n\n        /**\n         * @returns {Object} chart object configuration\n         */\n        getChartSettings: function () {\n            return {\n                type: 'bar',\n                data: {\n                    datasets: [{\n                        yAxisID: 'yAxis',\n                        xAxisID: 'xAxis',\n                        data: [],\n                        backgroundColor: '#f1d4b3',\n                        borderColor: '#eb5202',\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    legend: {\n                        onClick: this.handleChartLegendClick,\n                        position: 'bottom'\n                    },\n                    scales: {\n                        xAxis: {\n                            offset: true,\n                            type: 'time',\n                            ticks: {\n                                source: 'data'\n                            }\n                        },\n                        yAxis: {\n                            ticks: {\n                                beginAtZero: true,\n                                precision: this.options.precision\n                            }\n                        }\n                    }\n                }\n            };\n        },\n\n        /**\n         * @public\n         */\n        handleChartLegendClick: function () {\n            // don't hide dataset on clicking into legend item\n        }\n    });\n\n    return $.mage.dashboardChart;\n});\n","Magento_Backend/js/dashboard/totals.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/*global FORM_KEY*/\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.dashboardTotals', {\n        options: {\n            updateUrl: '',\n            periodSelect: null\n        },\n        elementId: null,\n\n        /**\n         * @private\n         */\n        _create: function () {\n            this.elementId = $(this.element).attr('id');\n\n            if (this.options.periodSelect) {\n                $(document).on('change', this.options.periodSelect, $.proxy(function () {\n                    this.refreshTotals();\n                }, this));\n            }\n        },\n\n        /**\n         * @public\n         */\n        refreshTotals: function () {\n            var periodParam = '';\n\n            if (this.options.periodSelect && $(this.options.periodSelect).val()) {\n                periodParam = 'period/' + $(this.options.periodSelect).val() + '/';\n            }\n\n            $.ajax({\n                url: this.options.updateUrl + periodParam,\n                showLoader: true,\n                data: {\n                    'form_key': FORM_KEY\n                },\n                dataType: 'html',\n                type: 'POST',\n                success: $.proxy(function (response) {\n                    $('#' + this.elementId).replaceWith(response);\n                }, this)\n            });\n        }\n    });\n\n    return $.mage.dashboardTotals;\n});\n","Magento_Sales/js/bootstrap/order-create-index.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Sales/order/create/giftmessage'\n]);\n","Magento_Sales/js/bootstrap/order-post-action.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Sales/order/view/post-wrapper'\n]);\n","Magento_Sales/js/grid/tree-massactions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'mageUtils',\n    'Magento_Ui/js/grid/tree-massactions'\n], function (_, utils, Massactions) {\n    'use strict';\n\n    return Massactions.extend({\n        /**\n         * Overwrite Default action callback.\n         * Sends selections data with ids\n         * via POST request.\n         *\n         * @param {Object} action - Action data.\n         * @param {Object} data - Selections data.\n         */\n        defaultCallback: function (action, data) {\n            var itemsType = 'selected',\n                selections = {};\n\n            selections[itemsType] = data[itemsType];\n            _.extend(selections, data.params || {});\n            utils.submit({\n                url: action.url,\n                data: selections\n            });\n        }\n    });\n});\n","Magento_Sales/order/giftoptions_tooltip.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'prototype'\n], function () {\n    'use strict';\n\n    var GiftOptionsTooltip = Class.create();\n\n    GiftOptionsTooltip.prototype = {\n        _tooltipLines: [],\n        _tooltipWindow: null,\n        _tooltipWindowContent: null,\n        _targetLinks: [],\n        _eventMouseOver: null,\n        _eventMouseOut: null,\n        _styleOptions: null,\n        _tooltipContentLoaderFunction: null,\n\n        /**\n         * Initialize tooltip object\n         */\n        initialize: function () {\n            var options = Object.extend({\n                'delta_x': 30,\n                'delta_y': 0,\n                zindex: 1000\n            });\n\n            this._styleOptions = options;\n            this._eventMouseOver = this.showTooltip.bindAsEventListener(this);\n            this._eventMouseOut = this.hideTooltip.bindAsEventListener(this);\n        },\n\n        /**\n         * Set gift options tooltip window\n         *\n         * @param {String} windowId\n         * @param {String} contentId\n         *\n         * @return boolean success\n         */\n        setTooltipWindow: function (windowId, contentId) {\n            if (!$(windowId) || !$(contentId)) {\n                return false;\n            }\n            this._tooltipWindow = $(windowId);\n            this._tooltipWindowContent = $(contentId);\n            $(document.body).insert({\n                bottom: this._tooltipWindow\n            });\n            this.hideTooltip();\n\n            return true;\n        },\n\n        /**\n         * Add tooltip to specified link\n         *\n         * @param {String} linkId\n         * @param {String} itemId - identifier of the item related to link\n         *\n         * @return boolean success\n         */\n        addTargetLink: function (linkId, itemId) {\n            if ($(linkId)) {\n                this._targetLinks[linkId] = [];\n                this._targetLinks[linkId].object = $(linkId);\n                this._targetLinks[linkId].itemId = itemId;\n                this._registerEvents(this._targetLinks[linkId].object);\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Detach event listeners from target links when tooltip is destroyed\n         */\n        destroy: function () {\n            var linkId;\n\n            for (linkId in this._targetLinks) { //eslint-disable-line guard-for-in\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseover', this._eventMouseOver);\n                Event.stopObserving(this._targetLinks[linkId].object, 'mouseout', this._eventMouseOut);\n            }\n        },\n\n        /**\n         *  Register event listeners\n         *\n         *  @param {HTMLElement} element\n         */\n        _registerEvents: function (element) {\n            Event.observe(element, 'mouseover', this._eventMouseOver);\n            Event.observe(element, 'mouseout', this._eventMouseOut);\n        },\n\n        /**\n         * Move tooltip to mouse position\n         *\n         * @param {Prototype.Event} event\n         */\n        _moveTooltip: function (event) {\n            var mouseX, mouseY;\n\n            Event.stop(event);\n            mouseX = Event.pointerX(event);\n            mouseY = Event.pointerY(event);\n\n            this.setStyles(mouseX, mouseY);\n        },\n\n        /**\n         * Show tooltip\n         *\n         * @param {Object} event\n         *\n         * @return boolean success\n         */\n        showTooltip: function (event) {\n            var link, itemId, tooltipContent;\n\n            Event.stop(event);\n\n            if (this._tooltipWindow) {\n                link = Event.element(event);\n                itemId = this._targetLinks[link.id].itemId;\n                tooltipContent = '';\n\n                if (Object.isFunction(this._tooltipContentLoaderFunction)) {\n                    tooltipContent = this._tooltipContentLoaderFunction(itemId);\n                }\n\n                if (tooltipContent != '') { //eslint-disable-line eqeqeq\n                    this._updateTooltipWindowContent(tooltipContent);\n                    this._moveTooltip(event);\n                    new Element.show(this._tooltipWindow);\n\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Set tooltip window styles\n         *\n         * @param {Number} x\n         * @param {Number} y\n         */\n        setStyles: function (x, y) {\n            Element.setStyle(this._tooltipWindow, {\n                position: 'absolute',\n                top: y + this._styleOptions['delta_y'] + 'px',\n                left: x + this._styleOptions['delta_x'] + 'px',\n                zindex: this._styleOptions.zindex\n            });\n        },\n\n        /**\n         * Hide tooltip\n         */\n        hideTooltip: function () {\n            if (this._tooltipWindow) {\n                new Element.hide(this._tooltipWindow);\n            }\n        },\n\n        /**\n         * Set gift options tooltip content loader function\n         * This function should accept at least one parameter that will serve as an item ID\n         *\n         * @param {Function} loaderFunction - loader function\n         */\n        setTooltipContentLoaderFunction: function (loaderFunction) {\n            this._tooltipContentLoaderFunction = loaderFunction;\n        },\n\n        /**\n         * Update tooltip window content\n         *\n         * @param {String} content\n         */\n        _updateTooltipWindowContent: function (content) {\n            this._tooltipWindowContent.update(content);\n        }\n    };\n\n    window.giftOptionsTooltip = new GiftOptionsTooltip();\n});\n","Magento_Sales/order/create/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global AdminOrder */\ndefine([\n    'jquery',\n    'Magento_Sales/order/create/scripts'\n], function (jQuery) {\n    'use strict';\n\n    var $el = jQuery('#edit_form'),\n        config,\n        baseUrl,\n        order,\n        payment;\n\n    if (!$el.length || !$el.data('order-config')) {\n        return;\n    }\n\n    config = $el.data('order-config');\n    baseUrl = $el.data('load-base-url');\n\n    order = new AdminOrder(config);\n    order.setLoadBaseUrl(baseUrl);\n\n    payment = {\n        switchMethod: order.switchPaymentMethod.bind(order)\n    };\n\n    window.order = order;\n    window.payment = payment;\n});\n","Magento_Sales/order/create/giftmessage.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/********************* GIFT OPTIONS POPUP ***********************/\n/********************* GIFT OPTIONS SET ***********************/\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'mage/translate',\n    'mage/validation',\n    'prototype'\n], function (jQuery) {\n\n    window.giftMessagesController = {\n        toogleRequired: function (source, objects) {\n            if (!$(source).value.blank()) {\n                objects.each(function (item) {\n                    $(item).addClassName('required-entry');\n                    var label = findFieldLabel($(item));\n\n                    if (label) {\n                        var span = label.down('span');\n\n                        if (!span) {\n                            Element.insert(label, {\n                                bottom: '&nbsp;<span class=\"required\">*</span>'\n                            });\n                        }\n                    }\n                });\n            } else {\n                objects.each(function (item) {\n                    if ($(source).formObj && $(source).formObj.validator) {\n                        $(source).formObj.validator.reset(item);\n                    }\n                    $(item).removeClassName('required-entry');\n                    var label = findFieldLabel($(item));\n\n                    if (label) {\n                        var span = label.down('span');\n\n                        if (span) {\n                            Element.remove(span);\n                        }\n                    }\n                    // Hide validation advices if exist\n                    if ($(item) && $(item).advices) {\n                        $(item).advices.each(function (pair) {\n                            if (pair.value != null) pair.value.hide();\n                        });\n                    }\n                });\n            }\n        },\n        toogleGiftMessage: function (container) {\n            if (!$(container).toogleGiftMessage) {\n                $(container).toogleGiftMessage = true;\n                $(this.getFieldId(container, 'edit')).show();\n                $(container).down('.action-link').addClassName('open');\n                $(container).down('.default-text').hide();\n                $(container).down('.close-text').show();\n            } else {\n                $(container).toogleGiftMessage = false;\n                $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\n                var form = jQuery('#' + this.getFieldId(container, 'form'));\n\n                jQuery('#' + this.getFieldId(container, 'form')).validate({\n                    errorClass: 'mage-error'\n                });\n\n                if (!form.valid()) {\n                    return false;\n                }\n\n                new Ajax.Request($(this.getFieldId(container, 'form')).action, {\n                    parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\n                    loaderArea: container,\n                    onComplete: function (transport) {\n\n                        $(container).down('.action-link').removeClassName('open');\n                        $(container).down('.default-text').show();\n                        $(container).down('.close-text').hide();\n                        $(this.getFieldId(container, 'edit')).hide();\n\n                        if (transport.responseText.match(/YES/g)) {\n                            $(container).down('.default-text').down('.edit').show();\n                            $(container).down('.default-text').down('.add').hide();\n                        } else {\n                            $(container).down('.default-text').down('.add').show();\n                            $(container).down('.default-text').down('.edit').hide();\n                        }\n\n                    }.bind(this)\n                });\n            }\n\n            return false;\n        },\n        saveGiftMessage: function (container) {\n            $(this.getFieldId(container, 'message')).formObj = $(this.getFieldId(container, 'form'));\n\n            var form = jQuery('#' + this.getFieldId(container, 'form'));\n\n            form.validate({\n                errorClass: 'mage-error'\n            });\n\n            if (!form.valid()) {\n                return;\n            }\n\n            new Ajax.Request($(this.getFieldId(container, 'form')).action, {\n                parameters: Form.serialize($(this.getFieldId(container, 'form')), true),\n                loaderArea: container,\n                onSuccess: function (response) {\n                    var message = '<div class=\"messages\"><div class=\"message message-success success\">' +\n                        response.responseText +\n                        '<div data-ui-id=\"messages-message-success\"></div></div></div>';\n\n                    jQuery('#messages').html(message);\n                    jQuery(document).scrollTop(0);\n                }\n            });\n        },\n        getFieldId: function (container, name) {\n            return container + '_' + name;\n        }\n    };\n\n    function findFieldLabel(field) {\n        var tdField = $(field).up('td');\n\n        if (tdField) {\n            var tdLabel = tdField.previous('td');\n\n            if (tdLabel) {\n                var label = tdLabel.down('label');\n\n                if (label) {\n                    return label;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    window.findFieldLabel = findFieldLabel;\n\n    window.GiftOptionsPopup = Class.create();\n    GiftOptionsPopup.prototype = {\n        //giftOptionsWindowMask: null,\n        giftOptionsWindow: null,\n\n        initialize: function () {\n            $$('.action-link').each(function (el) {\n                Event.observe(el, 'click', this.showItemGiftOptions.bind(this));\n            }, this);\n\n            // Move gift options popup to start of body, because soon it will contain FORM tag that can break DOM layout if within other FORM\n            var oldPopupContainer = $('gift_options_configure');\n\n            if (oldPopupContainer) {\n                oldPopupContainer.remove();\n            }\n\n            var newPopupContainer = $('gift_options_configure_new');\n\n            $(document.body).insert({\n                top: newPopupContainer\n            });\n            newPopupContainer.id = 'gift_options_configure';\n\n            // Put controls container inside a FORM tag so we can use Validator\n            var form = new Element('form', {\n                action: '#', id: 'gift_options_configuration_form', method: 'post'\n            });\n            var formContents = $('gift_options_form_contents');\n\n            if (formContents) {\n                formContents.parentNode.appendChild(form);\n                form.appendChild(formContents);\n            }\n\n            this.giftOptionsWindow = $('gift_options_configure');\n\n            jQuery(this.giftOptionsWindow).dialog({\n                autoOpen:   false,\n                modal:      true,\n                resizable:  false,\n                dialogClass: 'gift-options-popup',\n                minWidth:   500,\n                width:      '75%',\n                position: {\n                    my: 'left+12.5% top',\n                    at: 'center top',\n                    of: 'body'\n                },\n                open: function () {\n                    jQuery(this).closest('.ui-dialog').addClass('ui-dialog-active');\n\n                    var topMargin = jQuery(this).closest('.ui-dialog').children('.ui-dialog-titlebar').outerHeight() + 30;\n\n                    jQuery(this).closest('.ui-dialog').css({\n                        'margin-top' : topMargin,\n                        'z-index': 1000\n                    });\n                    jQuery(this).closest('.ui-dialog').nextAll('.ui-widget-overlay').css('z-index', 999);\n                },\n                close: function () {\n                    jQuery(this).closest('.ui-dialog').removeClass('ui-dialog-active');\n                }\n            });\n        },\n\n        showItemGiftOptions: function (event) {\n            var element = Event.element(event).id;\n            var itemId = element.sub('gift_options_link_', '');\n\n            jQuery(this.giftOptionsWindow).dialog('open');\n\n            this.setTitle(itemId);\n\n            Event.observe($('gift_options_cancel_button'), 'click', this.onCloseButton.bind(this));\n            Event.observe($('gift_options_ok_button'), 'click', this.onOkButton.bind(this));\n            Event.stop(event);\n        },\n\n        setTitle: function (itemId) {\n            var productTitleElement = $('order_item_' + itemId + '_title');\n            var productTitle = '';\n\n            if (productTitleElement) {\n                productTitle = productTitleElement.innerHTML;\n            }\n            jQuery(this.giftOptionsWindow).dialog({\n                title: jQuery.mage.__('Gift Options for ') + productTitle\n            });\n        },\n\n        onOkButton: function () {\n            var giftOptionsForm = jQuery('#gift_options_configuration_form');\n\n            if (!giftOptionsForm.validate({\n                errorClass: 'mage-error'\n            }).valid()) {\n                return false;\n            }\n\n            if (typeof (giftOptionsForm[0].reset) === 'function') {\n                giftOptionsForm[0].reset();\n            }\n            this.closeWindow();\n\n            return true;\n        },\n\n        onCloseButton: function () {\n            this.closeWindow();\n        },\n\n        closeWindow: function () {\n            jQuery(this.giftOptionsWindow).dialog('close');\n        }\n    };\n\n    window.GiftMessageSet = Class.create();\n\n    GiftMessageSet.prototype = {\n        destPrefix: 'current_item_giftmessage_',\n        sourcePrefix: 'giftmessage_',\n        fields: ['sender', 'recipient', 'message'],\n        isObserved: false,\n        callback: null,\n\n        initialize: function () {\n            $$('.action-link').each(function (el) {\n                Event.observe(el, 'click', this.setData.bind(this));\n            }, this);\n        },\n\n        setData: function (event) {\n            var element = Event.element(event).id;\n\n            this.id = element.sub('gift_options_link_', '');\n\n            if ($('gift-message-form-data-' + this.id)) {\n                this.fields.each(function (el) {\n                    if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\n                        $(this.destPrefix + el).value = $(this.sourcePrefix + this.id + '_' + el).value;\n                    }\n                }, this);\n                $('gift_options_giftmessage').show();\n            } else if ($('gift_options_giftmessage')) {\n                $('gift_options_giftmessage').hide();\n            }\n\n            if (!this.isObserved) {\n                Event.observe('gift_options_ok_button', 'click', this.saveData.bind(this));\n                this.isObserved = true;\n            }\n        },\n\n        prepareSaveData: function () {\n            var hash = $H();\n\n            $$('div[id^=gift_options_data_]').each(function (el) {\n                var fields = el.select('input', 'select', 'textarea');\n                var data = Form.serializeElements(fields, true);\n\n                hash.update(data);\n            });\n\n            return hash;\n        },\n\n        setSaveCallback: function (callback) {\n            if (typeof callback == 'function') {\n                this.callback = callback;\n            }\n        },\n\n        saveData: function (event) {\n            this.fields.each(function (el) {\n                if ($(this.sourcePrefix + this.id + '_' + el) && $(this.destPrefix + el)) {\n                    $(this.sourcePrefix + this.id + '_' + el).value = $(this.destPrefix + el).value;\n                }\n            }, this);\n\n            if ($(this.sourcePrefix + this.id + '_form')) {\n                $(this.sourcePrefix + this.id + '_form').request();\n            } else if (typeof order != 'undefined') {\n                var data = this.prepareSaveData();\n                var self = this;\n\n                jQuery.when(order.loadArea(['items'], true, data.toObject())).done(function () {\n                    if (self.callback !== null) {\n                        self.callback();\n                    }\n                });\n            }\n        }\n    };\n\n});\n","Magento_Sales/order/create/scripts.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'Magento_Ui/js/modal/alert',\n    'mage/template',\n    'text!Magento_Sales/templates/order/create/shipping/reload.html',\n    'text!Magento_Sales/templates/order/create/payment/reload.html',\n    'mage/translate',\n    'prototype',\n    'Magento_Catalog/catalog/product/composite/configure',\n    'Magento_Ui/js/lib/view/utils/async'\n], function (jQuery, confirm, alert, template, shippingTemplate, paymentTemplate) {\n\n    window.AdminOrder = new Class.create();\n\n    AdminOrder.prototype = {\n        initialize: function (data) {\n            if (!data) data = {};\n            this.loadBaseUrl = false;\n            this.customerId = data.customer_id ? data.customer_id : false;\n            this.storeId = data.store_id ? data.store_id : false;\n            this.quoteId = data['quote_id'] ? data['quote_id'] : false;\n            this.currencyId = false;\n            this.currencySymbol = data.currency_symbol ? data.currency_symbol : '';\n            this.addresses = data.addresses ? data.addresses : $H({});\n            this.shippingAsBilling = data.shippingAsBilling ? data.shippingAsBilling : false;\n            this.gridProducts = $H({});\n            this.gridProductsGift = $H({});\n            this.billingAddressContainer = '';\n            this.shippingAddressContainer = '';\n            this.isShippingMethodReseted = data.shipping_method_reseted ? data.shipping_method_reseted : false;\n            this.overlayData = $H({});\n            this.giftMessageDataChanged = false;\n            this.productConfigureAddFields = {};\n            this.productPriceBase = {};\n            this.collectElementsValue = true;\n            this.isOnlyVirtualProduct = false;\n            this.excludedPaymentMethods = [];\n            this.summarizePrice = true;\n            this.selectAddressEvent = false;\n            this.shippingTemplate = template(shippingTemplate, {\n                data: {\n                    title: jQuery.mage.__('Shipping Method'),\n                    linkText: jQuery.mage.__('Get shipping methods and rates')\n                }\n            });\n            this.paymentTemplate = template(paymentTemplate, {\n                data: {\n                    title: jQuery.mage.__('Payment Method'),\n                    linkText: jQuery.mage.__('Get available payment methods')\n                }\n            });\n\n            jQuery.async('#order-items', (function () {\n                this.dataArea = new OrderFormArea('data', $(this.getAreaId('data')), this);\n                this.itemsArea = Object.extend(new OrderFormArea('items', $(this.getAreaId('items')), this), {\n                    addControlButton: function (button) {\n                        var controlButtonArea = $(this.node).select('.actions')[0];\n                        if (typeof controlButtonArea != 'undefined') {\n                            var buttons = controlButtonArea.childElements();\n                            for (var i = 0; i < buttons.length; i++) {\n                                if (buttons[i].innerHTML.include(button.getLabel())) {\n                                    return;\n                                }\n                            }\n                            button.insertIn(controlButtonArea, 'top');\n                        }\n                    }\n                });\n\n                var searchButtonId = 'add_products',\n                    searchButton = new ControlButton(jQuery.mage.__('Add Products'), searchButtonId),\n                    searchAreaId = this.getAreaId('search');\n                searchButton.onClick = function () {\n                    $(searchAreaId).show();\n                    var el = this;\n                    window.setTimeout(function () {\n                        el.remove();\n                    }, 10);\n                };\n\n                jQuery.async('#order-items .admin__page-section-title', (function () {\n                    this.dataArea.onLoad = this.dataArea.onLoad.wrap(function (proceed) {\n                        proceed();\n                        this._parent.itemsArea.setNode($(this._parent.getAreaId('items')));\n                        this._parent.itemsArea.onLoad();\n                    });\n\n                    this.itemsArea.onLoad = this.itemsArea.onLoad.wrap(function (proceed) {\n                        proceed();\n                        if ($(searchAreaId) && !jQuery('#' + searchAreaId).is(':visible') && !$(searchButtonId)) {\n                            this.addControlButton(searchButton);\n                        }\n                    });\n                    this.areasLoaded();\n                    this.itemsArea.onLoad();\n\n                }).bind(this));\n\n            }).bind(this));\n\n            jQuery('#edit_form')\n                .on('submitOrder', function () {\n                    jQuery(this).trigger('realOrder');\n                })\n                .on('realOrder', this._realSubmit.bind(this));\n        },\n\n        areasLoaded: function () {\n        },\n\n        itemsLoaded: function () {\n        },\n\n        dataLoaded: function () {\n            this.dataShow();\n        },\n\n        setLoadBaseUrl: function (url) {\n            this.loadBaseUrl = url;\n        },\n\n        setAddresses: function (addresses) {\n            this.addresses = addresses;\n        },\n\n        addExcludedPaymentMethod: function (method) {\n            this.excludedPaymentMethods.push(method);\n        },\n\n        setCustomerId: function (id) {\n            this.customerId = id;\n            this.loadArea('header', true);\n            $(this.getAreaId('header')).callback = 'setCustomerAfter';\n            $('back_order_top_button').hide();\n            $('reset_order_top_button').show();\n        },\n\n        setCustomerAfter: function () {\n            this.customerSelectorHide();\n            if (this.storeId) {\n                $(this.getAreaId('data')).callback = 'dataLoaded';\n                this.loadArea(['data'], true);\n            } else {\n                this.storeSelectorShow();\n            }\n        },\n\n        setStoreId: function (id) {\n            this.storeId = id;\n            this.storeSelectorHide();\n            this.sidebarShow();\n            //this.loadArea(['header', 'sidebar','data'], true);\n            this.dataShow();\n            this.loadArea(['header', 'data'], true);\n        },\n\n        setCurrencyId: function (id) {\n            this.currencyId = id;\n            //this.loadArea(['sidebar', 'data'], true);\n            this.loadArea(['data'], true);\n        },\n\n        setCurrencySymbol: function (symbol) {\n            this.currencySymbol = symbol;\n        },\n\n        selectAddress: function (el, container) {\n            var id = el.value;\n            if (id.length == 0) {\n                id = '0';\n            }\n\n            this.selectAddressEvent = true;\n            if (this.addresses[id]) {\n                this.fillAddressFields(container, this.addresses[id]);\n            } else {\n                this.fillAddressFields(container, {});\n            }\n            this.selectAddressEvent = false;\n\n            var data = this.serializeData(container);\n            data[el.name] = id;\n\n            this.resetPaymentMethod();\n            if (this.isShippingField(container) && !this.isShippingMethodReseted) {\n                this.resetShippingMethod(data);\n            } else {\n                this.saveData(data);\n            }\n        },\n\n        /**\n         * Checks if the field belongs to the shipping address.\n         *\n         * @param {String} fieldId\n         * @return {Boolean}\n         */\n        isShippingField: function (fieldId) {\n            if (this.shippingAsBilling) {\n                return fieldId.include('billing');\n            }\n\n            return fieldId.include('shipping');\n        },\n\n        /**\n         * Checks if the field belongs to the billing address.\n         *\n         * @param {String} fieldId\n         * @return {Boolean}\n         */\n        isBillingField: function (fieldId) {\n            return fieldId.include('billing');\n        },\n\n        /**\n         * Binds events on container form fields.\n         *\n         * @param {String} container\n         */\n        bindAddressFields: function (container) {\n            var fields = $(container).select('input', 'select', 'textarea'),\n                i;\n\n            for (i = 0; i < fields.length; i++) {\n                jQuery(fields[i]).change(this.changeAddressField.bind(this));\n            }\n        },\n\n        /**\n         * Triggers on each form's element changes.\n         *\n         * @param {Event} event\n         */\n        changeAddressField: function (event) {\n            var field = Event.element(event),\n                re = /[^\\[]*\\[([^\\]]*)_address\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/,\n                matchRes = field.name.match(re),\n                type,\n                name,\n                data,\n                resetShipping = false;\n\n            if (!matchRes) {\n                return;\n            }\n\n            type = matchRes[1];\n            name = matchRes[2];\n\n            if (this.isBillingField(field.id)) {\n                data = this.serializeData(this.billingAddressContainer);\n            } else {\n                data = this.serializeData(this.shippingAddressContainer);\n            }\n            data = data.toObject();\n\n            if (type === 'billing' && this.shippingAsBilling) {\n                this.syncAddressField(this.shippingAddressContainer, field.name, field);\n                resetShipping = true;\n            }\n\n            if (type === 'shipping' && !this.shippingAsBilling) {\n                resetShipping = true;\n            }\n\n            if (resetShipping) {\n                data['reset_shipping'] = true;\n            }\n\n            if (name !== 'customer_address_id' && this.selectAddressEvent === false) {\n                if (this.shippingAsBilling) {\n                    $('order-shipping_address_customer_address_id').value = '';\n                }\n\n                $('order-' + type + '_address_customer_address_id').value = '';\n            }\n\n            data['order[' + type + '_address][customer_address_id]'] = null;\n            data['shipping_as_billing'] = +this.shippingAsBilling;\n\n            if (name === 'customer_address_id') {\n                data['order[' + type + '_address][customer_address_id]'] =\n                    $('order-' + type + '_address_customer_address_id').value;\n            }\n\n            if (name === 'country_id' && this.selectAddressEvent === false) {\n                $('order-' + type + '_address_customer_address_id').value = '';\n            }\n\n            this.resetPaymentMethod();\n\n            if (data['reset_shipping']) {\n                this.resetShippingMethod();\n            } else {\n                this.saveData(data);\n\n                if (name === 'country_id' || name === 'customer_address_id') {\n                    this.loadArea(['shipping_method', 'billing_method', 'totals', 'items'], true, data);\n                }\n            }\n        },\n\n        /**\n         * Set address container form field value.\n         *\n         * @param {String} container - container ID\n         * @param {String} fieldName - form field name\n         * @param {*} fieldValue - form field value\n         */\n        syncAddressField: function (container, fieldName, fieldValue) {\n            var syncName;\n\n            if (this.isBillingField(fieldName)) {\n                syncName = fieldName.replace('billing', 'shipping');\n            }\n\n            $(container).select('[name=\"' + syncName + '\"]').each(function (element) {\n                if (~['input', 'textarea', 'select'].indexOf(element.tagName.toLowerCase())) {\n                    if (element.type === \"checkbox\") {\n                        element.checked = fieldValue.checked;\n                    } else {\n                        element.value = fieldValue.value;\n                    }\n                }\n            });\n        },\n\n        fillAddressFields: function (container, data) {\n            var regionIdElem = false;\n            var regionIdElemValue = false;\n\n            var fields = $(container).select('input', 'select', 'textarea');\n            var re = /[^\\[]*\\[[^\\]]*\\]\\[([^\\]]*)\\](\\[(\\d)\\])?/;\n            for (var i = 0; i < fields.length; i++) {\n                // skip input type file @Security error code: 1000\n                if (fields[i].tagName.toLowerCase() == 'input' && fields[i].type.toLowerCase() == 'file') {\n                    continue;\n                }\n                var matchRes = fields[i].name.match(re);\n                if (matchRes === null) {\n                    continue;\n                }\n                var name = matchRes[1];\n                var index = matchRes[3];\n\n                if (index) {\n                    // multiply line\n                    if (data[name]) {\n                        var values = data[name].split(\"\\n\");\n                        fields[i].value = values[index] ? values[index] : '';\n                    } else {\n                        fields[i].value = '';\n                    }\n                } else if (fields[i].tagName.toLowerCase() == 'select' && fields[i].multiple) {\n                    // multiselect\n                    if (data[name]) {\n                        values = [''];\n                        if (Object.isString(data[name])) {\n                            values = data[name].split(',');\n                        } else if (Object.isArray(data[name])) {\n                            values = data[name];\n                        }\n                        fields[i].setValue(values);\n                    }\n                } else {\n                    fields[i].setValue(data[name] ? data[name] : '');\n                }\n\n                if (fields[i].changeUpdater) {\n                    fields[i].changeUpdater();\n                }\n\n                if (name == 'region' && data['region_id'] && !data['region']) {\n                    fields[i].value = data['region_id'];\n                }\n\n                jQuery(fields[i]).trigger('change');\n            }\n        },\n\n        disableShippingAddress: function (flag) {\n            this.shippingAsBilling = flag;\n            if ($('order-shipping_address_customer_address_id')) {\n                $('order-shipping_address_customer_address_id').disabled = flag;\n            }\n            if ($(this.shippingAddressContainer)) {\n                var dataFields = $(this.shippingAddressContainer).select('input', 'select', 'textarea');\n                for (var i = 0; i < dataFields.length; i++) {\n                    dataFields[i].disabled = flag;\n\n                    if (this.isOnlyVirtualProduct) {\n                        dataFields[i].setValue('');\n                    }\n                }\n                var buttons = $(this.shippingAddressContainer).select('button');\n                // Add corresponding class to buttons while disabling them\n                for (i = 0; i < buttons.length; i++) {\n                    buttons[i].disabled = flag;\n                    if (flag) {\n                        buttons[i].addClassName('disabled');\n                    } else {\n                        buttons[i].removeClassName('disabled');\n                    }\n                }\n            }\n        },\n\n        /**\n         * Equals shipping and billing addresses.\n         *\n         * @param {Boolean} flag\n         */\n        setShippingAsBilling: function (flag) {\n            var data,\n                areasToLoad = ['billing_method', 'shipping_address', 'shipping_method', 'totals', 'giftmessage'];\n\n            this.disableShippingAddress(flag);\n            data = this.serializeData(flag ? this.billingAddressContainer : this.shippingAddressContainer);\n            data = data.toObject();\n            data['shipping_as_billing'] = flag ? 1 : 0;\n            data['reset_shipping'] = 1;\n            // set customer_address_id to null for shipping address in order to treat it as new from backend\n            // Checkbox(Same As Billing Address) uncheck event\n            data['order[shipping_address][customer_address_id]'] = null;\n            this.loadArea(areasToLoad, true, data);\n        },\n\n        /**\n         * Replace shipping method area.\n         */\n        resetShippingMethod: function () {\n            if (!this.isOnlyVirtualProduct) {\n                $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\n            }\n        },\n\n        /**\n         * Replace payment method area.\n         */\n        resetPaymentMethod: function () {\n            $(this.getAreaId('billing_method')).update(this.paymentTemplate);\n        },\n\n        /**\n         * Loads shipping options according to address data.\n         *\n         * @return {Boolean}\n         */\n        loadShippingRates: function () {\n            var addressContainer = this.shippingAsBilling ?\n                'billingAddressContainer' :\n                'shippingAddressContainer',\n                data = this.serializeData(this[addressContainer]).toObject();\n\n            data['collect_shipping_rates'] = 1;\n            this.isShippingMethodReseted = false;\n            this.loadArea(['shipping_method', 'totals'], true, data);\n\n            return false;\n        },\n\n        setShippingMethod: function (method) {\n            var data = {};\n\n            data['order[shipping_method]'] = method;\n            this.loadArea([\n                'shipping_method',\n                'totals',\n                'billing_method'\n            ], true, data);\n        },\n\n        /**\n         * Updates available payment\n         * methods list according to order data.\n         *\n         * @return boolean\n         */\n        loadPaymentMethods: function () {\n            var data = this.serializeData(this.billingAddressContainer).toObject();\n\n            this.loadArea(['billing_method', 'totals'], true, data);\n\n            return false;\n        },\n\n        switchPaymentMethod: function(method){\n            if (this.paymentMethod !== method) {\n                jQuery('#edit_form')\n                    .off('submitOrder')\n                    .on('submitOrder', function(){\n                        jQuery(this).trigger('realOrder');\n                    });\n            }\n            jQuery('#edit_form').trigger('changePaymentMethod', [method]);\n            this.setPaymentMethod(method);\n            var data = {};\n            data['order[payment_method]'] = method;\n            this.loadArea(['card_validation'], true, data);\n        },\n\n        setPaymentMethod: function (method) {\n            if (this.paymentMethod && $('payment_form_' + this.paymentMethod)) {\n                var form = 'payment_form_' + this.paymentMethod;\n                [form + '_before', form, form + '_after'].each(function (el) {\n                    var block = $(el);\n                    if (block) {\n                        block.hide();\n                        block.select('input', 'select', 'textarea').each(function (field) {\n                            field.disabled = true;\n                        });\n                    }\n                });\n            }\n\n            if (!this.paymentMethod || method) {\n                $('order-billing_method_form').select('input', 'select', 'textarea').each(function (elem) {\n                    if (elem.type != 'radio') elem.disabled = true;\n                })\n            }\n\n            if ($('payment_form_' + method)) {\n                jQuery('#' + this.getAreaId('billing_method')).trigger('contentUpdated');\n                this.paymentMethod = method;\n                var form = 'payment_form_' + method;\n                [form + '_before', form, form + '_after'].each(function (el) {\n                    var block = $(el);\n                    if (block) {\n                        block.show();\n                        block.select('input', 'select', 'textarea').each(function (field) {\n                            field.disabled = false;\n                            if (!el.include('_before') && !el.include('_after') && !field.bindChange) {\n                                field.bindChange = true;\n                                field.paymentContainer = form;\n                                field.method = method;\n                                field.observe('change', this.changePaymentData.bind(this))\n                            }\n                        }, this);\n                    }\n                }, this);\n            }\n        },\n\n        changePaymentData: function (event) {\n            var elem = Event.element(event);\n            if (elem && elem.method) {\n                var data = this.getPaymentData(elem.method);\n                if (data) {\n                    this.loadArea(['card_validation'], true, data);\n                } else {\n                    return;\n                }\n            }\n        },\n\n        getPaymentData: function (currentMethod) {\n            if (typeof (currentMethod) == 'undefined') {\n                if (this.paymentMethod) {\n                    currentMethod = this.paymentMethod;\n                } else {\n                    return false;\n                }\n            }\n            if (this.isPaymentValidationAvailable() == false) {\n                return false;\n            }\n            var data = {};\n            var fields = $('payment_form_' + currentMethod).select('input', 'select');\n            for (var i = 0; i < fields.length; i++) {\n                data[fields[i].name] = fields[i].getValue();\n            }\n            if ((typeof data['payment[cc_type]']) != 'undefined' && (!data['payment[cc_type]'] || !data['payment[cc_number]'])) {\n                return false;\n            }\n            return data;\n        },\n\n        applyCoupon: function (code) {\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {\n                'order[coupon][code]': code,\n                reset_shipping: 0\n            });\n            this.orderItemChanged = false;\n            jQuery('html, body').animate({\n                scrollTop: 0\n            });\n        },\n\n        addProduct: function (id) {\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true, {\n                add_product: id,\n                reset_shipping: true\n            });\n        },\n\n        removeQuoteItem: function (id) {\n            this.loadArea(['items', 'shipping_method', 'totals', 'billing_method'], true,\n                {remove_item: id, from: 'quote', reset_shipping: true});\n        },\n\n        moveQuoteItem: function (id, to) {\n            this.loadArea(['sidebar_' + to, 'items', 'shipping_method', 'totals', 'billing_method'], this.getAreaId('items'),\n                {move_item: id, to: to, reset_shipping: true});\n        },\n\n        productGridShow: function (buttonElement) {\n            this.productGridShowButton = buttonElement;\n            Element.hide(buttonElement);\n            this.showArea('search');\n        },\n\n        productGridRowInit: function (grid, row) {\n            var checkbox = $(row).select('.checkbox')[0];\n            var inputs = $(row).select('.input-text');\n            if (checkbox && inputs.length > 0) {\n                checkbox.inputElements = inputs;\n                for (var i = 0; i < inputs.length; i++) {\n                    var input = inputs[i];\n                    input.checkboxElement = checkbox;\n\n                    var product = this.gridProducts.get(checkbox.value);\n                    if (product) {\n                        var defaultValue = product[input.name];\n                        if (defaultValue) {\n                            if (input.name == 'giftmessage') {\n                                input.checked = true;\n                            } else {\n                                input.value = defaultValue;\n                            }\n                        }\n                    }\n\n                    input.disabled = !checkbox.checked || input.hasClassName('input-inactive');\n\n                    Event.observe(input, 'keyup', this.productGridRowInputChange.bind(this));\n                    Event.observe(input, 'change', this.productGridRowInputChange.bind(this));\n                }\n            }\n        },\n\n        productGridRowInputChange: function (event) {\n            var element = Event.element(event);\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\n                if (element.name != 'giftmessage' || element.checked) {\n                    this.gridProducts.get(element.checkboxElement.value)[element.name] = element.value;\n                } else if (element.name == 'giftmessage' && this.gridProducts.get(element.checkboxElement.value)[element.name]) {\n                    delete (this.gridProducts.get(element.checkboxElement.value)[element.name]);\n                }\n            }\n        },\n\n        productGridRowClick: function (grid, event) {\n            var trElement = Event.findElement(event, 'tr');\n            var qtyElement = trElement.select('input[name=\"qty\"]')[0];\n            var eventElement = Event.element(event);\n\n            if (eventElement.tagName === 'LABEL'\n                && trElement.querySelector('#' + eventElement.htmlFor)\n                && trElement.querySelector('#' + eventElement.htmlFor).type === 'checkbox'\n            ) {\n                event.stopPropagation();\n                trElement.querySelector('#' + eventElement.htmlFor).trigger('click');\n                return;\n            }\n\n            var isInputCheckbox = (eventElement.tagName === 'INPUT' && eventElement.type === 'checkbox');\n            var isInputQty = grid.targetElement && grid.targetElement.tagName === 'INPUT' && grid.targetElement.name === 'qty';\n            if (trElement && !isInputQty) {\n                var checkbox = Element.select(trElement, 'input[type=\"checkbox\"]')[0];\n                var confLink = Element.select(trElement, 'a')[0];\n                var priceColl = Element.select(trElement, '.price')[0];\n                if (checkbox) {\n                    // processing non composite product\n                    if (confLink.readAttribute('disabled')) {\n                        var checked = isInputCheckbox ? checkbox.checked : !checkbox.checked;\n                        grid.setCheckboxChecked(checkbox, checked);\n                        // processing composite product\n                    } else if (isInputCheckbox && !checkbox.checked) {\n                        grid.setCheckboxChecked(checkbox, false);\n                        // processing composite product\n                    } else if (!isInputCheckbox || (isInputCheckbox && checkbox.checked)) {\n                        var listType = confLink.readAttribute('list_type');\n                        var productId = confLink.readAttribute('product_id');\n                        if (typeof this.productPriceBase[productId] == 'undefined') {\n                            var priceBase = priceColl.innerHTML.match(/.*?([\\d,]+\\.?\\d*)/);\n                            if (!priceBase) {\n                                this.productPriceBase[productId] = 0;\n                            } else {\n                                this.productPriceBase[productId] = parseFloat(priceBase[1].replace(/,/g, ''));\n                            }\n                        }\n                        productConfigure.setConfirmCallback(listType, function () {\n                            // sync qty of popup and qty of grid\n                            var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                            if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                                qtyElement.value = confirmedCurrentQty.value;\n                            }\n                            // calc and set product price\n                            var productPrice = this._calcProductPrice();\n                            if (this._isSummarizePrice()) {\n                                productPrice += this.productPriceBase[productId];\n                            }\n                            productPrice = parseFloat(Math.round(productPrice + \"e+2\") + \"e-2\");\n                            priceColl.innerHTML = this.currencySymbol + productPrice.toFixed(2);\n                            // and set checkbox checked\n                            grid.setCheckboxChecked(checkbox, true);\n                        }.bind(this));\n                        productConfigure.setCancelCallback(listType, function () {\n                            if (!$(productConfigure.confirmedCurrentId) || !$(productConfigure.confirmedCurrentId).innerHTML) {\n                                grid.setCheckboxChecked(checkbox, false);\n                            }\n                        });\n                        productConfigure.setShowWindowCallback(listType, function () {\n                            // sync qty of grid and qty of popup\n                            var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                            if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                                formCurrentQty.value = qtyElement.value;\n                            }\n                        }.bind(this));\n                        productConfigure.showItemConfiguration(listType, productId);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Is need to summarize price\n         */\n        _isSummarizePrice: function (elm) {\n            if (elm && elm.hasAttribute('summarizePrice')) {\n                this.summarizePrice = parseInt(elm.readAttribute('summarizePrice'));\n            }\n            return this.summarizePrice;\n        },\n        /**\n         * Calc product price through its options\n         */\n        _calcProductPrice: function () {\n            var productPrice = 0;\n            var getPriceFields = function (elms) {\n                var productPrice = 0;\n                var getPrice = function (elm) {\n                    var optQty = 1;\n                    if (elm.hasAttribute('qtyId')) {\n                        if (!$(elm.getAttribute('qtyId')).value) {\n                            return 0;\n                        } else {\n                            optQty = parseFloat($(elm.getAttribute('qtyId')).value);\n                        }\n                    }\n                    if (elm.hasAttribute('price') && !elm.disabled) {\n                        return parseFloat(elm.readAttribute('price')) * optQty;\n                    }\n                    return 0;\n                };\n                for (var i = 0; i < elms.length; i++) {\n                    if (elms[i].type == 'select-one' || elms[i].type == 'select-multiple') {\n                        for (var ii = 0; ii < elms[i].options.length; ii++) {\n                            if (elms[i].options[ii].selected) {\n                                if (this._isSummarizePrice(elms[i].options[ii])) {\n                                    productPrice += getPrice(elms[i].options[ii]);\n                                } else {\n                                    productPrice = getPrice(elms[i].options[ii]);\n                                }\n                            }\n                        }\n                    } else if (((elms[i].type == 'checkbox' || elms[i].type == 'radio') && elms[i].checked)\n                        || ((elms[i].type == 'file' || elms[i].type == 'text' || elms[i].type == 'textarea' || elms[i].type == 'hidden')\n                            && Form.Element.getValue(elms[i]))\n                    ) {\n                        if (this._isSummarizePrice(elms[i])) {\n                            productPrice += getPrice(elms[i]);\n                        } else {\n                            productPrice = getPrice(elms[i]);\n                        }\n                    }\n                }\n                return productPrice;\n            }.bind(this);\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('input'));\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('select'));\n            productPrice += getPriceFields($(productConfigure.confirmedCurrentId).getElementsByTagName('textarea'));\n            return productPrice;\n        },\n\n        productGridCheckboxCheck: function (grid, element, checked) {\n            if (checked) {\n                if (element.inputElements) {\n                    this.gridProducts.set(element.value, {});\n                    var product = this.gridProducts.get(element.value);\n                    for (var i = 0; i < element.inputElements.length; i++) {\n                        var input = element.inputElements[i];\n                        if (!input.hasClassName('input-inactive')) {\n                            input.disabled = false;\n                            if (input.name == 'qty' && !input.value) {\n                                input.value = 1;\n                            }\n                        }\n\n                        if (input.checked || input.name != 'giftmessage') {\n                            product[input.name] = input.value;\n                        } else if (product[input.name]) {\n                            delete (product[input.name]);\n                        }\n                    }\n                }\n            } else {\n                if (element.inputElements) {\n                    for (var i = 0; i < element.inputElements.length; i++) {\n                        element.inputElements[i].disabled = true;\n                    }\n                }\n                this.gridProducts.unset(element.value);\n            }\n            grid.reloadParams = {'products[]': this.gridProducts.keys()};\n        },\n\n        productGridFilterKeyPress: function (grid, event) {\n            var returnKey = parseInt(Event.KEY_RETURN || 13, 10);\n\n            if (event.keyCode === returnKey) {\n                if (typeof event.stopPropagation === 'function') {\n                    event.stopPropagation();\n                }\n\n                if (typeof event.preventDefault === 'function') {\n                    event.preventDefault();\n                }\n            }\n        },\n\n        /**\n         * Submit configured products to quote\n         */\n        productGridAddSelected: function () {\n            if (this.productGridShowButton) Element.show(this.productGridShowButton);\n            var area = ['search', 'items', 'shipping_method', 'totals', 'giftmessage', 'billing_method'];\n            // prepare additional fields and filtered items of products\n            var fieldsPrepare = {};\n            var itemsFilter = [];\n            var products = this.gridProducts.toObject();\n            for (var productId in products) {\n                itemsFilter.push(productId);\n                var paramKey = 'item[' + productId + ']';\n                for (var productParamKey in products[productId]) {\n                    paramKey += '[' + productParamKey + ']';\n                    fieldsPrepare[paramKey] = products[productId][productParamKey];\n                }\n            }\n            this.productConfigureSubmit('product_to_add', area, fieldsPrepare, itemsFilter);\n            productConfigure.clean('quote_items');\n            this.hideArea('search');\n            this.gridProducts = $H({});\n        },\n\n        selectCustomer: function (grid, event) {\n            var element = Event.findElement(event, 'tr');\n            if (element.title) {\n                this.setCustomerId(element.title);\n            }\n        },\n\n        customerSelectorHide: function () {\n            this.hideArea('customer-selector');\n        },\n\n        customerSelectorShow: function () {\n            this.showArea('customer-selector');\n        },\n\n        storeSelectorHide: function () {\n            this.hideArea('store-selector');\n        },\n\n        storeSelectorShow: function () {\n            this.showArea('store-selector');\n        },\n\n        dataHide: function () {\n            this.hideArea('data');\n        },\n\n        dataShow: function () {\n            if ($('submit_order_top_button')) {\n                $('submit_order_top_button').show();\n            }\n            this.showArea('data');\n        },\n\n        clearShoppingCart: function (confirmMessage) {\n            var self = this;\n\n            confirm({\n                content: confirmMessage,\n                actions: {\n                    confirm: function () {\n                        self.collectElementsValue = false;\n                        order.sidebarApplyChanges({'sidebar[empty_customer_cart]': 1});\n                        self.collectElementsValue = true;\n                    }\n                }\n            });\n        },\n\n        sidebarApplyChanges: function (auxiliaryParams) {\n            if ($(this.getAreaId('sidebar'))) {\n                var data = {};\n                if (this.collectElementsValue) {\n                    var elems = $(this.getAreaId('sidebar')).select('input');\n                    for (var i = 0; i < elems.length; i++) {\n                        if (elems[i].getValue()) {\n                            data[elems[i].name] = elems[i].getValue();\n                        }\n                    }\n                }\n                if (auxiliaryParams instanceof Object) {\n                    for (var paramName in auxiliaryParams) {\n                        data[paramName] = String(auxiliaryParams[paramName]);\n                    }\n                }\n                data.reset_shipping = true;\n                this.loadArea(['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'], true, data);\n            }\n        },\n\n        sidebarHide: function () {\n            if (this.storeId === false && $('page:left') && $('page:container')) {\n                $('page:left').hide();\n                $('page:container').removeClassName('container');\n                $('page:container').addClassName('container-collapsed');\n            }\n        },\n\n        sidebarShow: function () {\n            if ($('page:left') && $('page:container')) {\n                $('page:left').show();\n                $('page:container').removeClassName('container-collapsed');\n                $('page:container').addClassName('container');\n            }\n        },\n\n        /**\n         * Show configuration of product and add handlers on submit form\n         *\n         * @param productId\n         */\n        sidebarConfigureProduct: function (listType, productId, itemId) {\n            // create additional fields\n            var params = {},\n                isWishlist = !!itemId;\n            params.reset_shipping = true;\n            params.add_product = productId;\n            this.prepareParams(params);\n            for (var i in params) {\n                if (params[i] === null) {\n                    unset(params[i]);\n                } else if (typeof (params[i]) == 'boolean') {\n                    params[i] = params[i] ? 1 : 0;\n                }\n            }\n            var fields = [];\n            for (var name in params) {\n                fields.push(new Element('input', {type: 'hidden', name: name, value: params[name]}));\n            }\n            // add additional fields before triggered submit\n            productConfigure.setBeforeSubmitCallback(listType, function () {\n                productConfigure.addFields(fields);\n            }.bind(this));\n            // response handler\n            productConfigure.setOnLoadIFrameCallback(listType, function (response) {\n                var areas = ['items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'];\n\n                if (!response.ok) {\n                    return;\n                }\n                if (isWishlist) {\n                    this.removeSidebarItem(itemId, 'wishlist').done(function () {\n                        this.loadArea(areas, true);\n                    }.bind(this));\n                } else {\n                    this.loadArea(areas, true);\n                }\n            }.bind(this));\n            // show item configuration\n            itemId = itemId ? itemId : productId;\n            productConfigure.showItemConfiguration(listType, itemId);\n            return false;\n        },\n\n        removeSidebarItem: function (id, from) {\n            return this.loadArea(['sidebar_' + from], 'sidebar_data_' + from, {\n                remove_item: id,\n                from: from\n            });\n        },\n\n        itemsUpdate: function () {\n            var area = ['sidebar', 'items', 'shipping_method', 'billing_method', 'totals', 'giftmessage'];\n            // prepare additional fields\n            var fieldsPrepare = {update_items: 1};\n            var info = $('order-items_grid').select('input', 'select', 'textarea');\n            for (var i = 0; i < info.length; i++) {\n                if (!info[i].disabled && (info[i].type != 'checkbox' || info[i].checked)) {\n                    fieldsPrepare[info[i].name] = info[i].getValue();\n                }\n            }\n            fieldsPrepare = Object.extend(fieldsPrepare, this.productConfigureAddFields);\n            this.productConfigureSubmit('quote_items', area, fieldsPrepare);\n            this.orderItemChanged = false;\n        },\n\n        itemsOnchangeBind: function () {\n            var elems = $('order-items_grid').select('input', 'select', 'textarea');\n            for (var i = 0; i < elems.length; i++) {\n                if (!elems[i].bindOnchange) {\n                    elems[i].bindOnchange = true;\n                    elems[i].observe('change', this.itemChange.bind(this))\n                }\n            }\n        },\n\n        itemChange: function (event) {\n            this.giftmessageOnItemChange(event);\n            this.orderItemChanged = true;\n        },\n\n        /**\n         * Submit batch of configured products\n         *\n         * @param listType\n         * @param area\n         * @param fieldsPrepare\n         * @param itemsFilter\n         */\n        productConfigureSubmit: function (listType, area, fieldsPrepare, itemsFilter) {\n            // prepare loading areas and build url\n            area = this.prepareArea(area);\n            this.loadingAreas = area;\n            var url = this.loadBaseUrl + 'block/' + area + '?isAjax=true';\n\n            // prepare additional fields\n            fieldsPrepare = this.prepareParams(fieldsPrepare);\n            fieldsPrepare.reset_shipping = 1;\n            fieldsPrepare.json = 1;\n\n            // create fields\n            var fields = [];\n            for (var name in fieldsPrepare) {\n                fields.push(new Element('input', {type: 'hidden', name: name, value: fieldsPrepare[name]}));\n            }\n            productConfigure.addFields(fields);\n\n            // filter items\n            if (itemsFilter) {\n                productConfigure.addItemsFilter(listType, itemsFilter);\n            }\n\n            // prepare and do submit\n            productConfigure.addListType(listType, {urlSubmit: url});\n            productConfigure.setOnLoadIFrameCallback(listType, function (response) {\n                this.loadAreaResponseHandler(response);\n            }.bind(this));\n            productConfigure.submit(listType);\n            // clean\n            this.productConfigureAddFields = {};\n        },\n\n        /**\n         * Show configuration of quote item\n         *\n         * @param itemId\n         */\n        showQuoteItemConfiguration: function (itemId) {\n            var listType = 'quote_items';\n            var qtyElement = $('order-items_grid').select('input[name=\"item\\[' + itemId + '\\]\\[qty\\]\"]')[0];\n            productConfigure.setConfirmCallback(listType, function () {\n                // sync qty of popup and qty of grid\n                var confirmedCurrentQty = productConfigure.getCurrentConfirmedQtyElement();\n                if (qtyElement && confirmedCurrentQty && !isNaN(confirmedCurrentQty.value)) {\n                    qtyElement.value = confirmedCurrentQty.value;\n                }\n                this.productConfigureAddFields['item[' + itemId + '][configured]'] = 1;\n                this.itemsUpdate();\n\n            }.bind(this));\n            productConfigure.setShowWindowCallback(listType, function () {\n                // sync qty of grid and qty of popup\n                var formCurrentQty = productConfigure.getCurrentFormQtyElement();\n                if (formCurrentQty && qtyElement && !isNaN(qtyElement.value)) {\n                    formCurrentQty.value = qtyElement.value;\n                }\n            }.bind(this));\n            productConfigure.showItemConfiguration(listType, itemId);\n        },\n\n        accountFieldsBind: function (container) {\n            if ($(container)) {\n                var fields = $(container).select('input', 'select', 'textarea');\n                for (var i = 0; i < fields.length; i++) {\n                    if (fields[i].id == 'group_id') {\n                        fields[i].observe('change', this.accountGroupChange.bind(this))\n                    } else {\n                        fields[i].observe('change', this.accountFieldChange.bind(this))\n                    }\n                }\n            }\n        },\n\n        accountGroupChange: function () {\n            this.loadArea(['data'], true, this.serializeData('order-form_account').toObject());\n        },\n\n        accountFieldChange: function () {\n            this.saveData(this.serializeData('order-form_account'));\n        },\n\n        commentFieldsBind: function (container) {\n            if ($(container)) {\n                var fields = $(container).select('input', 'textarea');\n                for (var i = 0; i < fields.length; i++)\n                    fields[i].observe('change', this.commentFieldChange.bind(this))\n            }\n        },\n\n        commentFieldChange: function () {\n            this.saveData(this.serializeData('order-comment'));\n        },\n\n        giftmessageFieldsBind: function (container) {\n            if ($(container)) {\n                var fields = $(container).select('input', 'textarea');\n                for (var i = 0; i < fields.length; i++)\n                    fields[i].observe('change', this.giftmessageFieldChange.bind(this))\n            }\n        },\n\n        giftmessageFieldChange: function () {\n            this.giftMessageDataChanged = true;\n        },\n\n        giftmessageOnItemChange: function (event) {\n            var element = Event.element(event);\n            if (element.name.indexOf(\"giftmessage\") != -1 && element.type == \"checkbox\" && !element.checked) {\n                var messages = $(\"order-giftmessage\").select('textarea');\n                var name;\n                for (var i = 0; i < messages.length; i++) {\n                    name = messages[i].id.split(\"_\");\n                    if (name.length < 2) continue;\n                    if (element.name.indexOf(\"[\" + name[1] + \"]\") != -1 && messages[i].value != \"\") {\n                        alert({\n                            content: \"First, clean the Message field in Gift Message form\"\n                        });\n                        element.checked = true;\n                    }\n                }\n            }\n        },\n\n        loadArea: function (area, indicator, params) {\n            var deferred = new jQuery.Deferred();\n            var url = this.loadBaseUrl;\n            if (area) {\n                area = this.prepareArea(area);\n                url += 'block/' + area;\n            }\n            if (indicator === true) indicator = 'html-body';\n            params = this.prepareParams(params);\n            params.json = true;\n            if (!this.loadingAreas) this.loadingAreas = [];\n            if (indicator) {\n                this.loadingAreas = area;\n                new Ajax.Request(url, {\n                    parameters: params,\n                    loaderArea: indicator,\n                    onSuccess: function (transport) {\n                        var response = transport.responseText.evalJSON();\n                        this.loadAreaResponseHandler(response);\n                        deferred.resolve();\n                    }.bind(this)\n                });\n            } else {\n                new Ajax.Request(url, {\n                    parameters: params,\n                    loaderArea: indicator,\n                    onSuccess: function (transport) {\n                        deferred.resolve();\n                    }\n                });\n            }\n            if (typeof productConfigure != 'undefined' && area instanceof Array && area.indexOf('items') != -1) {\n                productConfigure.clean('quote_items');\n            }\n            return deferred.promise();\n        },\n\n        loadAreaResponseHandler: function (response) {\n            if (response.error) {\n                alert({\n                    content: response.message\n                });\n            }\n            if (response.ajaxExpired && response.ajaxRedirect) {\n                setLocation(response.ajaxRedirect);\n            }\n            if (!this.loadingAreas) {\n                this.loadingAreas = [];\n            }\n            if (typeof this.loadingAreas == 'string') {\n                this.loadingAreas = [this.loadingAreas];\n            }\n            if (this.loadingAreas.indexOf('message') == -1) {\n                this.loadingAreas.push('message');\n            }\n            if (response.header) {\n                jQuery('.page-actions-inner').attr('data-title', response.header);\n            }\n\n            for (var i = 0; i < this.loadingAreas.length; i++) {\n                var id = this.loadingAreas[i];\n                if ($(this.getAreaId(id))) {\n                    if ((id in response) && id !== 'message' || response[id]) {\n                        $(this.getAreaId(id)).update(response[id]);\n                    }\n                    if ($(this.getAreaId(id)).callback) {\n                        this[$(this.getAreaId(id)).callback]();\n                    }\n                }\n            }\n        },\n\n        prepareArea: function (area) {\n            if (this.giftMessageDataChanged) {\n                return area.without('giftmessage');\n            }\n            return area;\n        },\n\n        saveData: function (data) {\n            this.loadArea(false, false, data);\n        },\n\n        showArea: function (area) {\n            var id = this.getAreaId(area);\n            if ($(id)) {\n                $(id).show();\n                this.areaOverlay();\n            }\n        },\n\n        hideArea: function (area) {\n            var id = this.getAreaId(area);\n            if ($(id)) {\n                $(id).hide();\n                this.areaOverlay();\n            }\n        },\n\n        areaOverlay: function () {\n            $H(order.overlayData).each(function (e) {\n                e.value.fx();\n            });\n        },\n\n        getAreaId: function (area) {\n            return 'order-' + area;\n        },\n\n        prepareParams: function (params) {\n            if (!params) {\n                params = {};\n            }\n            if (!params.customer_id) {\n                params.customer_id = this.customerId;\n            }\n            if (!params.store_id) {\n                params.store_id = this.storeId;\n            }\n            if (!params.currency_id) {\n                params.currency_id = this.currencyId;\n            }\n            if (!params.form_key) {\n                params.form_key = FORM_KEY;\n            }\n\n            if (this.isPaymentValidationAvailable()) {\n                var data = this.serializeData('order-billing_method');\n                if (data) {\n                    data.each(function (value) {\n                        params[value[0]] = value[1];\n                    });\n                }\n            } else {\n                params['payment[method]'] = this.paymentMethod;\n            }\n            return params;\n        },\n\n        /**\n         * Prevent from sending credit card information to server for some payment methods\n         *\n         * @returns {boolean}\n         */\n        isPaymentValidationAvailable: function () {\n            return ((typeof this.paymentMethod) == 'undefined'\n                || this.excludedPaymentMethods.indexOf(this.paymentMethod) == -1);\n        },\n\n        /**\n         * Serializes container form elements data.\n         *\n         * @param {String} container\n         * @return {Object}\n         */\n        serializeData: function (container) {\n            var fields = $(container).select('input', 'select', 'textarea'),\n                data = Form.serializeElements(fields, true);\n\n            return $H(data);\n        },\n\n        toggleCustomPrice: function (checkbox, elemId, tierBlock) {\n            if (checkbox.checked) {\n                $(elemId).disabled = false;\n                $(elemId).show();\n                if ($(tierBlock)) $(tierBlock).hide();\n            } else {\n                $(elemId).disabled = true;\n                $(elemId).hide();\n                if ($(tierBlock)) $(tierBlock).show();\n            }\n        },\n\n        submit: function () {\n            var $editForm = jQuery('#edit_form'),\n                beforeSubmitOrderEvent;\n\n            if ($editForm.valid()) {\n                $editForm.trigger('processStart');\n                beforeSubmitOrderEvent = jQuery.Event('beforeSubmitOrder');\n                $editForm.trigger(beforeSubmitOrderEvent);\n                if (beforeSubmitOrderEvent.result !== false) {\n                    $editForm.trigger('submitOrder');\n                }\n            }\n        },\n\n        _realSubmit: function () {\n            var disableAndSave = function () {\n                disableElements('save');\n                jQuery('#edit_form').on('invalid-form.validate', function () {\n                    enableElements('save');\n                    jQuery('#edit_form').trigger('processStop');\n                    jQuery('#edit_form').off('invalid-form.validate');\n                });\n                jQuery('#edit_form').triggerHandler('save');\n            }\n            if (this.orderItemChanged) {\n                var self = this;\n\n                jQuery('#edit_form').trigger('processStop');\n\n                confirm({\n                    content: jQuery.mage.__('You have item changes'),\n                    actions: {\n                        confirm: function () {\n                            jQuery('#edit_form').trigger('processStart');\n                            disableAndSave();\n                        },\n                        cancel: function () {\n                            self.itemsUpdate();\n                        }\n                    }\n                });\n            } else {\n                disableAndSave();\n            }\n        },\n\n        overlay: function (elId, show, observe) {\n            if (typeof (show) == 'undefined') {\n                show = true;\n            }\n\n            var orderObj = this;\n            var obj = this.overlayData.get(elId);\n            if (!obj) {\n                obj = {\n                    show: show,\n                    el: elId,\n                    order: orderObj,\n                    fx: function (event) {\n                        this.order.processOverlay(this.el, this.show);\n                    }\n                };\n                obj.bfx = obj.fx.bindAsEventListener(obj);\n                this.overlayData.set(elId, obj);\n            } else {\n                obj.show = show;\n                Event.stopObserving(window, 'resize', obj.bfx);\n            }\n\n            Event.observe(window, 'resize', obj.bfx);\n\n            this.processOverlay(elId, show);\n        },\n\n        processOverlay: function (elId, show) {\n            var el = $(elId);\n\n            if (!el) {\n                return;\n            }\n\n            var parentEl = el.up(1);\n            if (show) {\n                parentEl.removeClassName('ignore-validate');\n            } else {\n                parentEl.addClassName('ignore-validate');\n            }\n\n            if (Prototype.Browser.IE) {\n                parentEl.select('select').each(function (elem) {\n                    if (show) {\n                        elem.needShowOnSuccess = false;\n                        elem.style.visibility = '';\n                    } else {\n                        elem.style.visibility = 'hidden';\n                        elem.needShowOnSuccess = true;\n                    }\n                });\n            }\n\n            parentEl.setStyle({position: 'relative'});\n            el.setStyle({\n                display: show ? 'none' : ''\n            });\n        },\n\n        validateVat: function (parameters) {\n            var params = {\n                country: $(parameters.countryElementId).value,\n                vat: $(parameters.vatElementId).value\n            };\n\n            if (this.storeId !== false) {\n                params.store_id = this.storeId;\n            }\n\n            var currentCustomerGroupId = $(parameters.groupIdHtmlId)\n                ? $(parameters.groupIdHtmlId).value : '';\n\n            new Ajax.Request(parameters.validateUrl, {\n                parameters: params,\n                onSuccess: function (response) {\n                    var message = '';\n                    var groupActionRequired = null;\n                    try {\n                        response = response.responseText.evalJSON();\n\n                        if (null === response.group) {\n                            if (true === response.valid) {\n                                message = parameters.vatValidMessage;\n                            } else if (true === response.success) {\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\n                            } else {\n                                message = parameters.vatValidationFailedMessage;\n                            }\n                        } else {\n                            if (true === response.valid) {\n                                message = parameters.vatValidAndGroupValidMessage;\n                                if (0 === response.group) {\n                                    message = parameters.vatValidAndGroupInvalidMessage;\n                                    groupActionRequired = 'inform';\n                                } else if (currentCustomerGroupId != response.group) {\n                                    message = parameters.vatValidAndGroupChangeMessage;\n                                    groupActionRequired = 'change';\n                                }\n                            } else if (response.success) {\n                                message = parameters.vatInvalidMessage.replace(/%s/, params.vat);\n                                groupActionRequired = 'inform';\n                            } else {\n                                message = parameters.vatValidationFailedMessage;\n                                groupActionRequired = 'inform';\n                            }\n                        }\n                    } catch (e) {\n                        message = parameters.vatValidationFailedMessage;\n                    }\n                    if (null === groupActionRequired) {\n                        alert({\n                            content: message\n                        });\n                    } else {\n                        this.processCustomerGroupChange(\n                            parameters.groupIdHtmlId,\n                            message,\n                            parameters.vatCustomerGroupMessage,\n                            parameters.vatGroupErrorMessage,\n                            response.group,\n                            groupActionRequired\n                        );\n                    }\n                }.bind(this)\n            });\n        },\n\n        processCustomerGroupChange: function (groupIdHtmlId, message, customerGroupMessage, errorMessage, groupId, action) {\n            var groupMessage = '';\n            try {\n                var currentCustomerGroupId = $(groupIdHtmlId).value;\n                var currentCustomerGroupTitle =\n                    $$('#' + groupIdHtmlId + ' > option[value=' + currentCustomerGroupId + ']')[0].text;\n                var customerGroupOption = $$('#' + groupIdHtmlId + ' > option[value=' + groupId + ']')[0];\n                groupMessage = customerGroupMessage.replace(/%s/, customerGroupOption.text);\n            } catch (e) {\n                groupMessage = errorMessage;\n                if (action === 'change') {\n                    message = '';\n                    action = 'inform';\n                }\n            }\n\n            if (action === 'change') {\n                var confirmText = message.replace(/%s/, customerGroupOption.text);\n                confirmText = confirmText.replace(/%s/, currentCustomerGroupTitle);\n                confirm({\n                    content: confirmText,\n                    actions: {\n                        confirm: function() {\n                            $$('#' + groupIdHtmlId + ' option').each(function (o) {\n                                o.selected = o.readAttribute('value') == groupId;\n                            });\n                            this.accountGroupChange();\n                        }.bind(this)\n                    }\n                })\n            } else if (action === 'inform') {\n                alert({\n                    content: message + '\\n' + groupMessage\n                });\n            }\n        }\n    };\n\n    window.OrderFormArea = Class.create();\n    OrderFormArea.prototype = {\n        _name: null,\n        _node: null,\n        _parent: null,\n        _callbackName: null,\n\n        initialize: function (name, node, parent) {\n            if (!node)\n                return;\n            this._name = name;\n            this._parent = parent;\n            this._callbackName = node.callback;\n            if (typeof this._callbackName == 'undefined') {\n                this._callbackName = name + 'Loaded';\n                node.callback = this._callbackName;\n            }\n            parent[this._callbackName] = parent[this._callbackName].wrap((function (proceed) {\n                proceed();\n                this.onLoad();\n            }).bind(this));\n\n            this.setNode(node);\n        },\n\n        setNode: function (node) {\n            if (!node.callback) {\n                node.callback = this._callbackName;\n            }\n            this.node = node;\n        },\n\n        onLoad: function () {\n        }\n    };\n\n    window.ControlButton = Class.create();\n\n    ControlButton.prototype = {\n        _label: '',\n        _node: null,\n\n        initialize: function (label, id) {\n            this._label = label;\n            this._node = new Element('button', {\n                'class': 'action-secondary action-add',\n                'type': 'button'\n            });\n            if (typeof id !== 'undefined') {\n                this._node.setAttribute('id', id)\n            }\n        },\n\n        onClick: function () {\n        },\n\n        insertIn: function (element, position) {\n            var node = Object.extend(this._node),\n                content = {};\n            node.observe('click', this.onClick);\n            node.update('<span>' + this._label + '</span>');\n            content[position] = node;\n            Element.insert(element, content);\n        },\n\n        getLabel: function () {\n            return this._label;\n        }\n    };\n});\n","Magento_Sales/order/edit/message.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'Magento_Ui/js/modal/modal',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.orderEditDialog', {\n        options: {\n            url:     null,\n            message: null,\n            modal:  null\n        },\n\n        /**\n         * @protected\n         */\n        _create: function () {\n            this._prepareDialog();\n        },\n\n        /**\n         * Show modal\n         */\n        showDialog: function () {\n            this.options.dialog.html(this.options.message).modal('openModal');\n        },\n\n        /**\n         * Redirect to edit page\n         */\n        redirect: function () {\n            window.location = this.options.url;\n        },\n\n        /**\n         * Prepare modal\n         * @protected\n         */\n        _prepareDialog: function () {\n            var self = this;\n\n            this.options.dialog = $('<div class=\"ui-dialog-content ui-widget-content\"></div>').modal({\n                type: 'popup',\n                modalClass: 'edit-order-popup',\n                title: $.mage.__('Edit Order'),\n                buttons: [{\n                    text: $.mage.__('Ok'),\n                    'class': 'action-primary',\n\n                    /** @inheritdoc */\n                    click: function () {\n                        self.redirect();\n                    }\n                }]\n            });\n        }\n    });\n\n    return $.mage.orderEditDialog;\n});\n","Magento_Sales/order/edit/address/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    /**\n     * Currently Magento App stores both  region_id and region (as text) values.\n     * To prevent missing region (as text) we need to copy it in hidden field.\n     * @param {Array} config\n     * @param {String} element\n     */\n    return function (config, element) {\n        var form = $(element),\n            regionId = form.find('#region_id'),\n\n            /**\n             * Set region callback\n             */\n            setRegion = function () {\n                form.find('#region').val(regionId.filter(':visible').find(':selected').text());\n            };\n\n        if (regionId.is('visible')) {\n            setRegion();\n        }\n\n        regionId.on('change', setRegion);\n        form.find('#country_id').on('change', setRegion);\n    };\n});\n","Magento_Sales/order/view/post-wrapper.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, confirm) {\n    'use strict';\n\n    /**\n     * @param {String} url\n     * @returns {jQuery}\n     */\n    function getForm(url) {\n        return $('<form>', {\n            'action': url,\n            'method': 'POST'\n        }).append($('<input>', {\n            'name': 'form_key',\n            'value': window.FORM_KEY,\n            'type': 'hidden'\n        }));\n    }\n\n    $('#order-view-cancel-button').on('click', function () {\n        var msg = $.mage.__('Are you sure you want to cancel this order?'),\n            url = $('#order-view-cancel-button').data('url');\n\n        confirm({\n            'content': msg,\n            'actions': {\n\n                /**\n                 * 'Confirm' action handler.\n                 */\n                confirm: function () {\n                    getForm(url).appendTo('body').trigger('submit');\n                }\n            }\n        });\n\n        return false;\n    });\n\n    $('#order-view-hold-button').on('click', function () {\n        var url = $('#order-view-hold-button').data('url');\n\n        getForm(url).appendTo('body').trigger('submit');\n    });\n\n    $('#order-view-unhold-button').on('click', function () {\n        var url = $('#order-view-unhold-button').data('url');\n\n        getForm(url).appendTo('body').trigger('submit');\n    });\n});\n","Magento_Customer/edit/post-wrapper.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/confirm',\n    'mage/translate'\n], function ($, confirm) {\n    'use strict';\n\n    /**\n     * @param {String} url\n     * @returns {Object}\n     */\n    function getForm(url) {\n        return $('<form>', {\n            'action': url,\n            'method': 'POST'\n        }).append($('<input>', {\n            'name': 'form_key',\n            'value': window.FORM_KEY,\n            'type': 'hidden'\n        }));\n    }\n\n    $('#customer-edit-delete-button').on('click', function () {\n        var msg = $.mage.__('Are you sure you want to do this?'),\n            url = $('#customer-edit-delete-button').data('url');\n\n        confirm({\n            'content': msg,\n            'actions': {\n\n                /**\n                 * 'Confirm' action handler.\n                 */\n                confirm: function () {\n                    getForm(url).appendTo('body').submit();\n                }\n            }\n        });\n\n        return false;\n    });\n});\n","Magento_Customer/js/address/default-address.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/button',\n    'underscore'\n], function (Button, _) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            entityId: null,\n            parentId: null,\n            listens: {\n                entity: 'changeVisibility'\n            }\n        },\n\n        /**\n         * Apply action on target component,\n         * but previously create this component from template if it is not existed\n         *\n         * @param {Object} action - action configuration\n         */\n        applyAction: function (action) {\n            if (action.params && action.params[0]) {\n                action.params[0]['entity_id'] = this.entityId;\n                action.params[0]['parent_id'] = this.parentId;\n            } else {\n                action.params = [{\n                    'entity_id': this.entityId,\n                    'parent_id': this.parentId\n                }];\n            }\n\n            this._super();\n        },\n\n        /**\n         * Change visibility of the default address shipping/billing blocks\n         *\n         * @param {Object} entity - customer address\n         */\n        changeVisibility: function (entity) {\n            this.visible(!_.isEmpty(entity));\n        }\n    });\n});\n","Magento_Customer/js/bootstrap/customer-post-action.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'Magento_Customer/edit/post-wrapper'\n]);\n","Magento_Customer/js/form/components/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'Magento_Ui/js/modal/confirm',\n    'Magento_Ui/js/form/form',\n    'underscore',\n    'mage/translate'\n], function ($, uiAlert, uiConfirm, Form, _, $t) {\n    'use strict';\n\n    return Form.extend({\n        defaults: {\n            deleteConfirmationMessage: '',\n            ajaxSettings: {\n                method: 'POST',\n                dataType: 'json'\n            }\n        },\n\n        /**\n         * Delete customer address by provided url.\n         * Will call confirmation message to be sure that user is really wants to delete this address\n         *\n         * @param {String} url - ajax url\n         */\n        deleteAddress: function (url) {\n            var that = this;\n\n            uiConfirm({\n                content: this.deleteConfirmationMessage,\n                actions: {\n                    /** @inheritdoc */\n                    confirm: function () {\n                        that._delete(url);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Perform asynchronous DELETE request to server.\n         * @param {String} url - ajax url\n         * @returns {Deferred}\n         */\n        _delete: function (url) {\n            var settings = _.extend({}, this.ajaxSettings, {\n                    url: url,\n                    data: {\n                        'form_key': window.FORM_KEY\n                    }\n                }),\n                that = this;\n\n            $('body').trigger('processStart');\n\n            return $.ajax(settings)\n                .done(function (response) {\n                    if (response.error) {\n                        uiAlert({\n                            content: response.message\n                        });\n                    } else {\n                        that.trigger('deleteAddressAction', that.source.get('data.entity_id'));\n                    }\n                })\n                .fail(function () {\n                    uiAlert({\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\n                    });\n                })\n                .always(function () {\n                    $('body').trigger('processStop');\n                });\n\n        }\n    });\n});\n","Magento_Customer/js/form/components/insert-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-form'\n], function (Insert) {\n    'use strict';\n\n    return Insert.extend({\n        defaults: {\n            listens: {\n                responseData: 'onResponse'\n            },\n            modules: {\n                addressListing: '${ $.addressListingProvider }',\n                addressModal: '${ $.addressModalProvider }'\n            }\n        },\n\n        /**\n         * Close modal, reload customer address listing and save customer address\n         *\n         * @param {Object} responseData\n         */\n        onResponse: function (responseData) {\n            var data;\n\n            if (!responseData.error) {\n                this.addressModal().closeModal();\n                this.addressListing().reload({\n                    refresh: true\n                });\n                data = this.externalSource().get('data');\n                this.saveAddress(responseData, data);\n            }\n        },\n\n        /**\n         * Save customer address to customer form data source\n         *\n         * @param {Object} responseData\n         * @param {Object} data - customer address\n         */\n        saveAddress: function (responseData, data) {\n            data['entity_id'] = responseData.data['entity_id'];\n\n            if (parseFloat(data['default_billing'])) {\n                this.source.set('data.default_billing_address', data);\n            } else if (\n                parseFloat(this.source.get('data.default_billing_address')['entity_id']) === data['entity_id']\n            ) {\n                this.source.set('data.default_billing_address', []);\n            }\n\n            if (parseFloat(data['default_shipping'])) {\n                this.source.set('data.default_shipping_address', data);\n            } else if (\n                parseFloat(this.source.get('data.default_shipping_address')['entity_id']) === data['entity_id']\n            ) {\n                this.source.set('data.default_shipping_address', []);\n            }\n        },\n\n        /**\n         * Event method that closes \"Edit customer address\" modal and refreshes grid after customer address\n         * was removed through \"Delete\" button on the \"Edit customer address\" modal\n         *\n         * @param {String} id - customer address ID to delete\n         */\n        onAddressDelete: function (id) {\n            this.addressModal().closeModal();\n            this.addressListing().reload({\n                refresh: true\n            });\n            this.addressListing()._delete([parseFloat(id)]);\n        }\n    });\n});\n","Magento_Customer/js/form/components/insert-listing.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/components/insert-listing',\n    'underscore'\n], function (Insert, _) {\n    'use strict';\n\n    return Insert.extend({\n\n        /**\n         * On action call\n         *\n         * @param {Object} data - customer address and actions\n         */\n        onAction: function (data) {\n            this[data.action + 'Action'].call(this, data.data);\n        },\n\n        /**\n         * On mass action call\n         *\n         * @param {Object} data - customer address\n         */\n        onMassAction: function (data) {\n            this[data.action + 'Massaction'].call(this, data.data);\n        },\n\n        /**\n         * Set default billing address\n         *\n         * @param {Object} data - customer address\n         */\n        setDefaultBillingAction: function (data) {\n            this.source.set('data.default_billing_address', data);\n        },\n\n        /**\n         * Set default shipping address\n         *\n         * @param {Object} data - customer address\n         */\n        setDefaultShippingAction: function (data) {\n            this.source.set('data.default_shipping_address', data);\n        },\n\n        /**\n         * Delete customer address\n         *\n         * @param {Object} data - customer address\n         */\n        deleteAction: function (data) {\n            this._delete([parseFloat(data[data['id_field_name']])]);\n        },\n\n        /**\n         * Mass action delete\n         *\n         * @param {Object} data - customer address\n         */\n        deleteMassaction: function (data) {\n            var ids = data.selected || this.selections().selected();\n\n            ids = _.map(ids, function (val) {\n                return parseFloat(val);\n            });\n\n            this._delete(ids);\n        },\n\n        /**\n         * Delete customer address and selections by provided ids.\n         *\n         * @param {Array} ids\n         */\n        _delete: function (ids) {\n            var defaultShippingId = parseFloat(this.source.get('data.default_shipping_address.entity_id')),\n                defaultBillingId = parseFloat(this.source.get('data.default_billing_address.entity_id'));\n\n            if (ids.indexOf(defaultShippingId) !== -1) {\n                this.source.set('data.default_shipping_address', []);\n            }\n\n            if (ids.indexOf(defaultBillingId) !== -1) {\n                this.source.set('data.default_billing_address', []);\n            }\n\n            _.each(ids, function (id) {\n                this.selections().deselect(id.toString(), false);\n            }, this);\n        }\n    });\n});\n","Magento_Customer/js/form/element/country.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/country'\n], function (Country) {\n    'use strict';\n\n    return Country.extend({\n        defaults: {\n            countryScope: 'data.country'\n        },\n\n        /**\n         * Set country to customer address form\n         *\n         * @param {String} value - country\n         */\n        setDifferedFromDefault: function (value) {\n            this._super();\n\n            if (value) {\n                this.source.set(this.countryScope, this.indexedOptions[value].label);\n            }\n        }\n    });\n});\n","Magento_Customer/js/form/element/region.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/region'\n], function (Region) {\n    'use strict';\n\n    return Region.extend({\n        defaults: {\n            regionScope: 'data.region'\n        },\n\n        /**\n         * Set region to customer address form\n         *\n         * @param {String} value - region\n         */\n        setDifferedFromDefault: function (value) {\n            this._super();\n\n            if (parseFloat(value)) {\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\n            }\n        }\n    });\n});\n","Magento_Customer/js/form/element/website.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/website',\n    'uiRegistry'\n], function (Website, registry) {\n    'use strict';\n\n    return Website.extend({\n        /**\n         * On value change handler.\n         *\n         * @param {String} value\n         */\n        onUpdate: function (value) {\n            var groupIdFieldKey = 'group_id',\n                sendEmailStoreIdFieldKey = 'sendemail_store_id',\n                groupId = registry.get('index = ' + groupIdFieldKey),\n                sendEmailStoreId = registry.get('index = ' + sendEmailStoreIdFieldKey),\n                option = this.getOption(value);\n\n            if (groupId) {\n                groupId.value(option[groupIdFieldKey]);\n            }\n\n            if (sendEmailStoreId && option['default_store_view_id']) {\n                sendEmailStoreId.value(option['default_store_view_id']);\n            }\n            return this._super();\n        }\n    });\n});\n","Magento_Customer/js/grid/massactions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/massactions',\n    'Magento_Ui/js/modal/alert',\n    'underscore',\n    'jquery',\n    'mage/translate'\n], function (Massactions, uiAlert, _, $, $t) {\n    'use strict';\n\n    return Massactions.extend({\n        defaults: {\n            ajaxSettings: {\n                method: 'POST',\n                dataType: 'json'\n            },\n            listens: {\n                massaction: 'onAction'\n            }\n        },\n\n        /**\n         * Reload customer addresses listing\n         *\n         * @param {Object} data\n         */\n        onAction: function (data) {\n            if (data.action === 'delete') {\n                this.source.reload({\n                    refresh: true\n                });\n            }\n        },\n\n        /**\n         * Default action callback. Send selections data\n         * via POST request.\n         *\n         * @param {Object} action - Action data.\n         * @param {Object} data - Selections data.\n         */\n        defaultCallback: function (action, data) {\n            var itemsType, selections;\n\n            if (action.isAjax) {\n                itemsType = data.excludeMode ? 'excluded' : 'selected';\n                selections = {};\n\n                selections[itemsType] = data[itemsType];\n\n                if (!selections[itemsType].length) {\n                    selections[itemsType] = false;\n                }\n\n                _.extend(selections, data.params || {});\n\n                this.request(action.url, selections).done(function (response) {\n                    if (!response.error) {\n                        this.trigger('massaction', {\n                            action: action.type,\n                            data: selections\n                        });\n                    }\n                }.bind(this));\n            } else {\n                this._super();\n            }\n        },\n\n        /**\n         * Send customer address listing mass action ajax request\n         *\n         * @param {String} href\n         * @param {Object} data\n         */\n        request: function (href, data) {\n            var settings = _.extend({}, this.ajaxSettings, {\n                url: href,\n                data: data\n            });\n\n            $('body').trigger('processStart');\n\n            return $.ajax(settings)\n                .done(function (response) {\n                    if (response.error) {\n                        uiAlert({\n                            content: response.message\n                        });\n                    }\n                })\n                .fail(function () {\n                    uiAlert({\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\n                    });\n                })\n                .always(function () {\n                    $('body').trigger('processStop');\n                });\n        }\n    });\n});\n","Magento_Customer/js/grid/columns/actions.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/columns/actions',\n    'Magento_Ui/js/modal/alert',\n    'underscore',\n    'jquery',\n    'mage/translate'\n], function (Actions, uiAlert, _, $, $t) {\n    'use strict';\n\n    return Actions.extend({\n        defaults: {\n            ajaxSettings: {\n                method: 'POST',\n                dataType: 'json'\n            },\n            listens: {\n                action: 'onAction'\n            },\n            ignoreTmpls: {\n                fieldAction: true,\n                options: true,\n                action: true\n            }\n        },\n\n        /**\n         * Reload customer address listing data source after customer address delete action\n         *\n         * @param {Object} data\n         */\n        onAction: function (data) {\n            if (data.action === 'delete') {\n                this.source().reload({\n                    refresh: true\n                });\n            }\n        },\n\n        /**\n         * Default action callback. Redirects to\n         * the specified in action's data url.\n         *\n         * @param {String} actionIndex - Action's identifier.\n         * @param {(Number|String)} recordId - Id of the record associated\n         *      with a specified action.\n         * @param {Object} action - Action's data.\n         */\n        defaultCallback: function (actionIndex, recordId, action) {\n            if (action.isAjax) {\n                this.request(action.href).done(function (response) {\n                    var data;\n\n                    if (!response.error) {\n                        data = _.findWhere(this.rows, {\n                            _rowIndex: action.rowIndex\n                        });\n\n                        this.trigger('action', {\n                            action: actionIndex,\n                            data: data\n                        });\n                    }\n                }.bind(this));\n\n            } else {\n                this._super();\n            }\n        },\n\n        /**\n         * Send customer address listing ajax request\n         *\n         * @param {String} href\n         */\n        request: function (href) {\n            var settings = _.extend({}, this.ajaxSettings, {\n                url: href,\n                data: {\n                    'form_key': window.FORM_KEY\n                }\n            });\n\n            $('body').trigger('processStart');\n\n            return $.ajax(settings)\n                .done(function (response) {\n                    if (response.error) {\n                        uiAlert({\n                            content: response.message\n                        });\n                    }\n                })\n                .fail(function () {\n                    uiAlert({\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\n                    });\n                })\n                .always(function () {\n                    $('body').trigger('processStop');\n                });\n        }\n    });\n});\n","Magento_Customer/js/grid/filters/chips.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/filters/chips'\n], function (Chips) {\n    'use strict';\n\n    return Chips.extend({\n\n        /**\n         * Clear previous filters while initializing element to prevent filters sharing between customers\n         *\n         * @param {Object} elem\n         */\n        initElement: function (elem) {\n            this.clear();\n            this._super(elem);\n        }\n    });\n});\n","Magento_Customer/js/grid/filters/filters.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/grid/filters/filters'\n], function (Filters) {\n    'use strict';\n\n    return Filters.extend({\n        defaults: {\n            chipsConfig: {\n                name: '${ $.name }_chips',\n                provider: '${ $.chipsConfig.name }',\n                component: 'Magento_Customer/js/grid/filters/chips'\n            }\n        }\n    });\n});\n","Magento_Integration/js/integration.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * jQuery plugin is added.\n *\n * @api\n */\ndefine([\n    'jquery',\n    'Magento_Ui/js/modal/alert',\n    'jquery/ui',\n    'mage/translate',\n    'Magento_Ui/js/modal/modal'\n], function ($, alert) {\n    'use strict';\n\n    $.widget('mage.integration', {\n        /**\n         * Options common to all instances of this widget.\n         * @type {Object}\n         */\n        options: {\n            /**\n             * URL of the integration grid.\n             * @type {String}\n             */\n            gridUrl: ''\n        },\n\n        /**\n         * Bind event handler for the action when admin clicks \"Save & Activate\" button.\n         * @private\n         */\n        _create: function () {\n            if ($('#save-split-button-activate').length) {\n                // We're on the \"New integration\" page - bind related handler\n                this._form = $('#edit_form');\n                this._form.on('saveAndActivate', $.proxy(this._saveAndActivate, this));\n            }\n        },\n\n        /**\n         * Save new integration, then kick off the activate dialog.\n         * @private\n         */\n        _saveAndActivate: function () {\n            if (this._form.validation && !this._form.validation('isValid')) {\n                return false;\n            }\n\n            $.ajax({\n                url: this._form.prop('action'),\n                type: 'post',\n                data: this._form.serialize(),\n                dataType: 'json',\n                context: this,\n\n                /** @inheritdoc */\n                beforeSend: function () {\n                    $('body').trigger('processStart');\n                },\n\n                /** @inheritdoc */\n                success: function (data) {\n                    var integrationName, that;\n\n                    if (data._redirect) {\n                        window.location.href = data._redirect;\n                    } else if (data.integrationId) {\n                        integrationName = $('#integration_properties_name').val();\n                        window.integration.popup.show($('<span>').attr({\n                            'data-row-dialog': 'permissions',\n                            'data-row-id': data.integrationId,\n                            // We do escaping here instead of the place of actual output because _showPopup()\n                            // actually receives dialog window title from couple of places: from here and from the grid.\n                            // The issue is we always should escape values in the grid, so that value is already\n                            // escaped. To avoid double escaping we do it here instead of the output.\n                            'data-row-name': $('<div>').text(integrationName).html(),\n                            'data-row-is-reauthorize': '0',\n                            'data-row-is-token-exchange': data.isTokenExchange\n                        }));\n                        that = this;\n                        $('#integration-popup-container').on('dialogclose', function () {\n                            $('body').trigger('processStart');\n                            window.location.href = that.options.gridUrl;\n\n                            return false;\n                        });\n                    }\n                },\n\n                /** @inheritdoc */\n                error: function (jqXHR, status, error) {\n                    alert({\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\n                    });\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\n                },\n\n                /** @inheritdoc */\n                complete: function () {\n                    $('body').trigger('processStop');\n                }\n            });\n\n            return true;\n        }\n    });\n\n    /**\n     * @param {*} permissionsDialogUrl\n     * @param {*} tokensDialogUrl\n     * @param {*} tokensExchangeUrl\n     * @param {*} gridUrl\n     * @param {*} successCallbackUrl\n     * @return {Object}\n     * @constructor\n     */\n    window.Integration = function (\n        permissionsDialogUrl,\n        tokensDialogUrl,\n        tokensExchangeUrl,\n        gridUrl,\n        successCallbackUrl\n    ) {\n        var url = {\n            permissions: permissionsDialogUrl,\n            tokens: tokensDialogUrl,\n            tokensExchange: tokensExchangeUrl,\n            grid: gridUrl\n        },\n        IdentityLogin = {\n            win: null,\n            strLocation: null,\n            checker: null,\n            isCalledBack: false,\n            //Info popup dialog. Should be hidden when login window is closed\n            jqInfoDialog: $('#integration-popup-container'),\n            successCallbackUrl: successCallbackUrl,\n            Constants: {\n                /*\n                 This interval is set such that it adjusts to the child window closing timeout of 1000 ms. This will\n                 give the checker function enough time to detect if the successCallback has been invoked\n                 */\n                CHECKER_INTERVAL: 500,\n                //Login screen size plus some buffer\n                WIDTH: 680,\n                HEIGHT: 510,\n                // subtract pixels(30) and width(680) from screen width to move popup from extreme left\n                LEFT: screen.width - 680 - 30,\n                // subtract pixels(300) and height(300) from screen height to move from top\n                TOP: screen.height - 510 - 300\n            },\n\n            /**\n             * @param {*} identityCallbackUrl\n             * @param {*} consumerKey\n             * @param {*} jqInfoDialog\n             */\n            invokePopup: function (identityCallbackUrl, consumerKey, jqInfoDialog) {\n                var param;\n\n                // Callback should be invoked only once. Reset callback flag on subsequent invocations.\n                IdentityLogin.isCalledBack = false;\n                IdentityLogin.jqInfoDialog = jqInfoDialog;\n                param = $.param({\n                    'oauth_consumer_key': consumerKey,\n                    'success_call_back': IdentityLogin.successCallbackUrl\n                });\n                IdentityLogin.win = window.open(identityCallbackUrl + '?' + param, '',\n                    'top=' + IdentityLogin.Constants.TOP +\n                        ', left=' + IdentityLogin.Constants.LEFT +\n                        ', width=' + IdentityLogin.Constants.WIDTH +\n                        ', height=' + IdentityLogin.Constants.HEIGHT + ',scrollbars=no');\n\n                if (IdentityLogin.checker != null) {\n                    //Clear any previous check\n                    clearInterval(IdentityLogin.checker);\n                }\n                //Polling to detect url of the child window.\n                IdentityLogin.checker = setInterval(\n                    IdentityLogin.fnCheckLocation, IdentityLogin.Constants.CHECKER_INTERVAL\n                );\n            },\n\n            /**\n             * Function to check the location of the child popup window.\n             * Once detected if the callback is successful, parent window will be reloaded\n             */\n            fnCheckLocation: function () {\n                if (IdentityLogin.win == null) {\n                    return;\n                }\n                // Check to see if the location has changed.\n                try {\n                    //Is the success callback invoked\n                    if (IdentityLogin.win.closed ||\n                        IdentityLogin.win.location.href == IdentityLogin.successCallbackUrl //eslint-disable-line eqeqeq\n                    ) {\n                        //Stop the polling\n                        clearInterval(IdentityLogin.checker);\n                        $('body').trigger('processStart');\n                        //Check for window closed\n                        window.location.href = url.grid;\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\n                    }\n                } catch (e) {\n                    //squash. In case Window closed without success callback, clear polling\n                    if (IdentityLogin.win.closed) {\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\n                        clearInterval(IdentityLogin.checker);\n                    }\n\n                    return;\n                }\n            }\n        },\n\n        /**\n         * @param {Object} popupWindow\n         * @return {Boolean}\n         */\n        isPopupBlocked = function (popupWindow) {\n            try {\n                popupWindow.focus();\n            } catch (e) {\n                alert({\n                    content: $.mage.__('Popup Blocker is enabled! Please add this site to your exception list.')\n                });\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * @param {*} dialog\n         * @param {*} title\n         * @param {*} okButton\n         * @param {*} ajaxUrl\n         * @private\n         */\n        _showPopup = function (dialog, title, okButton, ajaxUrl) {\n            $.ajax({\n                url: ajaxUrl,\n                cache: false,\n                data: {\n                    'form_key': window.FORM_KEY\n                },\n                method: 'GET',\n\n                /** @inheritdoc */\n                beforeSend: function () {\n                    // Show the spinner\n                    $('body').trigger('processStart');\n                },\n\n                /** @inheritdoc */\n                success: function (result) {\n                    var redirect = result._redirect,\n                        identityLinkUrl, consumerKey, popupHtml, popup, resultObj, buttons, dialogProperties;\n\n                    if (redirect) {\n                        window.location.href = redirect;\n\n                        return;\n                    }\n\n                    identityLinkUrl = null;\n                    consumerKey = null;\n                    popupHtml = null;\n                    popup = $('#integration-popup-container');\n\n                    try {\n                        resultObj = typeof result === 'string' ?\n                            JSON.parse(result) :\n                            result;\n\n                        identityLinkUrl = resultObj['identity_link_url'];\n                        consumerKey      = resultObj['oauth_consumer_key'];\n                        popupHtml       = resultObj['popup_content'];\n\n                    } catch (e) {\n                        //This is expected if result is not json. Do nothing.\n                    }\n\n                    if (identityLinkUrl && consumerKey && popupHtml) {\n                        IdentityLogin.invokePopup(identityLinkUrl, consumerKey, popup);\n\n                        if (isPopupBlocked(IdentityLogin.win)) {\n                            return;\n                        }\n                    } else {\n                        popupHtml = result;\n                    }\n\n                    if (popup.length === 0) {\n                        popup = $('<div></div>');\n                    }\n                    popup.html(popupHtml);\n\n                    buttons = [];\n                    dialogProperties = {\n                        title: title,\n                        type: 'slide',\n                        dialogClass: dialog == 'permissions' ? 'integration-dialog' : 'integration-dialog no-close' //eslint-disable-line\n                    };\n\n                    // Add confirmation button to the list of dialog buttons. okButton not set for tokenExchange dialog\n                    if (okButton) {\n                        buttons.push(okButton);\n                    }\n                    // Add button only if its not empty\n                    if (buttons.length > 0) {\n                        dialogProperties.buttons = buttons;\n                    }\n                    popup.modal(dialogProperties);\n                    popup.modal('openModal');\n                },\n\n                /** @inheritdoc */\n                error: function (jqXHR, status, error) {\n                    alert({\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\n                    });\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\n                },\n\n                /** @inheritdoc */\n                complete: function () {\n                    // Hide the spinner\n                    $('body').trigger('processStop');\n                }\n            });\n        };\n\n        return {\n            popup: {\n                /**\n                 * @param {*} ctx\n                 */\n                show: function (ctx) {\n                    var dialog = $(ctx).attr('data-row-dialog'),\n                        isReauthorize = $(ctx).attr('data-row-is-reauthorize'),\n                        isTokenExchange = $(ctx).attr('data-row-is-token-exchange'),\n                        integrationId, ajaxUrl, integrationName, okButton;\n\n                    if (!url.hasOwnProperty(dialog)) {\n                        throw 'Invalid dialog type';\n                    }\n\n                    integrationId = $(ctx).attr('data-row-id');\n\n                    if (!integrationId) {\n                        throw 'Unable to find integration ID';\n                    }\n\n                    // Replace placeholders in URL\n                    ajaxUrl = url[dialog].replace(':id', integrationId).replace(':isReauthorize', isReauthorize);\n\n                    try {\n                        // Get integration name either from current element or from neighbor column\n                        integrationName = $(ctx).attr('data-row-name') ||\n                            $(ctx).parents('tr').find('.col-name').html().trim(); // eslint-disable-line jquery-no-trim\n\n                        if (integrationName.indexOf('<span') > -1) {\n                            // Remove unsecure URL warning from popup window title if it is present\n                            integrationName = integrationName.substring(0, integrationName.indexOf('<span'));\n                        }\n                    } catch (e) {\n                        throw 'Unable to find integration name';\n                    }\n\n                    okButton = {\n                        permissions: {\n                            text: isReauthorize == '1' ? $.mage.__('Reauthorize') : $.mage.__('Allow'), //eslint-disable-line\n                            'class': 'action-primary',\n                            attr: {\n                                'data-row-id': integrationId,\n                                'data-row-name': integrationName,\n                                'data-row-dialog': isTokenExchange == '1' ? 'tokensExchange' : 'tokens', //eslint-disable-line\n                                'data-row-is-reauthorize': isReauthorize,\n                                'data-row-is-token-exchange': isTokenExchange\n                            },\n\n                            /**\n                             * Click.\n                             */\n                            click: function () {\n                                // Find the 'Allow' button and clone - it has all necessary data, but is going to be\n                                // destroyed along with the current dialog\n                                var context = this.modal.find('button.action-primary').clone(true);\n\n                                this.closeModal();\n                                this.modal.remove();\n                                // Make popup out of data we saved from 'Allow' button\n                                window.integration.popup.show(context);\n                            }\n                        },\n                        tokens: {\n                            text: $.mage.__('Done'),\n                            'class': 'action-primary',\n\n                            /**\n                             * Click.\n                             */\n                            click: function () {\n                                // Integration has been activated at the point of generating tokens\n                                window.location.href = url.grid;\n                            }\n                        }\n                    };\n\n                    _showPopup(dialog, integrationName, okButton[dialog], ajaxUrl);\n                }\n            }\n        };\n    };\n\n    return $.mage.integration;\n});\n","Magento_User/js/delete-user-account.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    var postData;\n\n    return function (params, elem) {\n\n        elem.on('click', function () {\n\n            postData = {\n                'data': {\n                    'user_id': params.objId,\n                    'current_password': $('[name=\"current_password\"]').val()\n                }\n            };\n\n            if ($.validator.validateElement($('[name=\"current_password\"]'))) {\n                window.deleteConfirm(params.message, params.url, postData);\n            }\n        });\n    };\n});\n","Magento_User/js/roles-tree.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'jquery',\n    'jquery/ui',\n    'jquery/jstree/jquery.jstree'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.rolesTree', {\n        options: {\n            treeInitData: {},\n            editFormSelector: '',\n            resourceFieldName: 'resource[]',\n            checkboxVisible: true\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this.element.jstree({\n                plugins: ['checkbox'],\n                checkbox: {\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    three_state: false,\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    visible: this.options.checkboxVisible,\n                    cascade: 'undetermined'\n                },\n                core: {\n                    data: this.options.treeInitData,\n                    themes: {\n                        dots: false\n                    }\n                }\n            });\n            this._bind();\n        },\n\n        /**\n         * @private\n         */\n        _destroy: function () {\n            this.element.jstree('destroy');\n        },\n\n        /**\n         * @private\n         */\n        _bind: function () {\n            this.element.on('select_node.jstree', $.proxy(this._selectChildNodes, this));\n            this.element.on('deselect_node.jstree', $.proxy(this._deselectChildNodes, this));\n            this.element.on('changed.jstree', $.proxy(this._changedNode, this));\n        },\n\n        /**\n         * @param {Event} event\n         * @param {Object} selected\n         * @private\n         */\n        _selectChildNodes: function (event, selected) {\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            selected.instance.open_node(selected.node);\n            selected.node.children.each(function (id) {\n                var selector = '[id=\"' + id + '\"]';\n\n                selected.instance.select_node(\n                    selected.instance.get_node($(selector), false)\n                );\n            });\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n        },\n\n        /**\n         * @param {Event} event\n         * @param {Object} selected\n         * @private\n         */\n        _deselectChildNodes: function (event, selected) {\n            selected.node.children.each(function (id) {\n                var selector = '[id=\"' + id + '\"]';\n\n                // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                selected.instance.deselect_node(\n                    selected.instance.get_node($(selector), false)\n                );\n                // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n            });\n        },\n\n        /**\n         * Add selected resources to form to be send later\n         *\n         * @param {Event} event\n         * @param {Object} selected\n         * @private\n         */\n        _changedNode: function (event, selected) {\n            var form = $(this.options.editFormSelector),\n                fieldName = this.options.resourceFieldName,\n                items = selected.selected.concat($(this.element).jstree('get_undetermined'));\n\n            if (this.options.editFormSelector === '') {\n                return;\n            }\n            form.find('input[name=\"' + this.options.resourceFieldName +  '\"]').remove();\n            items.each(function (id) {\n                $('<input>', {\n                    type: 'hidden',\n                    name: fieldName,\n                    value: id\n                }).appendTo(form);\n            });\n        }\n    });\n\n    return $.mage.rolesTree;\n});\n","Magento_Cms/js/folder-tree.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery/ui',\n    'jquery/jstree/jquery.jstree'\n], function ($) {\n    'use strict';\n\n    $.widget('mage.folderTree', {\n        options: {\n            root: 'root',\n            rootName: 'Root',\n            url: '',\n            currentPath: ['root'],\n            tree: {\n                core: {\n                    themes: {\n                        dots: false\n                    },\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    check_callback: true\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                }\n            }\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            var options = this.options,\n                treeOptions = $.extend(\n                    true,\n                    {},\n                    options.tree,\n                    {\n                        core: {\n                            data: {\n                                url: options.url,\n                                type: 'POST',\n                                dataType: 'text',\n                                dataFilter: $.proxy(function (data) {\n                                    return this._convertData(JSON.parse(data));\n                                }, this),\n\n                                /**\n                                 * @param {HTMLElement} node\n                                 * @return {Object}\n                                 */\n                                data: function (node) {\n                                    return {\n                                        node: node.id === 'root' ? null : node.id,\n                                        'form_key': window.FORM_KEY\n                                    };\n                                }\n                            }\n                        }\n                    }\n                );\n\n            this.element.jstree(treeOptions)\n                .on('ready.jstree', $.proxy(this.treeLoaded, this))\n                .on('load_node.jstree', $.proxy(this._createRootNode, this));\n        },\n\n        /**\n         * Tree loaded.\n         */\n        treeLoaded: function () {\n            var path = this.options.currentPath,\n                tree = this.element,\n                lastExistentFolderEl,\n\n                /**\n                 * Recursively open folders specified in path array.\n                 */\n                recursiveOpen = function () {\n                    var folderEl = $('[data-id=\"' + path.pop() + '\"]');\n\n                    // if folder doesn't exist, select the last opened folder\n                    if (!folderEl.length) {\n                        tree.jstree('select_node', lastExistentFolderEl);\n\n                        return;\n                    }\n\n                    lastExistentFolderEl = folderEl;\n\n                    if (path.length) {\n                        tree.jstree('open_node', folderEl, recursiveOpen);\n                    } else {\n                        tree.jstree('open_node', folderEl, function () {\n                            tree.jstree('select_node', folderEl);\n                        });\n                    }\n                };\n\n            recursiveOpen();\n        },\n\n        /**\n         * Create tree root node\n         *\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @private\n         */\n        _createRootNode: function (event, data) {\n            var rootNode, children;\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (data.node.id === '#') {\n                rootNode = {\n                    id: this.options.root,\n                    text: this.options.rootName,\n                    li_attr: {\n                        'data-id': this.options.root\n                    }\n                };\n                children = data.node.children;\n\n                data.instance.element.jstree().create_node(null, rootNode, 'first', function () {\n                    data.instance.element.jstree().move_node(children, rootNode.id);\n                });\n            }\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n        },\n\n        /**\n         * @param {*} data\n         * @return {*}\n         * @private\n         */\n        _convertData: function (data) {\n            return $.map(data, function (node) {\n\n                return {\n                    id: node.id,\n                    text: node.text,\n                    path: node.path,\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n                    li_attr: {\n                        'data-id': node.id\n                    },\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n                    children: node.children\n                };\n            });\n        }\n    });\n\n    return $.mage.folderTree;\n});\n","Magento_Email/js/variables.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/* global Variables, updateElementAtCursor */\ndefine([\n    'jquery',\n    'mage/translate',\n    'Magento_Ui/js/modal/modal',\n    'jquery/ui',\n    'prototype'\n], function (jQuery, $t) {\n    'use strict';\n\n    window.Variables = {\n        textareaElementId: null,\n        variablesContent: null,\n        dialogWindow: null,\n        dialogWindowId: 'variables-chooser',\n        overlayShowEffectOptions: null,\n        overlayHideEffectOptions: null,\n        insertFunction: 'Variables.insertVariable',\n        variablesValue: [],\n\n        /**\n         * @param {*} textareaElementId\n         * @param {Function} insertFunction\n         */\n        init: function (textareaElementId, insertFunction) {\n            if ($(textareaElementId)) {\n                this.textareaElementId = textareaElementId;\n            }\n\n            if (insertFunction) {\n                this.insertFunction = insertFunction;\n            }\n        },\n\n        /**\n         * reset data.\n         */\n        resetData: function () {\n            this.variablesContent = null;\n            this.dialogWindow = null;\n        },\n\n        /**\n         * @param {Object} variables\n         */\n        openVariableChooser: function (variables) {\n            if (this.variablesContent == null && variables) {\n                this.variablesContent = '<ul class=\"insert-variable\">';\n                variables.each(function (variableGroup) {\n                    if (variableGroup.label && variableGroup.value) {\n                        this.variablesContent += '<li><b>' + variableGroup.label.escapeHTML() + '</b></li>';\n                        variableGroup.value.each(function (variable) {\n                            if (variable.value && variable.label) {\n                                this.variablesValue.push(variable.value);\n                                this.variablesContent += '<li>' +\n                                    this.prepareVariableRow(this.variablesValue.length, variable.label) + '</li>';\n                            }\n                        }.bind(this));\n                    }\n                }.bind(this));\n                this.variablesContent += '</ul>';\n            }\n\n            if (this.variablesContent) {\n                this.openDialogWindow(this.variablesContent);\n            }\n        },\n\n        /**\n         * @param {*} variablesContent\n         */\n        openDialogWindow: function (variablesContent) {\n            var windowId = this.dialogWindowId;\n\n            jQuery('<div id=\"' + windowId + '\">' + variablesContent + '</div>').modal({\n                title: $t('Insert Variable...'),\n                type: 'slide',\n                buttons: [],\n\n                /** @inheritdoc */\n                closed: function (e, modal) {\n                    modal.modal.remove();\n                }\n            });\n\n            jQuery('#' + windowId).modal('openModal');\n        },\n\n        /**\n         * Close dialog window.\n         */\n        closeDialogWindow: function () {\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\n        },\n\n        /**\n         * @param {Number} index\n         * @param {*} varLabel\n         * @return {String}\n         */\n        prepareVariableRow: function (index, varLabel) {\n            return '<a href=\"#\" onclick=\"' +\n                this.insertFunction +\n                '(' +\n                index +\n                ');return false;\">' +\n                varLabel.escapeHTML() +\n                '</a>';\n        },\n\n        /**\n         * @param {*} variable\n         */\n        insertVariable: function (variable) {\n            var windowId = this.dialogWindowId,\n                textareaElm, scrollPos;\n\n            jQuery('#' + windowId).modal('closeModal');\n            textareaElm = $(this.textareaElementId);\n\n            if (textareaElm) {\n                scrollPos = textareaElm.scrollTop;\n\n                if (!isNaN(variable)) {\n                    updateElementAtCursor(textareaElm, Variables.variablesValue[variable - 1]);\n                } else {\n                    updateElementAtCursor(textareaElm, variable);\n                }\n                textareaElm.focus();\n                textareaElm.scrollTop = scrollPos;\n                jQuery(textareaElm).trigger('change');\n                textareaElm = null;\n            }\n        }\n    };\n\n    window.MagentovariablePlugin = {\n        editor: null,\n        variables: null,\n        textareaId: null,\n\n        /**\n         * @param {*} editor\n         */\n        setEditor: function (editor) {\n            this.editor = editor;\n        },\n\n        /**\n         * @param {String} url\n         * @param {*} textareaId\n         */\n        loadChooser: function (url, textareaId) {\n            this.textareaId = textareaId;\n\n            if (this.variables == null) {\n                new Ajax.Request(url, {\n                    parameters: {},\n                    onComplete: function (transport) {\n                        if (transport.responseText.isJSON()) {\n                            Variables.init(null, 'MagentovariablePlugin.insertVariable');\n                            this.variables = transport.responseText.evalJSON();\n                            this.openChooser(this.variables);\n                        }\n                    }.bind(this)\n                });\n            } else {\n                this.openChooser(this.variables);\n            }\n        },\n\n        /**\n         * @param {*} variables\n         */\n        openChooser: function (variables) {\n            Variables.openVariableChooser(variables);\n        },\n\n        /**\n         * @param {*} value\n         */\n        insertVariable: function (value) {\n            if (this.textareaId) {\n                Variables.init(this.textareaId);\n                Variables.insertVariable(value);\n            } else {\n                Variables.closeDialogWindow();\n                this.editor.execCommand('mceInsertContent', false, value);\n            }\n        }\n    };\n});\n","Magento_Theme/js/bootstrap.js":"/**\n *\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nrequire([\n    'jquery/fileUploader/jquery.fileupload-ui',\n    'mage/adminhtml/browser',\n    'Magento_Theme/js/form'\n]);\n","Magento_Theme/js/custom-js-list.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/template',\n    'jquery/ui'\n], function ($, mageTemplate) {\n    'use strict';\n\n    $.widget('theme.themeJsList', {\n        options: {\n            templateId: null,\n            emptyTemplateId: null,\n            refreshFileListEvent: null,\n            prefixItemId: '',\n            suffixItemId: ''\n        },\n\n        /**\n         * Initialize widget\n         *\n         * @protected\n         */\n        _create: function () {\n            this._bind();\n        },\n\n        /**\n         * Bind event handlers\n         *\n         * @protected\n         */\n        _bind: function () {\n            $('body').on(this.options.refreshFileListEvent, $.proxy(this._onRefreshList, this));\n        },\n\n        /**\n         * Render js files list\n         *\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @protected\n         */\n        _onRefreshList: function (event, data) {\n            $(this.element).html('');\n\n            if (data.jsList.length) {\n                this._renderList(data.jsList);\n            } else {\n                this._renderEmptyList();\n            }\n        },\n\n        /**\n         * Get item js list id\n         *\n         * @param {*} fileId\n         * @return {String}\n         * @protected\n         */\n        _getItemId: function (fileId) {\n            return this.options.prefixItemId + fileId + this.options.suffixItemId;\n        },\n\n        /**\n         * Render js list\n         *\n         * @param {Array} jsList\n         * @protected\n         */\n        _renderList: function (jsList) {\n            var itemTmpl,\n                index,\n                tmpl;\n\n            for (index = 0; index < jsList.length; index++) {\n                itemTmpl = $('<li></li>').html($(this.options.templateId).html());\n\n                $(itemTmpl).attr('class', $(this.options.templateId).attr('class'));\n\n                itemTmpl.attr('id', this._getItemId(jsList[index].id));\n\n                tmpl = mageTemplate(itemTmpl.html(), {\n                    data: jsList[index]\n                });\n\n                itemTmpl.html(tmpl);\n\n                itemTmpl.removeClass('no-display');\n                itemTmpl.appendTo(this.element);\n            }\n        },\n\n        /**\n         * Set empty js list\n         *\n         * @protected\n         */\n        _renderEmptyList: function () {\n            var itemTmpl = $('<li></li>').html($(this.options.emptyTemplateId).html());\n\n            $(itemTmpl).attr('class', $(this.options.emptyTemplateId).attr('class'));\n\n            itemTmpl.attr('id', 'empty-js-list');\n            itemTmpl.removeClass('no-display');\n            itemTmpl.appendTo(this.element);\n        }\n    });\n});\n","Magento_Theme/js/form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'prototype'\n], function () {\n    'use strict';\n\n    /**\n     * @param {*} selected\n     * @param {Object} defaultsById\n     */\n    function parentThemeOnChange(selected, defaultsById) {\n        var statusBar = $$('.tab-item-link')[0],\n            isChanged = statusBar.hasClassName('changed'),\n            defaults;\n\n        if (!isChanged) {\n            defaults = defaultsById[selected];\n            $('theme_title').value = defaults['theme_title'];\n        }\n    }\n\n    window.parentThemeOnChange = parentThemeOnChange;\n});\n","Magento_Theme/js/sortable.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * JQuery UI Widget declaration: 'mage.sortable'\n *\n * @api\n */\ndefine([\n    'jquery',\n    'jquery/ui'\n], function ($) {\n    'use strict';\n\n    /**\n     * Widget panel\n     */\n    $.widget('mage.sortable', $.ui.sortable, {\n        options: {\n            moveUpEvent:   'moveUp',\n            moveDownEvent: 'moveDown'\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this._super();\n            this.initButtons();\n            this.bind();\n        },\n\n        /**\n         * Init buttons.\n         */\n        initButtons: function () {\n            this.element.find('input.up').on('click', $.proxy(function (event) {\n                $('body').trigger(this.options.moveUpEvent, {\n                    item: $(event.target).parent('li')\n                });\n            }, this));\n            this.element.find('input.down').on('click', $.proxy(function (event) {\n                $('body').trigger(this.options.moveDownEvent, {\n                    item: $(event.target).parent('li')\n                });\n            }, this));\n        },\n\n        /**\n         * Bind.\n         */\n        bind: function () {\n            var $body = $('body');\n\n            $body.on(this.options.moveUpEvent, $.proxy(this._onMoveUp, this));\n            $body.on(this.options.moveDownEvent, $.proxy(this._onMoveDown, this));\n        },\n\n        /**\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @private\n         */\n        _onMoveUp: function (event, data) {\n            data.item.insertBefore(data.item.prev());\n        },\n\n        /**\n         * @param {jQuery.Event} event\n         * @param {Object} data\n         * @private\n         */\n        _onMoveDown: function (event, data) {\n            data.item.insertAfter(data.item.next());\n        }\n    });\n\n    return $.mage.sortable;\n});\n","Magento_Theme/js/form/component/robots-reset-button.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @api\n */\ndefine([\n    'Magento_Ui/js/form/components/button',\n    'uiRegistry'\n], function (Button, registry) {\n    'use strict';\n\n    return Button.extend({\n        defaults: {\n            customInstructionField: '${ $.parentName }.custom_instructions',\n            label: '',\n            buttonTpl: 'Magento_Theme/form/element/button'\n        },\n\n        /**\n         * @private\n         * @param {String} json\n         * @return {String}\n         */\n        _parseJson: function (json) {\n            return JSON.parse(json);\n        },\n\n        /**\n         * @param {String} defaultRobotsTxt\n         */\n        reset: function (defaultRobotsTxt) {\n            var customInstructions = registry.get(this.customInstructionField);\n\n            if (customInstructions) {\n                customInstructions.set('value', this._parseJson(defaultRobotsTxt));\n            }\n        }\n    });\n});\n","Magento_Eav/js/input-types.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/translate'\n], function ($) {\n    'use strict';\n\n    return function (config) {\n        $('select#frontend_input').each(function () {\n            var select = $(this),\n                currentValue = select.find('option:selected').val(),\n                compatibleTypes = config.inputTypes,\n                enabledTypes = [],\n                iterator,\n                warning = $('<label>')\n                    .hide()\n                    .text($.mage.__('These changes affect all related products.'))\n                    .addClass('mage-error')\n                    .attr({\n                        generated: true, for: select.attr('id')\n                    }),\n                hint = $('<p>')\n                    .hide()\n                    .addClass('note')\n                    .attr({\n                        generated: true\n                    }),\n                hints = config.hints,\n\n            /**\n             * Toggle hint about changes types\n             */\n            toggleWarning = function () {\n                if (select.find('option:selected').val() === currentValue) {\n                    warning.hide();\n                } else {\n                    warning.show();\n                }\n            },\n\n            /**\n             * Toggle hint\n             */\n            toggleHint = function () {\n                if (typeof hints[select.find('option:selected').val()] !== 'undefined') {\n                    select.after(hint.show().text(hints[select.find('option:selected').val()]));\n                } else {\n                    hint.hide();\n                }\n            },\n\n            /**\n             * Remove unsupported options\n             */\n            removeOption = function () {\n                if (!~enabledTypes.indexOf($(this).val())) {\n                    $(this).remove();\n                }\n            };\n\n            // find enabled types for switching dor current input type\n            for (iterator = 0; iterator < compatibleTypes.length; iterator++) {\n                if (compatibleTypes[iterator].indexOf(currentValue) >= 0) {\n                    enabledTypes = compatibleTypes[iterator];\n                }\n            }\n\n            // Check current type (allow only compatible types)\n            if (~enabledTypes.indexOf(currentValue)) {\n                // Enable select and keep only available options (all other will be removed)\n                select.prop('disabled', false).find('option').each(removeOption);\n                // Add warning on page and event for show/hide it\n                select.after(warning).on('change', toggleWarning);\n            }\n            //bind hint toggling on change event\n            select.on('change', toggleHint);\n            //show hint for currently selected value\n            toggleHint();\n        });\n    };\n});\n","Magento_CatalogInventory/js/components/qty-validator-changer.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Abstract) {\n    'use strict';\n\n    return Abstract.extend({\n        defaults: {\n            valueUpdate: 'input'\n        },\n\n        /**\n         * Change validator\n         */\n        handleChanges: function (value) {\n            var isDigits = value !== 1;\n\n            this.validation['validate-integer'] = isDigits;\n            this.validation['less-than-equals-to'] = isDigits ? 99999999 : 99999999.9999;\n            this.validate();\n        }\n    });\n});\n","Magento_CatalogInventory/js/components/use-config-min-sale-qty.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox',\n    'underscore',\n    'uiRegistry'\n], function (checkbox, _, registry) {\n    'use strict';\n\n    return checkbox.extend({\n        defaults: {\n            valueFromConfig: ''\n        },\n\n        /**\n         * @returns {Element}\n         */\n        initObservable: function () {\n            return this\n                ._super()\n                .observe(['valueFromConfig']);\n        },\n\n        /**\n         * @inheritdoc\n         */\n        initialize: function () {\n            this._super();\n            this.onCheckedChanged(this.checked());\n\n            return this;\n        },\n\n        /**\n         * @inheritdoc\n         */\n        onCheckedChanged: function (newChecked) {\n            var valueFromConfig = this.valueFromConfig();\n\n            if (newChecked && (_.isArray(valueFromConfig) && valueFromConfig.length === 0 || valueFromConfig === 1)) {\n                this.changeVisibleDisabled(this.inputField, true, true, 1);\n            } else if (newChecked && _.isObject(valueFromConfig)) {\n                this.changeVisibleDisabled(this.inputField, false, true, null);\n                this.changeVisibleDisabled(this.dynamicRowsField, true, true, null);\n            } else if (newChecked && _.isNumber(valueFromConfig)) {\n                this.changeVisibleDisabled(this.inputField, true, true, null);\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\n            } else {\n                this.changeVisibleDisabled(this.inputField, true, this.disabled() || false, null);\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\n            }\n\n            this._super(newChecked);\n        },\n\n        /**\n         * Change visible and disabled\n         *\n         * @param {String} filter\n         * @param {Boolean} visible\n         * @param {Boolean} disabled\n         * @param {Null|Number} valueFromConfig\n         */\n        changeVisibleDisabled: function (filter, visible, disabled, valueFromConfig) {\n            registry.async(filter)(\n                function (currentComponent) {\n                    var initialValue = currentComponent.initialValue;\n\n                    if (_.isString(initialValue) || initialValue === 0 || valueFromConfig === 1) {\n                        currentComponent.value(1);\n                    } else if (initialValue) {\n                        currentComponent.value(initialValue);\n                    }\n\n                    currentComponent.visible(visible);\n                    currentComponent.disabled(disabled);\n                }\n            );\n        }\n    });\n});\n","Magento_CatalogInventory/js/components/use-config-settings.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (checkbox) {\n    'use strict';\n\n    return checkbox.extend({\n        defaults: {\n            valueFromConfig: '',\n            linkedValue: '',\n            disableParent: false,\n            listens: {\n                disabled: 'processState',\n                checked: 'processState onCheckedChanged'\n            },\n            imports: {\n                readOnly: 'ns = ${ $.ns }, index = stock_data:disabled'\n            }\n        },\n\n        /**\n         * @returns {Element}\n         */\n        initObservable: function () {\n            return this\n                ._super()\n                .observe(['valueFromConfig', 'linkedValue', 'disableParent']);\n        },\n\n        /**\n         * Handle checked and disabled changes to calculate disableParent value\n         */\n        processState: function () {\n            this.disableParent(this.checked() || this.readOnly);\n\n            if (this.readOnly) {\n                this.disable();\n            }\n        },\n\n        /**\n         * @inheritdoc\n         */\n        onCheckedChanged: function (newChecked) {\n            if (newChecked) {\n                this.linkedValue(this.valueFromConfig());\n            }\n\n            this._super(newChecked);\n        }\n    });\n});\n","Magento_Downloadable/downloadable-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'Magento_Catalog/js/product/weight-handler',\n    'Magento_Catalog/catalog/type-events'\n], function ($, weight, productType) {\n    'use strict';\n\n    return {\n        $checkbox: $('[data-action=change-type-product-downloadable]'),\n        $items: $('#product_info_tabs_downloadable_items'),\n        $tab: null,\n        isDownloadable: false,\n\n        /**\n         * Show\n         */\n        show: function () {\n            this.$checkbox.prop('checked', true);\n            this.$items.show();\n        },\n\n        /**\n         * Hide\n         */\n        hide: function () {\n            this.$checkbox.prop('checked', false);\n            this.$items.hide();\n        },\n\n        /**\n         * Constructor component\n         * @param {Object} data - this backend data\n         */\n        'Magento_Downloadable/downloadable-type-handler': function (data) {\n            this.$tab = $('[data-tab=' + data.tabId + ']');\n            this.isDownloadable = data.isDownloadable;\n            this.bindAll();\n            this._initType();\n        },\n\n        /**\n         * Bind all\n         */\n        bindAll: function () {\n            this.$checkbox.on('change', function (event) {\n                $(document).trigger('setTypeProduct', $(event.target).prop('checked') ?\n                    'downloadable' :\n                    productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\n                );\n            });\n\n            $(document).on('changeTypeProduct', this._initType.bind(this));\n        },\n\n        /**\n         * Init type\n         * @private\n         */\n        _initType: function () {\n            if (productType.type.current === 'downloadable') {\n                weight.change(false);\n                weight.$weightSwitcher().one('change', function () {\n                    $(document).trigger(\n                        'setTypeProduct',\n                        productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\n                    );\n                });\n                this.show();\n            } else {\n                this.hide();\n            }\n        }\n    };\n});\n","Magento_Downloadable/js/components/file-uploader.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/file-uploader'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            fileInputName: ''\n        },\n\n        /**\n         * Adds provided file to the files list.\n         *\n         * @param {Object} file\n         * @returns {FileUploder} Chainable.\n         */\n        addFile: function (file) {\n            var processedFile = this.processFile(file),\n                tmpFile = [],\n                resultFile = {\n                'file': processedFile.file,\n                'name': processedFile.name,\n                'size': processedFile.size,\n                'status': processedFile.status ? processedFile.status : 'new'\n            };\n\n            tmpFile[0] = resultFile;\n\n            this.isMultipleFiles ?\n                this.value.push(tmpFile) :\n                this.value(tmpFile);\n\n            return this;\n        }\n    });\n});\n","Magento_Downloadable/js/components/is-downloadable-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            listens: {\n                disabled: 'changeVisibility'\n            },\n            modules: {\n                samplesFieldset: '${ $.samplesFieldset }',\n                linksFieldset: '${ $.linksFieldset}'\n            }\n        },\n\n        /**\n         * Change visibility for samplesFieldset & linksFieldset based on current statuses of checkbox.\n         */\n        changeVisibility: function () {\n            if (this.samplesFieldset() && this.linksFieldset()) {\n                if (this.checked() && !this.disabled()) {\n                    this.samplesFieldset().visible(true);\n                    this.linksFieldset().visible(true);\n                } else {\n                    this.samplesFieldset().visible(false);\n                    this.linksFieldset().visible(false);\n                }\n            }\n        },\n\n        /**\n         * Handle checked state changes for checkbox / radio button.\n         *\n         * @param {Boolean} newChecked\n         */\n        onCheckedChanged: function (newChecked) {\n            this.changeVisibility();\n            this._super(newChecked);\n        }\n    });\n});\n","Magento_Downloadable/js/components/price-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/abstract'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            linksPurchasedSeparately: '0',\n            useDefaultPrice: false,\n            listens: {\n                linksPurchasedSeparately: 'changeDisabledStatus',\n                useDefaultPrice: 'changeDisabledStatus'\n            }\n        },\n\n        /**\n         * Invokes initialize method of parent class,\n         * contains initialization logic\n         */\n        initialize: function () {\n            this._super();\n            this.changeDisabledStatus();\n\n            return this;\n        },\n\n        /**\n         * Disable/enable price field\n         */\n        changeDisabledStatus: function () {\n            if (this.linksPurchasedSeparately === '1') {\n                if (this.useDefaultPrice) {\n                    this.disabled(true);\n                } else {\n                    this.disabled(false);\n                }\n            } else {\n                this.disabled(true);\n            }\n        }\n    });\n});\n","Magento_Downloadable/js/components/upload-type-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/select',\n    'uiRegistry'\n], function (Select, registry) {\n    'use strict';\n\n    return Select.extend({\n        defaults: {\n            listens: {\n                value: 'changeTypeUpload'\n            },\n            typeUrl: 'file',\n            typeFile: 'link_url',\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\n        },\n\n        /**\n         * Initialize component.\n         * @returns {Element}\n         */\n        initialize: function () {\n            return this\n                ._super()\n                .changeTypeUpload(this.initialValue);\n        },\n\n        /**\n         * Callback that fires when 'value' property is updated.\n         *\n         * @param {String} currentValue\n         * @returns {*}\n         */\n        onUpdate: function (currentValue) {\n            this.changeTypeUpload(currentValue);\n\n            return this._super();\n        },\n\n        /**\n         * Change visibility for typeUrl/typeFile based on current value.\n         *\n         * @param {String} currentValue\n         */\n        changeTypeUpload: function (currentValue) {\n            var componentFile = this.filterPlaceholder + ', index=' + this.typeFile,\n                componentUrl = this.filterPlaceholder + ', index=' + this.typeUrl;\n\n            switch (currentValue) {\n\n                case 'file':\n                    this.changeVisible(componentFile, true);\n                    this.changeVisible(componentUrl, false);\n                    break;\n\n                case 'url':\n                    this.changeVisible(componentFile, false);\n                    this.changeVisible(componentUrl, true);\n                    break;\n            }\n        },\n\n        /**\n         * Change visible\n         *\n         * @param {String} filter\n         * @param {Boolean} visible\n         */\n        changeVisible: function (filter, visible) {\n            registry.async(filter)(\n                function (currentComponent) {\n                    currentComponent.visible(visible);\n                }\n            );\n        }\n    });\n});\n","Magento_Downloadable/js/components/use-price-default-handler.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'Magento_Ui/js/form/element/single-checkbox'\n], function (Element) {\n    'use strict';\n\n    return Element.extend({\n        defaults: {\n            linksPurchasedSeparately: '0',\n            listens: {\n                linksPurchasedSeparately: 'changeVisibleStatus'\n            }\n        },\n\n        /**\n         * Change visibility of checkbox\n         */\n        changeVisibleStatus: function () {\n            if (this.linksPurchasedSeparately === '1') {\n                this.visible(true);\n            } else {\n                this.visible(false);\n            }\n        }\n    });\n});\n","Magento_Review/js/rating.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'jquery/ui'\n], function ($) {\n    'use strict';\n\n    $.widget('marketing.ratingControl', {\n        options: {\n            colorFilled: '#333',\n            colorUnfilled: '#CCCCCC',\n            colorHover: '#f30'\n        },\n\n        /** @inheritdoc */\n        _create: function () {\n            this._labels = this.element.find('label');\n            this._bind();\n        },\n\n        /**\n         * @private\n         */\n        _bind: function () {\n            this._labels.on({\n                click: $.proxy(function (e) {\n                    $(e.currentTarget).prev().prop('checked', true);\n                    this._updateRating();\n                }, this),\n\n                hover: $.proxy(function (e) {\n                    this._updateHover($(e.currentTarget), this.options.colorHover);\n                }, this),\n\n                mouseleave: $.proxy(function (e) {\n                    this._updateHover($(e.currentTarget), this.options.colorUnfilled);\n                }, this)\n            });\n\n            this._updateRating();\n        },\n\n        /**\n         * @param {jQuery} elem\n         * @param {String} color\n         * @private\n         */\n        _updateHover: function (elem, color) {\n            elem.nextAll('label').addBack().filter(function () {\n                return !$(this).data('checked');\n            }).css('color', color);\n        },\n\n        /**\n         * @private\n         */\n        _updateRating: function () {\n            var checkedInputs = this.element.find('input[type=\"radio\"]:checked');\n\n            checkedInputs.nextAll('label').addBack().css('color', this.options.colorFilled).data('checked', true);\n            checkedInputs.prevAll('label').css('color', this.options.colorUnfilled).data('checked', false);\n        },\n\n        /**\n         * Remove rating when form reset\n         */\n        removeRating: function () {\n            var checkedInputs = this.element.find('input[type=\"radio\"]');\n\n            checkedInputs.nextAll('label').css('color', this.options.colorUnfilled).data('checked', false);\n        }\n    });\n\n});\n"}
}});
